
ADC_Driverss.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001470  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001470  00001504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800066  00800066  0000150a  2**0
                  ALLOC
  3 .stab         00001c2c  00000000  00000000  0000150c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000962  00000000  00000000  00003138  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__vector_1>
       8:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__vector_2>
       c:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <main>
      8a:	0c 94 36 0a 	jmp	0x146c	; 0x146c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_enuInit>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	0f 92       	push	r0
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	81 e0       	ldi	r24, 0x01	; 1
      9e:	89 83       	std	Y+1, r24	; 0x01
      a0:	a6 e2       	ldi	r26, 0x26	; 38
      a2:	b0 e0       	ldi	r27, 0x00	; 0
      a4:	e6 e2       	ldi	r30, 0x26	; 38
      a6:	f0 e0       	ldi	r31, 0x00	; 0
      a8:	80 81       	ld	r24, Z
      aa:	80 68       	ori	r24, 0x80	; 128
      ac:	8c 93       	st	X, r24
      ae:	a6 e2       	ldi	r26, 0x26	; 38
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	e6 e2       	ldi	r30, 0x26	; 38
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	80 81       	ld	r24, Z
      b8:	81 60       	ori	r24, 0x01	; 1
      ba:	8c 93       	st	X, r24
      bc:	a6 e2       	ldi	r26, 0x26	; 38
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	e6 e2       	ldi	r30, 0x26	; 38
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	80 81       	ld	r24, Z
      c6:	82 60       	ori	r24, 0x02	; 2
      c8:	8c 93       	st	X, r24
      ca:	a6 e2       	ldi	r26, 0x26	; 38
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	e6 e2       	ldi	r30, 0x26	; 38
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	84 60       	ori	r24, 0x04	; 4
      d6:	8c 93       	st	X, r24
      d8:	a7 e2       	ldi	r26, 0x27	; 39
      da:	b0 e0       	ldi	r27, 0x00	; 0
      dc:	e7 e2       	ldi	r30, 0x27	; 39
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 81       	ld	r24, Z
      e2:	8f 77       	andi	r24, 0x7F	; 127
      e4:	8c 93       	st	X, r24
      e6:	a7 e2       	ldi	r26, 0x27	; 39
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e7 e2       	ldi	r30, 0x27	; 39
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	80 64       	ori	r24, 0x40	; 64
      f2:	8c 93       	st	X, r24
      f4:	a7 e2       	ldi	r26, 0x27	; 39
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	e7 e2       	ldi	r30, 0x27	; 39
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	8f 7d       	andi	r24, 0xDF	; 223
     100:	8c 93       	st	X, r24
     102:	89 81       	ldd	r24, Y+1	; 0x01
     104:	0f 90       	pop	r0
     106:	cf 91       	pop	r28
     108:	df 91       	pop	r29
     10a:	08 95       	ret

0000010c <ADC_enuStartConversion>:

	return Local_enuErrorState;
}

ES ADC_enuStartConversion(void)
{
     10c:	df 93       	push	r29
     10e:	cf 93       	push	r28
     110:	0f 92       	push	r0
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA |= (1<<6);
     11a:	a6 e2       	ldi	r26, 0x26	; 38
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	e6 e2       	ldi	r30, 0x26	; 38
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	80 64       	ori	r24, 0x40	; 64
     126:	8c 93       	st	X, r24

	return Local_enuErrorState;
     128:	89 81       	ldd	r24, Y+1	; 0x01
}
     12a:	0f 90       	pop	r0
     12c:	cf 91       	pop	r28
     12e:	df 91       	pop	r29
     130:	08 95       	ret

00000132 <ADC_enuPollingSystem>:

ES ADC_enuPollingSystem(void)
{
     132:	df 93       	push	r29
     134:	cf 93       	push	r28
     136:	0f 92       	push	r0
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	89 83       	std	Y+1, r24	; 0x01

	while (((ADCSRA >> 4)&1) == 0);
     140:	e6 e2       	ldi	r30, 0x26	; 38
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	80 81       	ld	r24, Z
     146:	82 95       	swap	r24
     148:	8f 70       	andi	r24, 0x0F	; 15
     14a:	88 2f       	mov	r24, r24
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	81 70       	andi	r24, 0x01	; 1
     150:	90 70       	andi	r25, 0x00	; 0
     152:	00 97       	sbiw	r24, 0x00	; 0
     154:	a9 f3       	breq	.-22     	; 0x140 <ADC_enuPollingSystem+0xe>
	ADCSRA |= (1<<4);
     156:	a6 e2       	ldi	r26, 0x26	; 38
     158:	b0 e0       	ldi	r27, 0x00	; 0
     15a:	e6 e2       	ldi	r30, 0x26	; 38
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	80 61       	ori	r24, 0x10	; 16
     162:	8c 93       	st	X, r24

	return Local_enuErrorState;
     164:	89 81       	ldd	r24, Y+1	; 0x01
}
     166:	0f 90       	pop	r0
     168:	cf 91       	pop	r28
     16a:	df 91       	pop	r29
     16c:	08 95       	ret

0000016e <ADC_enuReadHighValue>:

ES ADC_enuReadHighValue(u8 * Copy_pu8Value)
{
     16e:	df 93       	push	r29
     170:	cf 93       	push	r28
     172:	00 d0       	rcall	.+0      	; 0x174 <ADC_enuReadHighValue+0x6>
     174:	0f 92       	push	r0
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	9b 83       	std	Y+3, r25	; 0x03
     17c:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	89 83       	std	Y+1, r24	; 0x01

#if ADC_ADJ == LEFT_ADJ
	*Copy_pu8Value = ADCH;

#elif ADC_ADJ == RIGHT_ADJ
	*Copy_pu8Value  = (ADCL >> 2);
     182:	e4 e2       	ldi	r30, 0x24	; 36
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	80 81       	ld	r24, Z
     188:	86 95       	lsr	r24
     18a:	86 95       	lsr	r24
     18c:	ea 81       	ldd	r30, Y+2	; 0x02
     18e:	fb 81       	ldd	r31, Y+3	; 0x03
     190:	80 83       	st	Z, r24
	*Copy_pu8Value |= (ADCH << 6);
     192:	ea 81       	ldd	r30, Y+2	; 0x02
     194:	fb 81       	ldd	r31, Y+3	; 0x03
     196:	80 81       	ld	r24, Z
     198:	28 2f       	mov	r18, r24
     19a:	e5 e2       	ldi	r30, 0x25	; 37
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	88 2f       	mov	r24, r24
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	00 24       	eor	r0, r0
     1a6:	96 95       	lsr	r25
     1a8:	87 95       	ror	r24
     1aa:	07 94       	ror	r0
     1ac:	96 95       	lsr	r25
     1ae:	87 95       	ror	r24
     1b0:	07 94       	ror	r0
     1b2:	98 2f       	mov	r25, r24
     1b4:	80 2d       	mov	r24, r0
     1b6:	82 2b       	or	r24, r18
     1b8:	ea 81       	ldd	r30, Y+2	; 0x02
     1ba:	fb 81       	ldd	r31, Y+3	; 0x03
     1bc:	80 83       	st	Z, r24
#else
#error" ADC ADJUSTMENT is Wrong "
#endif

	return Local_enuErrorState;
     1be:	89 81       	ldd	r24, Y+1	; 0x01
}
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	cf 91       	pop	r28
     1c8:	df 91       	pop	r29
     1ca:	08 95       	ret

000001cc <ADC_enuRead>:

ES ADC_enuRead(u16 * Copy_pu16Value)
{
     1cc:	df 93       	push	r29
     1ce:	cf 93       	push	r28
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <ADC_enuRead+0x6>
     1d2:	0f 92       	push	r0
     1d4:	cd b7       	in	r28, 0x3d	; 61
     1d6:	de b7       	in	r29, 0x3e	; 62
     1d8:	9b 83       	std	Y+3, r25	; 0x03
     1da:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	89 83       	std	Y+1, r24	; 0x01
#if ADC_ADJ == LEFT_ADJ
	*Copy_pu16Value  = (ADCL >> 6);
	*Copy_pu16Value |= (ADCH << 2);

#elif ADC_ADJ == RIGHT_ADJ
	*Copy_pu16Value  = ADCL;
     1e0:	e4 e2       	ldi	r30, 0x24	; 36
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	88 2f       	mov	r24, r24
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	ea 81       	ldd	r30, Y+2	; 0x02
     1ec:	fb 81       	ldd	r31, Y+3	; 0x03
     1ee:	91 83       	std	Z+1, r25	; 0x01
     1f0:	80 83       	st	Z, r24
	*Copy_pu16Value |= ((u16)ADCH << 8);
     1f2:	ea 81       	ldd	r30, Y+2	; 0x02
     1f4:	fb 81       	ldd	r31, Y+3	; 0x03
     1f6:	20 81       	ld	r18, Z
     1f8:	31 81       	ldd	r19, Z+1	; 0x01
     1fa:	e5 e2       	ldi	r30, 0x25	; 37
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	80 81       	ld	r24, Z
     200:	88 2f       	mov	r24, r24
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	98 2f       	mov	r25, r24
     206:	88 27       	eor	r24, r24
     208:	82 2b       	or	r24, r18
     20a:	93 2b       	or	r25, r19
     20c:	ea 81       	ldd	r30, Y+2	; 0x02
     20e:	fb 81       	ldd	r31, Y+3	; 0x03
     210:	91 83       	std	Z+1, r25	; 0x01
     212:	80 83       	st	Z, r24
#else
#error" ADC ADJUSTMENT is Wrong "
#endif

	return Local_enuErrorState;
     214:	89 81       	ldd	r24, Y+1	; 0x01
}
     216:	0f 90       	pop	r0
     218:	0f 90       	pop	r0
     21a:	0f 90       	pop	r0
     21c:	cf 91       	pop	r28
     21e:	df 91       	pop	r29
     220:	08 95       	ret

00000222 <ADC_enuCallBack>:

ES ADC_enuCallBack(void(*Copy_pfunAppFun)(void*) , void * Copy_pvidAppParameter)
{
     222:	df 93       	push	r29
     224:	cf 93       	push	r28
     226:	00 d0       	rcall	.+0      	; 0x228 <ADC_enuCallBack+0x6>
     228:	00 d0       	rcall	.+0      	; 0x22a <ADC_enuCallBack+0x8>
     22a:	0f 92       	push	r0
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	9b 83       	std	Y+3, r25	; 0x03
     232:	8a 83       	std	Y+2, r24	; 0x02
     234:	7d 83       	std	Y+5, r23	; 0x05
     236:	6c 83       	std	Y+4, r22	; 0x04
	ES Local_enuErrorState = ES_NOK;
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pfunAppFun != NULL)
     23c:	8a 81       	ldd	r24, Y+2	; 0x02
     23e:	9b 81       	ldd	r25, Y+3	; 0x03
     240:	00 97       	sbiw	r24, 0x00	; 0
     242:	61 f0       	breq	.+24     	; 0x25c <ADC_enuCallBack+0x3a>
	{
		ADC_pfunISRFun = Copy_pfunAppFun;
     244:	8a 81       	ldd	r24, Y+2	; 0x02
     246:	9b 81       	ldd	r25, Y+3	; 0x03
     248:	90 93 67 00 	sts	0x0067, r25
     24c:	80 93 66 00 	sts	0x0066, r24
		ADC_pvidISRParameter = Copy_pvidAppParameter;
     250:	8c 81       	ldd	r24, Y+4	; 0x04
     252:	9d 81       	ldd	r25, Y+5	; 0x05
     254:	90 93 69 00 	sts	0x0069, r25
     258:	80 93 68 00 	sts	0x0068, r24
	}

	return Local_enuErrorState;
     25c:	89 81       	ldd	r24, Y+1	; 0x01
}
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	cf 91       	pop	r28
     26a:	df 91       	pop	r29
     26c:	08 95       	ret

0000026e <ADC_enuSelectChannel>:

ES ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
     26e:	df 93       	push	r29
     270:	cf 93       	push	r28
     272:	00 d0       	rcall	.+0      	; 0x274 <ADC_enuSelectChannel+0x6>
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
     278:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	89 83       	std	Y+1, r24	; 0x01

	ADMUX &= ~ 0x1F;
     27e:	a7 e2       	ldi	r26, 0x27	; 39
     280:	b0 e0       	ldi	r27, 0x00	; 0
     282:	e7 e2       	ldi	r30, 0x27	; 39
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	80 7e       	andi	r24, 0xE0	; 224
     28a:	8c 93       	st	X, r24
	ADMUX |= Copy_u8ChannelID;
     28c:	a7 e2       	ldi	r26, 0x27	; 39
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	e7 e2       	ldi	r30, 0x27	; 39
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	90 81       	ld	r25, Z
     296:	8a 81       	ldd	r24, Y+2	; 0x02
     298:	89 2b       	or	r24, r25
     29a:	8c 93       	st	X, r24

	return Local_enuErrorState;
     29c:	89 81       	ldd	r24, Y+1	; 0x01
}
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	cf 91       	pop	r28
     2a4:	df 91       	pop	r29
     2a6:	08 95       	ret

000002a8 <ADC_enuEnableTriggeringMode>:

ES ADC_enuEnableTriggeringMode(u8 Copy_u8TriggeringSource)
{
     2a8:	df 93       	push	r29
     2aa:	cf 93       	push	r28
     2ac:	00 d0       	rcall	.+0      	; 0x2ae <ADC_enuEnableTriggeringMode+0x6>
     2ae:	00 d0       	rcall	.+0      	; 0x2b0 <ADC_enuEnableTriggeringMode+0x8>
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA &=~(1<<5);
     2ba:	a6 e2       	ldi	r26, 0x26	; 38
     2bc:	b0 e0       	ldi	r27, 0x00	; 0
     2be:	e6 e2       	ldi	r30, 0x26	; 38
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	8f 7d       	andi	r24, 0xDF	; 223
     2c6:	8c 93       	st	X, r24

	switch(Copy_u8TriggeringSource)
     2c8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ca:	28 2f       	mov	r18, r24
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	3c 83       	std	Y+4, r19	; 0x04
     2d0:	2b 83       	std	Y+3, r18	; 0x03
     2d2:	8b 81       	ldd	r24, Y+3	; 0x03
     2d4:	9c 81       	ldd	r25, Y+4	; 0x04
     2d6:	80 31       	cpi	r24, 0x10	; 16
     2d8:	91 05       	cpc	r25, r1
     2da:	d9 f0       	breq	.+54     	; 0x312 <ADC_enuEnableTriggeringMode+0x6a>
     2dc:	2b 81       	ldd	r18, Y+3	; 0x03
     2de:	3c 81       	ldd	r19, Y+4	; 0x04
     2e0:	22 31       	cpi	r18, 0x12	; 18
     2e2:	31 05       	cpc	r19, r1
     2e4:	59 f5       	brne	.+86     	; 0x33c <ADC_enuEnableTriggeringMode+0x94>
	{
	case FREE_RUNNING:
		SFIOR &=~(1<<5);
     2e6:	a0 e5       	ldi	r26, 0x50	; 80
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	e0 e5       	ldi	r30, 0x50	; 80
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	8f 7d       	andi	r24, 0xDF	; 223
     2f2:	8c 93       	st	X, r24
		SFIOR &=~(1<<6);
     2f4:	a0 e5       	ldi	r26, 0x50	; 80
     2f6:	b0 e0       	ldi	r27, 0x00	; 0
     2f8:	e0 e5       	ldi	r30, 0x50	; 80
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	80 81       	ld	r24, Z
     2fe:	8f 7b       	andi	r24, 0xBF	; 191
     300:	8c 93       	st	X, r24
		SFIOR &=~(1<<7);
     302:	a0 e5       	ldi	r26, 0x50	; 80
     304:	b0 e0       	ldi	r27, 0x00	; 0
     306:	e0 e5       	ldi	r30, 0x50	; 80
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	80 81       	ld	r24, Z
     30c:	8f 77       	andi	r24, 0x7F	; 127
     30e:	8c 93       	st	X, r24
     310:	15 c0       	rjmp	.+42     	; 0x33c <ADC_enuEnableTriggeringMode+0x94>
		break;
	case EXTI0_TRIG:
		SFIOR &=~(1<<5);
     312:	a0 e5       	ldi	r26, 0x50	; 80
     314:	b0 e0       	ldi	r27, 0x00	; 0
     316:	e0 e5       	ldi	r30, 0x50	; 80
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	80 81       	ld	r24, Z
     31c:	8f 7d       	andi	r24, 0xDF	; 223
     31e:	8c 93       	st	X, r24
		SFIOR |= (1<<6);
     320:	a0 e5       	ldi	r26, 0x50	; 80
     322:	b0 e0       	ldi	r27, 0x00	; 0
     324:	e0 e5       	ldi	r30, 0x50	; 80
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	80 81       	ld	r24, Z
     32a:	80 64       	ori	r24, 0x40	; 64
     32c:	8c 93       	st	X, r24
		SFIOR &=~(1<<7);
     32e:	a0 e5       	ldi	r26, 0x50	; 80
     330:	b0 e0       	ldi	r27, 0x00	; 0
     332:	e0 e5       	ldi	r30, 0x50	; 80
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 81       	ld	r24, Z
     338:	8f 77       	andi	r24, 0x7F	; 127
     33a:	8c 93       	st	X, r24
		break;
	}

	ADCSRA |=(1<<5);
     33c:	a6 e2       	ldi	r26, 0x26	; 38
     33e:	b0 e0       	ldi	r27, 0x00	; 0
     340:	e6 e2       	ldi	r30, 0x26	; 38
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	80 81       	ld	r24, Z
     346:	80 62       	ori	r24, 0x20	; 32
     348:	8c 93       	st	X, r24

	return Local_enuErrorState;
     34a:	89 81       	ldd	r24, Y+1	; 0x01
}
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	cf 91       	pop	r28
     356:	df 91       	pop	r29
     358:	08 95       	ret

0000035a <ADC_enuDisableTriggeringMode>:


ES ADC_enuDisableTriggeringMode(void)
{
     35a:	df 93       	push	r29
     35c:	cf 93       	push	r28
     35e:	0f 92       	push	r0
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA &=~(1<<5);
     368:	a6 e2       	ldi	r26, 0x26	; 38
     36a:	b0 e0       	ldi	r27, 0x00	; 0
     36c:	e6 e2       	ldi	r30, 0x26	; 38
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	80 81       	ld	r24, Z
     372:	8f 7d       	andi	r24, 0xDF	; 223
     374:	8c 93       	st	X, r24

	return Local_enuErrorState;
     376:	89 81       	ldd	r24, Y+1	; 0x01
}
     378:	0f 90       	pop	r0
     37a:	cf 91       	pop	r28
     37c:	df 91       	pop	r29
     37e:	08 95       	ret

00000380 <ADC_enuEnableInterruptMode>:

ES ADC_enuEnableInterruptMode(void)
{
     380:	df 93       	push	r29
     382:	cf 93       	push	r28
     384:	0f 92       	push	r0
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA |= (1<<3);
     38e:	a6 e2       	ldi	r26, 0x26	; 38
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	e6 e2       	ldi	r30, 0x26	; 38
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	80 81       	ld	r24, Z
     398:	88 60       	ori	r24, 0x08	; 8
     39a:	8c 93       	st	X, r24

	return Local_enuErrorState;
     39c:	89 81       	ldd	r24, Y+1	; 0x01
}
     39e:	0f 90       	pop	r0
     3a0:	cf 91       	pop	r28
     3a2:	df 91       	pop	r29
     3a4:	08 95       	ret

000003a6 <__vector_16>:

ISR(VECT_ADC)
{
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
     3b0:	2f 93       	push	r18
     3b2:	3f 93       	push	r19
     3b4:	4f 93       	push	r20
     3b6:	5f 93       	push	r21
     3b8:	6f 93       	push	r22
     3ba:	7f 93       	push	r23
     3bc:	8f 93       	push	r24
     3be:	9f 93       	push	r25
     3c0:	af 93       	push	r26
     3c2:	bf 93       	push	r27
     3c4:	ef 93       	push	r30
     3c6:	ff 93       	push	r31
     3c8:	df 93       	push	r29
     3ca:	cf 93       	push	r28
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
	if (ADC_pfunISRFun != NULL)
     3d0:	80 91 66 00 	lds	r24, 0x0066
     3d4:	90 91 67 00 	lds	r25, 0x0067
     3d8:	00 97       	sbiw	r24, 0x00	; 0
     3da:	49 f0       	breq	.+18     	; 0x3ee <__vector_16+0x48>
	{
		ADC_pfunISRFun(ADC_pvidISRParameter);
     3dc:	e0 91 66 00 	lds	r30, 0x0066
     3e0:	f0 91 67 00 	lds	r31, 0x0067
     3e4:	80 91 68 00 	lds	r24, 0x0068
     3e8:	90 91 69 00 	lds	r25, 0x0069
     3ec:	09 95       	icall
	}
}
     3ee:	cf 91       	pop	r28
     3f0:	df 91       	pop	r29
     3f2:	ff 91       	pop	r31
     3f4:	ef 91       	pop	r30
     3f6:	bf 91       	pop	r27
     3f8:	af 91       	pop	r26
     3fa:	9f 91       	pop	r25
     3fc:	8f 91       	pop	r24
     3fe:	7f 91       	pop	r23
     400:	6f 91       	pop	r22
     402:	5f 91       	pop	r21
     404:	4f 91       	pop	r20
     406:	3f 91       	pop	r19
     408:	2f 91       	pop	r18
     40a:	0f 90       	pop	r0
     40c:	0f be       	out	0x3f, r0	; 63
     40e:	0f 90       	pop	r0
     410:	1f 90       	pop	r1
     412:	18 95       	reti

00000414 <DIO_enuInit>:
#include "DIO_config.h"



ES DIO_enuInit(void)
{
     414:	df 93       	push	r29
     416:	cf 93       	push	r28
     418:	0f 92       	push	r0
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	89 83       	std	Y+1, r24	; 0x01

	//Initialize Direction Pins
	DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
     422:	ea e3       	ldi	r30, 0x3A	; 58
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	8f ef       	ldi	r24, 0xFF	; 255
     428:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
     42a:	e7 e3       	ldi	r30, 0x37	; 55
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	8f ef       	ldi	r24, 0xFF	; 255
     430:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
     432:	e4 e3       	ldi	r30, 0x34	; 52
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	8f ef       	ldi	r24, 0xFF	; 255
     438:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
     43a:	e1 e3       	ldi	r30, 0x31	; 49
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	8f ef       	ldi	r24, 0xFF	; 255
     440:	80 83       	st	Z, r24

	//Initialize Port Pins
	PORTA = CONC(PA_PIN7_Val, PA_PIN6_Val, PA_PIN5_Val, PA_PIN4_Val, PA_PIN3_Val, PA_PIN2_Val, PA_PIN1_Val, PA_PIN0_Val);
     442:	eb e3       	ldi	r30, 0x3B	; 59
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	8f ef       	ldi	r24, 0xFF	; 255
     448:	80 83       	st	Z, r24
	PORTB = CONC(PB_PIN7_Val, PB_PIN6_Val, PB_PIN5_Val, PB_PIN4_Val, PB_PIN3_Val, PB_PIN2_Val, PB_PIN1_Val, PB_PIN0_Val);
     44a:	e8 e3       	ldi	r30, 0x38	; 56
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	8f ef       	ldi	r24, 0xFF	; 255
     450:	80 83       	st	Z, r24
	PORTC = CONC(PC_PIN7_Val, PC_PIN6_Val, PC_PIN5_Val, PC_PIN4_Val, PC_PIN3_Val, PC_PIN2_Val, PC_PIN1_Val, PC_PIN0_Val);
     452:	e5 e3       	ldi	r30, 0x35	; 53
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	8f ef       	ldi	r24, 0xFF	; 255
     458:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_Val, PD_PIN6_Val, PD_PIN5_Val, PD_PIN4_Val, PD_PIN3_Val, PD_PIN2_Val, PD_PIN1_Val, PD_PIN0_Val);
     45a:	e2 e3       	ldi	r30, 0x32	; 50
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	8f ef       	ldi	r24, 0xFF	; 255
     460:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
     462:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
     464:	89 81       	ldd	r24, Y+1	; 0x01
}
     466:	0f 90       	pop	r0
     468:	cf 91       	pop	r28
     46a:	df 91       	pop	r29
     46c:	08 95       	ret

0000046e <DIO_enuSetPortDirection>:


ES DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     46e:	df 93       	push	r29
     470:	cf 93       	push	r28
     472:	00 d0       	rcall	.+0      	; 0x474 <DIO_enuSetPortDirection+0x6>
     474:	00 d0       	rcall	.+0      	; 0x476 <DIO_enuSetPortDirection+0x8>
     476:	0f 92       	push	r0
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
     47c:	8a 83       	std	Y+2, r24	; 0x02
     47e:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
     484:	8a 81       	ldd	r24, Y+2	; 0x02
     486:	84 30       	cpi	r24, 0x04	; 4
     488:	18 f0       	brcs	.+6      	; 0x490 <DIO_enuSetPortDirection+0x22>
     48a:	83 e0       	ldi	r24, 0x03	; 3
     48c:	89 83       	std	Y+1, r24	; 0x01
     48e:	33 c0       	rjmp	.+102    	; 0x4f6 <DIO_enuSetPortDirection+0x88>
	else{
		switch(Copy_u8PortID){
     490:	8a 81       	ldd	r24, Y+2	; 0x02
     492:	28 2f       	mov	r18, r24
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	3d 83       	std	Y+5, r19	; 0x05
     498:	2c 83       	std	Y+4, r18	; 0x04
     49a:	8c 81       	ldd	r24, Y+4	; 0x04
     49c:	9d 81       	ldd	r25, Y+5	; 0x05
     49e:	81 30       	cpi	r24, 0x01	; 1
     4a0:	91 05       	cpc	r25, r1
     4a2:	d1 f0       	breq	.+52     	; 0x4d8 <DIO_enuSetPortDirection+0x6a>
     4a4:	2c 81       	ldd	r18, Y+4	; 0x04
     4a6:	3d 81       	ldd	r19, Y+5	; 0x05
     4a8:	22 30       	cpi	r18, 0x02	; 2
     4aa:	31 05       	cpc	r19, r1
     4ac:	2c f4       	brge	.+10     	; 0x4b8 <DIO_enuSetPortDirection+0x4a>
     4ae:	8c 81       	ldd	r24, Y+4	; 0x04
     4b0:	9d 81       	ldd	r25, Y+5	; 0x05
     4b2:	00 97       	sbiw	r24, 0x00	; 0
     4b4:	61 f0       	breq	.+24     	; 0x4ce <DIO_enuSetPortDirection+0x60>
     4b6:	1e c0       	rjmp	.+60     	; 0x4f4 <DIO_enuSetPortDirection+0x86>
     4b8:	2c 81       	ldd	r18, Y+4	; 0x04
     4ba:	3d 81       	ldd	r19, Y+5	; 0x05
     4bc:	22 30       	cpi	r18, 0x02	; 2
     4be:	31 05       	cpc	r19, r1
     4c0:	81 f0       	breq	.+32     	; 0x4e2 <DIO_enuSetPortDirection+0x74>
     4c2:	8c 81       	ldd	r24, Y+4	; 0x04
     4c4:	9d 81       	ldd	r25, Y+5	; 0x05
     4c6:	83 30       	cpi	r24, 0x03	; 3
     4c8:	91 05       	cpc	r25, r1
     4ca:	81 f0       	breq	.+32     	; 0x4ec <DIO_enuSetPortDirection+0x7e>
     4cc:	13 c0       	rjmp	.+38     	; 0x4f4 <DIO_enuSetPortDirection+0x86>
			case DIO_PORTA:
				DDRA = Copy_u8Value;
     4ce:	ea e3       	ldi	r30, 0x3A	; 58
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	8b 81       	ldd	r24, Y+3	; 0x03
     4d4:	80 83       	st	Z, r24
     4d6:	0e c0       	rjmp	.+28     	; 0x4f4 <DIO_enuSetPortDirection+0x86>
				break;
			case DIO_PORTB:
				DDRB = Copy_u8Value;
     4d8:	e7 e3       	ldi	r30, 0x37	; 55
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	8b 81       	ldd	r24, Y+3	; 0x03
     4de:	80 83       	st	Z, r24
     4e0:	09 c0       	rjmp	.+18     	; 0x4f4 <DIO_enuSetPortDirection+0x86>
				break;
			case DIO_PORTC:
				DDRC = Copy_u8Value;
     4e2:	e4 e3       	ldi	r30, 0x34	; 52
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	8b 81       	ldd	r24, Y+3	; 0x03
     4e8:	80 83       	st	Z, r24
     4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <DIO_enuSetPortDirection+0x86>
				break;
			case DIO_PORTD:
				DDRD = Copy_u8Value;
     4ec:	e1 e3       	ldi	r30, 0x31	; 49
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	8b 81       	ldd	r24, Y+3	; 0x03
     4f2:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
     4f4:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
}
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	cf 91       	pop	r28
     504:	df 91       	pop	r29
     506:	08 95       	ret

00000508 <DIO_enuSetPortValue>:

ES DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     508:	df 93       	push	r29
     50a:	cf 93       	push	r28
     50c:	00 d0       	rcall	.+0      	; 0x50e <DIO_enuSetPortValue+0x6>
     50e:	00 d0       	rcall	.+0      	; 0x510 <DIO_enuSetPortValue+0x8>
     510:	0f 92       	push	r0
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
     516:	8a 83       	std	Y+2, r24	; 0x02
     518:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
     51e:	8a 81       	ldd	r24, Y+2	; 0x02
     520:	84 30       	cpi	r24, 0x04	; 4
     522:	18 f0       	brcs	.+6      	; 0x52a <DIO_enuSetPortValue+0x22>
     524:	83 e0       	ldi	r24, 0x03	; 3
     526:	89 83       	std	Y+1, r24	; 0x01
     528:	33 c0       	rjmp	.+102    	; 0x590 <DIO_enuSetPortValue+0x88>
	else{
		switch(Copy_u8PortID){
     52a:	8a 81       	ldd	r24, Y+2	; 0x02
     52c:	28 2f       	mov	r18, r24
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	3d 83       	std	Y+5, r19	; 0x05
     532:	2c 83       	std	Y+4, r18	; 0x04
     534:	8c 81       	ldd	r24, Y+4	; 0x04
     536:	9d 81       	ldd	r25, Y+5	; 0x05
     538:	81 30       	cpi	r24, 0x01	; 1
     53a:	91 05       	cpc	r25, r1
     53c:	d1 f0       	breq	.+52     	; 0x572 <DIO_enuSetPortValue+0x6a>
     53e:	2c 81       	ldd	r18, Y+4	; 0x04
     540:	3d 81       	ldd	r19, Y+5	; 0x05
     542:	22 30       	cpi	r18, 0x02	; 2
     544:	31 05       	cpc	r19, r1
     546:	2c f4       	brge	.+10     	; 0x552 <DIO_enuSetPortValue+0x4a>
     548:	8c 81       	ldd	r24, Y+4	; 0x04
     54a:	9d 81       	ldd	r25, Y+5	; 0x05
     54c:	00 97       	sbiw	r24, 0x00	; 0
     54e:	61 f0       	breq	.+24     	; 0x568 <DIO_enuSetPortValue+0x60>
     550:	1e c0       	rjmp	.+60     	; 0x58e <DIO_enuSetPortValue+0x86>
     552:	2c 81       	ldd	r18, Y+4	; 0x04
     554:	3d 81       	ldd	r19, Y+5	; 0x05
     556:	22 30       	cpi	r18, 0x02	; 2
     558:	31 05       	cpc	r19, r1
     55a:	81 f0       	breq	.+32     	; 0x57c <DIO_enuSetPortValue+0x74>
     55c:	8c 81       	ldd	r24, Y+4	; 0x04
     55e:	9d 81       	ldd	r25, Y+5	; 0x05
     560:	83 30       	cpi	r24, 0x03	; 3
     562:	91 05       	cpc	r25, r1
     564:	81 f0       	breq	.+32     	; 0x586 <DIO_enuSetPortValue+0x7e>
     566:	13 c0       	rjmp	.+38     	; 0x58e <DIO_enuSetPortValue+0x86>
			case DIO_PORTA:
				PORTA = Copy_u8Value;
     568:	eb e3       	ldi	r30, 0x3B	; 59
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	8b 81       	ldd	r24, Y+3	; 0x03
     56e:	80 83       	st	Z, r24
     570:	0e c0       	rjmp	.+28     	; 0x58e <DIO_enuSetPortValue+0x86>
				break;
			case DIO_PORTB:
				PORTB = Copy_u8Value;
     572:	e8 e3       	ldi	r30, 0x38	; 56
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	8b 81       	ldd	r24, Y+3	; 0x03
     578:	80 83       	st	Z, r24
     57a:	09 c0       	rjmp	.+18     	; 0x58e <DIO_enuSetPortValue+0x86>
				break;
			case DIO_PORTC:
				PORTC = Copy_u8Value;
     57c:	e5 e3       	ldi	r30, 0x35	; 53
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	8b 81       	ldd	r24, Y+3	; 0x03
     582:	80 83       	st	Z, r24
     584:	04 c0       	rjmp	.+8      	; 0x58e <DIO_enuSetPortValue+0x86>
				break;
			case DIO_PORTD:
				PORTD = Copy_u8Value;
     586:	e2 e3       	ldi	r30, 0x32	; 50
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	8b 81       	ldd	r24, Y+3	; 0x03
     58c:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
     58e:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
     590:	89 81       	ldd	r24, Y+1	; 0x01
}
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	cf 91       	pop	r28
     59e:	df 91       	pop	r29
     5a0:	08 95       	ret

000005a2 <DIO_enuTogPort>:

ES DIO_enuTogPort(u8 Copy_u8PortID)
{
     5a2:	df 93       	push	r29
     5a4:	cf 93       	push	r28
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <DIO_enuTogPort+0x6>
     5a8:	00 d0       	rcall	.+0      	; 0x5aa <DIO_enuTogPort+0x8>
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
     5b4:	8a 81       	ldd	r24, Y+2	; 0x02
     5b6:	84 30       	cpi	r24, 0x04	; 4
     5b8:	18 f0       	brcs	.+6      	; 0x5c0 <DIO_enuTogPort+0x1e>
     5ba:	83 e0       	ldi	r24, 0x03	; 3
     5bc:	89 83       	std	Y+1, r24	; 0x01
     5be:	3f c0       	rjmp	.+126    	; 0x63e <DIO_enuTogPort+0x9c>
	else{
		switch(Copy_u8PortID){
     5c0:	8a 81       	ldd	r24, Y+2	; 0x02
     5c2:	28 2f       	mov	r18, r24
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	3c 83       	std	Y+4, r19	; 0x04
     5c8:	2b 83       	std	Y+3, r18	; 0x03
     5ca:	8b 81       	ldd	r24, Y+3	; 0x03
     5cc:	9c 81       	ldd	r25, Y+4	; 0x04
     5ce:	81 30       	cpi	r24, 0x01	; 1
     5d0:	91 05       	cpc	r25, r1
     5d2:	e9 f0       	breq	.+58     	; 0x60e <DIO_enuTogPort+0x6c>
     5d4:	2b 81       	ldd	r18, Y+3	; 0x03
     5d6:	3c 81       	ldd	r19, Y+4	; 0x04
     5d8:	22 30       	cpi	r18, 0x02	; 2
     5da:	31 05       	cpc	r19, r1
     5dc:	2c f4       	brge	.+10     	; 0x5e8 <DIO_enuTogPort+0x46>
     5de:	8b 81       	ldd	r24, Y+3	; 0x03
     5e0:	9c 81       	ldd	r25, Y+4	; 0x04
     5e2:	00 97       	sbiw	r24, 0x00	; 0
     5e4:	61 f0       	breq	.+24     	; 0x5fe <DIO_enuTogPort+0x5c>
     5e6:	2a c0       	rjmp	.+84     	; 0x63c <DIO_enuTogPort+0x9a>
     5e8:	2b 81       	ldd	r18, Y+3	; 0x03
     5ea:	3c 81       	ldd	r19, Y+4	; 0x04
     5ec:	22 30       	cpi	r18, 0x02	; 2
     5ee:	31 05       	cpc	r19, r1
     5f0:	b1 f0       	breq	.+44     	; 0x61e <DIO_enuTogPort+0x7c>
     5f2:	8b 81       	ldd	r24, Y+3	; 0x03
     5f4:	9c 81       	ldd	r25, Y+4	; 0x04
     5f6:	83 30       	cpi	r24, 0x03	; 3
     5f8:	91 05       	cpc	r25, r1
     5fa:	c9 f0       	breq	.+50     	; 0x62e <DIO_enuTogPort+0x8c>
     5fc:	1f c0       	rjmp	.+62     	; 0x63c <DIO_enuTogPort+0x9a>
			case DIO_PORTA:
				PORTA = ~PORTA;
     5fe:	ab e3       	ldi	r26, 0x3B	; 59
     600:	b0 e0       	ldi	r27, 0x00	; 0
     602:	eb e3       	ldi	r30, 0x3B	; 59
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	80 95       	com	r24
     60a:	8c 93       	st	X, r24
     60c:	17 c0       	rjmp	.+46     	; 0x63c <DIO_enuTogPort+0x9a>
				break;
			case DIO_PORTB:
				PORTB = ~PORTB;
     60e:	a8 e3       	ldi	r26, 0x38	; 56
     610:	b0 e0       	ldi	r27, 0x00	; 0
     612:	e8 e3       	ldi	r30, 0x38	; 56
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	80 81       	ld	r24, Z
     618:	80 95       	com	r24
     61a:	8c 93       	st	X, r24
     61c:	0f c0       	rjmp	.+30     	; 0x63c <DIO_enuTogPort+0x9a>
				break;
			case DIO_PORTC:
				PORTC = ~PORTC;
     61e:	a5 e3       	ldi	r26, 0x35	; 53
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	e5 e3       	ldi	r30, 0x35	; 53
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	80 81       	ld	r24, Z
     628:	80 95       	com	r24
     62a:	8c 93       	st	X, r24
     62c:	07 c0       	rjmp	.+14     	; 0x63c <DIO_enuTogPort+0x9a>
				break;
			case DIO_PORTD:
				PORTD = ~PORTD;
     62e:	a2 e3       	ldi	r26, 0x32	; 50
     630:	b0 e0       	ldi	r27, 0x00	; 0
     632:	e2 e3       	ldi	r30, 0x32	; 50
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	80 81       	ld	r24, Z
     638:	80 95       	com	r24
     63a:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
     63c:	19 82       	std	Y+1, r1	; 0x01
	}


	return Local_enuErrorState;
     63e:	89 81       	ldd	r24, Y+1	; 0x01
}
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	cf 91       	pop	r28
     64a:	df 91       	pop	r29
     64c:	08 95       	ret

0000064e <DIO_enuGetPort>:

ES DIO_enuGetPort(u8 Copy_u8PortID, u8* Copy_pu8Value)
{
     64e:	df 93       	push	r29
     650:	cf 93       	push	r28
     652:	00 d0       	rcall	.+0      	; 0x654 <DIO_enuGetPort+0x6>
     654:	00 d0       	rcall	.+0      	; 0x656 <DIO_enuGetPort+0x8>
     656:	00 d0       	rcall	.+0      	; 0x658 <DIO_enuGetPort+0xa>
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	8a 83       	std	Y+2, r24	; 0x02
     65e:	7c 83       	std	Y+4, r23	; 0x04
     660:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pu8Value == NULL) Local_enuErrorState = ES_NULL_POINTER;
     666:	8b 81       	ldd	r24, Y+3	; 0x03
     668:	9c 81       	ldd	r25, Y+4	; 0x04
     66a:	00 97       	sbiw	r24, 0x00	; 0
     66c:	19 f4       	brne	.+6      	; 0x674 <DIO_enuGetPort+0x26>
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	89 83       	std	Y+1, r24	; 0x01
     672:	41 c0       	rjmp	.+130    	; 0x6f6 <DIO_enuGetPort+0xa8>
	else if (Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
     674:	8a 81       	ldd	r24, Y+2	; 0x02
     676:	84 30       	cpi	r24, 0x04	; 4
     678:	18 f0       	brcs	.+6      	; 0x680 <DIO_enuGetPort+0x32>
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	89 83       	std	Y+1, r24	; 0x01
     67e:	3b c0       	rjmp	.+118    	; 0x6f6 <DIO_enuGetPort+0xa8>
	else{
		switch(Copy_u8PortID){
     680:	8a 81       	ldd	r24, Y+2	; 0x02
     682:	28 2f       	mov	r18, r24
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	3e 83       	std	Y+6, r19	; 0x06
     688:	2d 83       	std	Y+5, r18	; 0x05
     68a:	8d 81       	ldd	r24, Y+5	; 0x05
     68c:	9e 81       	ldd	r25, Y+6	; 0x06
     68e:	81 30       	cpi	r24, 0x01	; 1
     690:	91 05       	cpc	r25, r1
     692:	e1 f0       	breq	.+56     	; 0x6cc <DIO_enuGetPort+0x7e>
     694:	2d 81       	ldd	r18, Y+5	; 0x05
     696:	3e 81       	ldd	r19, Y+6	; 0x06
     698:	22 30       	cpi	r18, 0x02	; 2
     69a:	31 05       	cpc	r19, r1
     69c:	2c f4       	brge	.+10     	; 0x6a8 <DIO_enuGetPort+0x5a>
     69e:	8d 81       	ldd	r24, Y+5	; 0x05
     6a0:	9e 81       	ldd	r25, Y+6	; 0x06
     6a2:	00 97       	sbiw	r24, 0x00	; 0
     6a4:	61 f0       	breq	.+24     	; 0x6be <DIO_enuGetPort+0x70>
     6a6:	26 c0       	rjmp	.+76     	; 0x6f4 <DIO_enuGetPort+0xa6>
     6a8:	2d 81       	ldd	r18, Y+5	; 0x05
     6aa:	3e 81       	ldd	r19, Y+6	; 0x06
     6ac:	22 30       	cpi	r18, 0x02	; 2
     6ae:	31 05       	cpc	r19, r1
     6b0:	a1 f0       	breq	.+40     	; 0x6da <DIO_enuGetPort+0x8c>
     6b2:	8d 81       	ldd	r24, Y+5	; 0x05
     6b4:	9e 81       	ldd	r25, Y+6	; 0x06
     6b6:	83 30       	cpi	r24, 0x03	; 3
     6b8:	91 05       	cpc	r25, r1
     6ba:	b1 f0       	breq	.+44     	; 0x6e8 <DIO_enuGetPort+0x9a>
     6bc:	1b c0       	rjmp	.+54     	; 0x6f4 <DIO_enuGetPort+0xa6>
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
     6be:	e9 e3       	ldi	r30, 0x39	; 57
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	80 81       	ld	r24, Z
     6c4:	eb 81       	ldd	r30, Y+3	; 0x03
     6c6:	fc 81       	ldd	r31, Y+4	; 0x04
     6c8:	80 83       	st	Z, r24
     6ca:	14 c0       	rjmp	.+40     	; 0x6f4 <DIO_enuGetPort+0xa6>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
     6cc:	e6 e3       	ldi	r30, 0x36	; 54
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	80 81       	ld	r24, Z
     6d2:	eb 81       	ldd	r30, Y+3	; 0x03
     6d4:	fc 81       	ldd	r31, Y+4	; 0x04
     6d6:	80 83       	st	Z, r24
     6d8:	0d c0       	rjmp	.+26     	; 0x6f4 <DIO_enuGetPort+0xa6>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
     6da:	e3 e3       	ldi	r30, 0x33	; 51
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	80 81       	ld	r24, Z
     6e0:	eb 81       	ldd	r30, Y+3	; 0x03
     6e2:	fc 81       	ldd	r31, Y+4	; 0x04
     6e4:	80 83       	st	Z, r24
     6e6:	06 c0       	rjmp	.+12     	; 0x6f4 <DIO_enuGetPort+0xa6>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
     6e8:	e0 e3       	ldi	r30, 0x30	; 48
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	80 81       	ld	r24, Z
     6ee:	eb 81       	ldd	r30, Y+3	; 0x03
     6f0:	fc 81       	ldd	r31, Y+4	; 0x04
     6f2:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
     6f4:	19 82       	std	Y+1, r1	; 0x01
	}


	return Local_enuErrorState;
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
}
     6f8:	26 96       	adiw	r28, 0x06	; 6
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	f8 94       	cli
     6fe:	de bf       	out	0x3e, r29	; 62
     700:	0f be       	out	0x3f, r0	; 63
     702:	cd bf       	out	0x3d, r28	; 61
     704:	cf 91       	pop	r28
     706:	df 91       	pop	r29
     708:	08 95       	ret

0000070a <DIO_enuSetPinDirection>:




ES DIO_enuSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Value)
{
     70a:	df 93       	push	r29
     70c:	cf 93       	push	r28
     70e:	00 d0       	rcall	.+0      	; 0x710 <DIO_enuSetPinDirection+0x6>
     710:	00 d0       	rcall	.+0      	; 0x712 <DIO_enuSetPinDirection+0x8>
     712:	00 d0       	rcall	.+0      	; 0x714 <DIO_enuSetPinDirection+0xa>
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	8a 83       	std	Y+2, r24	; 0x02
     71a:	6b 83       	std	Y+3, r22	; 0x03
     71c:	4c 83       	std	Y+4, r20	; 0x04
	ES Local_enuErrorState = ES_NOK;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD || Copy_u8Value > OUTPUT) Local_enuErrorState = ES_OUT_OF_RANGE;
     722:	8a 81       	ldd	r24, Y+2	; 0x02
     724:	84 30       	cpi	r24, 0x04	; 4
     726:	18 f4       	brcc	.+6      	; 0x72e <DIO_enuSetPinDirection+0x24>
     728:	8c 81       	ldd	r24, Y+4	; 0x04
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	18 f0       	brcs	.+6      	; 0x734 <DIO_enuSetPinDirection+0x2a>
     72e:	83 e0       	ldi	r24, 0x03	; 3
     730:	89 83       	std	Y+1, r24	; 0x01
     732:	cd c0       	rjmp	.+410    	; 0x8ce <__stack+0x6f>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
     734:	8b 81       	ldd	r24, Y+3	; 0x03
     736:	88 30       	cpi	r24, 0x08	; 8
     738:	18 f0       	brcs	.+6      	; 0x740 <DIO_enuSetPinDirection+0x36>
     73a:	83 e0       	ldi	r24, 0x03	; 3
     73c:	89 83       	std	Y+1, r24	; 0x01
     73e:	c7 c0       	rjmp	.+398    	; 0x8ce <__stack+0x6f>
	else {
		switch(Copy_u8PortID){
     740:	8a 81       	ldd	r24, Y+2	; 0x02
     742:	28 2f       	mov	r18, r24
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	3e 83       	std	Y+6, r19	; 0x06
     748:	2d 83       	std	Y+5, r18	; 0x05
     74a:	6d 81       	ldd	r22, Y+5	; 0x05
     74c:	7e 81       	ldd	r23, Y+6	; 0x06
     74e:	61 30       	cpi	r22, 0x01	; 1
     750:	71 05       	cpc	r23, r1
     752:	09 f4       	brne	.+2      	; 0x756 <DIO_enuSetPinDirection+0x4c>
     754:	41 c0       	rjmp	.+130    	; 0x7d8 <DIO_enuSetPinDirection+0xce>
     756:	8d 81       	ldd	r24, Y+5	; 0x05
     758:	9e 81       	ldd	r25, Y+6	; 0x06
     75a:	82 30       	cpi	r24, 0x02	; 2
     75c:	91 05       	cpc	r25, r1
     75e:	34 f4       	brge	.+12     	; 0x76c <DIO_enuSetPinDirection+0x62>
     760:	2d 81       	ldd	r18, Y+5	; 0x05
     762:	3e 81       	ldd	r19, Y+6	; 0x06
     764:	21 15       	cp	r18, r1
     766:	31 05       	cpc	r19, r1
     768:	71 f0       	breq	.+28     	; 0x786 <DIO_enuSetPinDirection+0x7c>
     76a:	b0 c0       	rjmp	.+352    	; 0x8cc <__stack+0x6d>
     76c:	6d 81       	ldd	r22, Y+5	; 0x05
     76e:	7e 81       	ldd	r23, Y+6	; 0x06
     770:	62 30       	cpi	r22, 0x02	; 2
     772:	71 05       	cpc	r23, r1
     774:	09 f4       	brne	.+2      	; 0x778 <DIO_enuSetPinDirection+0x6e>
     776:	59 c0       	rjmp	.+178    	; 0x82a <DIO_enuSetPinDirection+0x120>
     778:	8d 81       	ldd	r24, Y+5	; 0x05
     77a:	9e 81       	ldd	r25, Y+6	; 0x06
     77c:	83 30       	cpi	r24, 0x03	; 3
     77e:	91 05       	cpc	r25, r1
     780:	09 f4       	brne	.+2      	; 0x784 <DIO_enuSetPinDirection+0x7a>
     782:	7c c0       	rjmp	.+248    	; 0x87c <__stack+0x1d>
     784:	a3 c0       	rjmp	.+326    	; 0x8cc <__stack+0x6d>
			case DIO_PORTA:
				DDRA &= ~(1 << Copy_u8PinID);
     786:	aa e3       	ldi	r26, 0x3A	; 58
     788:	b0 e0       	ldi	r27, 0x00	; 0
     78a:	ea e3       	ldi	r30, 0x3A	; 58
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	80 81       	ld	r24, Z
     790:	48 2f       	mov	r20, r24
     792:	8b 81       	ldd	r24, Y+3	; 0x03
     794:	28 2f       	mov	r18, r24
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <DIO_enuSetPinDirection+0x98>
     79e:	88 0f       	add	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	2a 95       	dec	r18
     7a4:	e2 f7       	brpl	.-8      	; 0x79e <DIO_enuSetPinDirection+0x94>
     7a6:	80 95       	com	r24
     7a8:	84 23       	and	r24, r20
     7aa:	8c 93       	st	X, r24
				DDRA |= (Copy_u8Value << Copy_u8PinID);
     7ac:	aa e3       	ldi	r26, 0x3A	; 58
     7ae:	b0 e0       	ldi	r27, 0x00	; 0
     7b0:	ea e3       	ldi	r30, 0x3A	; 58
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	80 81       	ld	r24, Z
     7b6:	48 2f       	mov	r20, r24
     7b8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ba:	28 2f       	mov	r18, r24
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	8b 81       	ldd	r24, Y+3	; 0x03
     7c0:	88 2f       	mov	r24, r24
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	b9 01       	movw	r22, r18
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <DIO_enuSetPinDirection+0xc2>
     7c8:	66 0f       	add	r22, r22
     7ca:	77 1f       	adc	r23, r23
     7cc:	8a 95       	dec	r24
     7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <DIO_enuSetPinDirection+0xbe>
     7d0:	cb 01       	movw	r24, r22
     7d2:	84 2b       	or	r24, r20
     7d4:	8c 93       	st	X, r24
     7d6:	7a c0       	rjmp	.+244    	; 0x8cc <__stack+0x6d>
				break;
			case DIO_PORTB:
				DDRB &= ~(1 << Copy_u8PinID);
     7d8:	a7 e3       	ldi	r26, 0x37	; 55
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	e7 e3       	ldi	r30, 0x37	; 55
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	80 81       	ld	r24, Z
     7e2:	48 2f       	mov	r20, r24
     7e4:	8b 81       	ldd	r24, Y+3	; 0x03
     7e6:	28 2f       	mov	r18, r24
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <DIO_enuSetPinDirection+0xea>
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	2a 95       	dec	r18
     7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <DIO_enuSetPinDirection+0xe6>
     7f8:	80 95       	com	r24
     7fa:	84 23       	and	r24, r20
     7fc:	8c 93       	st	X, r24
				DDRB |= (Copy_u8Value << Copy_u8PinID);
     7fe:	a7 e3       	ldi	r26, 0x37	; 55
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e7 e3       	ldi	r30, 0x37	; 55
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	80 81       	ld	r24, Z
     808:	48 2f       	mov	r20, r24
     80a:	8c 81       	ldd	r24, Y+4	; 0x04
     80c:	28 2f       	mov	r18, r24
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	8b 81       	ldd	r24, Y+3	; 0x03
     812:	88 2f       	mov	r24, r24
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	b9 01       	movw	r22, r18
     818:	02 c0       	rjmp	.+4      	; 0x81e <DIO_enuSetPinDirection+0x114>
     81a:	66 0f       	add	r22, r22
     81c:	77 1f       	adc	r23, r23
     81e:	8a 95       	dec	r24
     820:	e2 f7       	brpl	.-8      	; 0x81a <DIO_enuSetPinDirection+0x110>
     822:	cb 01       	movw	r24, r22
     824:	84 2b       	or	r24, r20
     826:	8c 93       	st	X, r24
     828:	51 c0       	rjmp	.+162    	; 0x8cc <__stack+0x6d>
				break;
			case DIO_PORTC:
				DDRC &= ~(1 << Copy_u8PinID);
     82a:	a4 e3       	ldi	r26, 0x34	; 52
     82c:	b0 e0       	ldi	r27, 0x00	; 0
     82e:	e4 e3       	ldi	r30, 0x34	; 52
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	48 2f       	mov	r20, r24
     836:	8b 81       	ldd	r24, Y+3	; 0x03
     838:	28 2f       	mov	r18, r24
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	02 c0       	rjmp	.+4      	; 0x846 <DIO_enuSetPinDirection+0x13c>
     842:	88 0f       	add	r24, r24
     844:	99 1f       	adc	r25, r25
     846:	2a 95       	dec	r18
     848:	e2 f7       	brpl	.-8      	; 0x842 <DIO_enuSetPinDirection+0x138>
     84a:	80 95       	com	r24
     84c:	84 23       	and	r24, r20
     84e:	8c 93       	st	X, r24
				DDRC |= (Copy_u8Value << Copy_u8PinID);
     850:	a4 e3       	ldi	r26, 0x34	; 52
     852:	b0 e0       	ldi	r27, 0x00	; 0
     854:	e4 e3       	ldi	r30, 0x34	; 52
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	80 81       	ld	r24, Z
     85a:	48 2f       	mov	r20, r24
     85c:	8c 81       	ldd	r24, Y+4	; 0x04
     85e:	28 2f       	mov	r18, r24
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	8b 81       	ldd	r24, Y+3	; 0x03
     864:	88 2f       	mov	r24, r24
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	b9 01       	movw	r22, r18
     86a:	02 c0       	rjmp	.+4      	; 0x870 <__stack+0x11>
     86c:	66 0f       	add	r22, r22
     86e:	77 1f       	adc	r23, r23
     870:	8a 95       	dec	r24
     872:	e2 f7       	brpl	.-8      	; 0x86c <__stack+0xd>
     874:	cb 01       	movw	r24, r22
     876:	84 2b       	or	r24, r20
     878:	8c 93       	st	X, r24
     87a:	28 c0       	rjmp	.+80     	; 0x8cc <__stack+0x6d>
				break;
			case DIO_PORTD:
				DDRD &= ~(1 << Copy_u8PinID);
     87c:	a1 e3       	ldi	r26, 0x31	; 49
     87e:	b0 e0       	ldi	r27, 0x00	; 0
     880:	e1 e3       	ldi	r30, 0x31	; 49
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	80 81       	ld	r24, Z
     886:	48 2f       	mov	r20, r24
     888:	8b 81       	ldd	r24, Y+3	; 0x03
     88a:	28 2f       	mov	r18, r24
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	02 c0       	rjmp	.+4      	; 0x898 <__stack+0x39>
     894:	88 0f       	add	r24, r24
     896:	99 1f       	adc	r25, r25
     898:	2a 95       	dec	r18
     89a:	e2 f7       	brpl	.-8      	; 0x894 <__stack+0x35>
     89c:	80 95       	com	r24
     89e:	84 23       	and	r24, r20
     8a0:	8c 93       	st	X, r24
				DDRD |= (Copy_u8Value << Copy_u8PinID);
     8a2:	a1 e3       	ldi	r26, 0x31	; 49
     8a4:	b0 e0       	ldi	r27, 0x00	; 0
     8a6:	e1 e3       	ldi	r30, 0x31	; 49
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	80 81       	ld	r24, Z
     8ac:	48 2f       	mov	r20, r24
     8ae:	8c 81       	ldd	r24, Y+4	; 0x04
     8b0:	28 2f       	mov	r18, r24
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	8b 81       	ldd	r24, Y+3	; 0x03
     8b6:	88 2f       	mov	r24, r24
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	b9 01       	movw	r22, r18
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__stack+0x63>
     8be:	66 0f       	add	r22, r22
     8c0:	77 1f       	adc	r23, r23
     8c2:	8a 95       	dec	r24
     8c4:	e2 f7       	brpl	.-8      	; 0x8be <__stack+0x5f>
     8c6:	cb 01       	movw	r24, r22
     8c8:	84 2b       	or	r24, r20
     8ca:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
     8cc:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
     8ce:	89 81       	ldd	r24, Y+1	; 0x01
}
     8d0:	26 96       	adiw	r28, 0x06	; 6
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	de bf       	out	0x3e, r29	; 62
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	cd bf       	out	0x3d, r28	; 61
     8dc:	cf 91       	pop	r28
     8de:	df 91       	pop	r29
     8e0:	08 95       	ret

000008e2 <DIO_enuSetPinValue>:

ES DIO_enuSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Value)
{
     8e2:	df 93       	push	r29
     8e4:	cf 93       	push	r28
     8e6:	00 d0       	rcall	.+0      	; 0x8e8 <DIO_enuSetPinValue+0x6>
     8e8:	00 d0       	rcall	.+0      	; 0x8ea <DIO_enuSetPinValue+0x8>
     8ea:	00 d0       	rcall	.+0      	; 0x8ec <DIO_enuSetPinValue+0xa>
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	8a 83       	std	Y+2, r24	; 0x02
     8f2:	6b 83       	std	Y+3, r22	; 0x03
     8f4:	4c 83       	std	Y+4, r20	; 0x04
	ES Local_enuErrorState = ES_NOK;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD || Copy_u8Value > OUTPUT) Local_enuErrorState = ES_OUT_OF_RANGE;
     8fa:	8a 81       	ldd	r24, Y+2	; 0x02
     8fc:	84 30       	cpi	r24, 0x04	; 4
     8fe:	18 f4       	brcc	.+6      	; 0x906 <DIO_enuSetPinValue+0x24>
     900:	8c 81       	ldd	r24, Y+4	; 0x04
     902:	82 30       	cpi	r24, 0x02	; 2
     904:	18 f0       	brcs	.+6      	; 0x90c <DIO_enuSetPinValue+0x2a>
     906:	83 e0       	ldi	r24, 0x03	; 3
     908:	89 83       	std	Y+1, r24	; 0x01
     90a:	cd c0       	rjmp	.+410    	; 0xaa6 <DIO_enuSetPinValue+0x1c4>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
     90c:	8b 81       	ldd	r24, Y+3	; 0x03
     90e:	88 30       	cpi	r24, 0x08	; 8
     910:	18 f0       	brcs	.+6      	; 0x918 <DIO_enuSetPinValue+0x36>
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	c7 c0       	rjmp	.+398    	; 0xaa6 <DIO_enuSetPinValue+0x1c4>
	else{
		switch(Copy_u8PortID){
     918:	8a 81       	ldd	r24, Y+2	; 0x02
     91a:	28 2f       	mov	r18, r24
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	3e 83       	std	Y+6, r19	; 0x06
     920:	2d 83       	std	Y+5, r18	; 0x05
     922:	6d 81       	ldd	r22, Y+5	; 0x05
     924:	7e 81       	ldd	r23, Y+6	; 0x06
     926:	61 30       	cpi	r22, 0x01	; 1
     928:	71 05       	cpc	r23, r1
     92a:	09 f4       	brne	.+2      	; 0x92e <DIO_enuSetPinValue+0x4c>
     92c:	41 c0       	rjmp	.+130    	; 0x9b0 <DIO_enuSetPinValue+0xce>
     92e:	8d 81       	ldd	r24, Y+5	; 0x05
     930:	9e 81       	ldd	r25, Y+6	; 0x06
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	91 05       	cpc	r25, r1
     936:	34 f4       	brge	.+12     	; 0x944 <DIO_enuSetPinValue+0x62>
     938:	2d 81       	ldd	r18, Y+5	; 0x05
     93a:	3e 81       	ldd	r19, Y+6	; 0x06
     93c:	21 15       	cp	r18, r1
     93e:	31 05       	cpc	r19, r1
     940:	71 f0       	breq	.+28     	; 0x95e <DIO_enuSetPinValue+0x7c>
     942:	b0 c0       	rjmp	.+352    	; 0xaa4 <DIO_enuSetPinValue+0x1c2>
     944:	6d 81       	ldd	r22, Y+5	; 0x05
     946:	7e 81       	ldd	r23, Y+6	; 0x06
     948:	62 30       	cpi	r22, 0x02	; 2
     94a:	71 05       	cpc	r23, r1
     94c:	09 f4       	brne	.+2      	; 0x950 <DIO_enuSetPinValue+0x6e>
     94e:	59 c0       	rjmp	.+178    	; 0xa02 <DIO_enuSetPinValue+0x120>
     950:	8d 81       	ldd	r24, Y+5	; 0x05
     952:	9e 81       	ldd	r25, Y+6	; 0x06
     954:	83 30       	cpi	r24, 0x03	; 3
     956:	91 05       	cpc	r25, r1
     958:	09 f4       	brne	.+2      	; 0x95c <DIO_enuSetPinValue+0x7a>
     95a:	7c c0       	rjmp	.+248    	; 0xa54 <DIO_enuSetPinValue+0x172>
     95c:	a3 c0       	rjmp	.+326    	; 0xaa4 <DIO_enuSetPinValue+0x1c2>
			case DIO_PORTA:
				PORTA &= ~(1 << Copy_u8PinID);
     95e:	ab e3       	ldi	r26, 0x3B	; 59
     960:	b0 e0       	ldi	r27, 0x00	; 0
     962:	eb e3       	ldi	r30, 0x3B	; 59
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	80 81       	ld	r24, Z
     968:	48 2f       	mov	r20, r24
     96a:	8b 81       	ldd	r24, Y+3	; 0x03
     96c:	28 2f       	mov	r18, r24
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	02 c0       	rjmp	.+4      	; 0x97a <DIO_enuSetPinValue+0x98>
     976:	88 0f       	add	r24, r24
     978:	99 1f       	adc	r25, r25
     97a:	2a 95       	dec	r18
     97c:	e2 f7       	brpl	.-8      	; 0x976 <DIO_enuSetPinValue+0x94>
     97e:	80 95       	com	r24
     980:	84 23       	and	r24, r20
     982:	8c 93       	st	X, r24
				PORTA |= (Copy_u8Value << Copy_u8PinID);
     984:	ab e3       	ldi	r26, 0x3B	; 59
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	eb e3       	ldi	r30, 0x3B	; 59
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	80 81       	ld	r24, Z
     98e:	48 2f       	mov	r20, r24
     990:	8c 81       	ldd	r24, Y+4	; 0x04
     992:	28 2f       	mov	r18, r24
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	8b 81       	ldd	r24, Y+3	; 0x03
     998:	88 2f       	mov	r24, r24
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	b9 01       	movw	r22, r18
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <DIO_enuSetPinValue+0xc2>
     9a0:	66 0f       	add	r22, r22
     9a2:	77 1f       	adc	r23, r23
     9a4:	8a 95       	dec	r24
     9a6:	e2 f7       	brpl	.-8      	; 0x9a0 <DIO_enuSetPinValue+0xbe>
     9a8:	cb 01       	movw	r24, r22
     9aa:	84 2b       	or	r24, r20
     9ac:	8c 93       	st	X, r24
     9ae:	7a c0       	rjmp	.+244    	; 0xaa4 <DIO_enuSetPinValue+0x1c2>
				break;
			case DIO_PORTB:
				PORTB &= ~(1 << Copy_u8PinID);
     9b0:	a8 e3       	ldi	r26, 0x38	; 56
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	e8 e3       	ldi	r30, 0x38	; 56
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	80 81       	ld	r24, Z
     9ba:	48 2f       	mov	r20, r24
     9bc:	8b 81       	ldd	r24, Y+3	; 0x03
     9be:	28 2f       	mov	r18, r24
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <DIO_enuSetPinValue+0xea>
     9c8:	88 0f       	add	r24, r24
     9ca:	99 1f       	adc	r25, r25
     9cc:	2a 95       	dec	r18
     9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <DIO_enuSetPinValue+0xe6>
     9d0:	80 95       	com	r24
     9d2:	84 23       	and	r24, r20
     9d4:	8c 93       	st	X, r24
				PORTB |= (Copy_u8Value << Copy_u8PinID);
     9d6:	a8 e3       	ldi	r26, 0x38	; 56
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	e8 e3       	ldi	r30, 0x38	; 56
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	48 2f       	mov	r20, r24
     9e2:	8c 81       	ldd	r24, Y+4	; 0x04
     9e4:	28 2f       	mov	r18, r24
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ea:	88 2f       	mov	r24, r24
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	b9 01       	movw	r22, r18
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <DIO_enuSetPinValue+0x114>
     9f2:	66 0f       	add	r22, r22
     9f4:	77 1f       	adc	r23, r23
     9f6:	8a 95       	dec	r24
     9f8:	e2 f7       	brpl	.-8      	; 0x9f2 <DIO_enuSetPinValue+0x110>
     9fa:	cb 01       	movw	r24, r22
     9fc:	84 2b       	or	r24, r20
     9fe:	8c 93       	st	X, r24
     a00:	51 c0       	rjmp	.+162    	; 0xaa4 <DIO_enuSetPinValue+0x1c2>
				break;
			case DIO_PORTC:
				PORTC &= ~(1 << Copy_u8PinID);
     a02:	a5 e3       	ldi	r26, 0x35	; 53
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	e5 e3       	ldi	r30, 0x35	; 53
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	80 81       	ld	r24, Z
     a0c:	48 2f       	mov	r20, r24
     a0e:	8b 81       	ldd	r24, Y+3	; 0x03
     a10:	28 2f       	mov	r18, r24
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <DIO_enuSetPinValue+0x13c>
     a1a:	88 0f       	add	r24, r24
     a1c:	99 1f       	adc	r25, r25
     a1e:	2a 95       	dec	r18
     a20:	e2 f7       	brpl	.-8      	; 0xa1a <DIO_enuSetPinValue+0x138>
     a22:	80 95       	com	r24
     a24:	84 23       	and	r24, r20
     a26:	8c 93       	st	X, r24
				PORTC |= (Copy_u8Value << Copy_u8PinID);
     a28:	a5 e3       	ldi	r26, 0x35	; 53
     a2a:	b0 e0       	ldi	r27, 0x00	; 0
     a2c:	e5 e3       	ldi	r30, 0x35	; 53
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	80 81       	ld	r24, Z
     a32:	48 2f       	mov	r20, r24
     a34:	8c 81       	ldd	r24, Y+4	; 0x04
     a36:	28 2f       	mov	r18, r24
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	8b 81       	ldd	r24, Y+3	; 0x03
     a3c:	88 2f       	mov	r24, r24
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	b9 01       	movw	r22, r18
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <DIO_enuSetPinValue+0x166>
     a44:	66 0f       	add	r22, r22
     a46:	77 1f       	adc	r23, r23
     a48:	8a 95       	dec	r24
     a4a:	e2 f7       	brpl	.-8      	; 0xa44 <DIO_enuSetPinValue+0x162>
     a4c:	cb 01       	movw	r24, r22
     a4e:	84 2b       	or	r24, r20
     a50:	8c 93       	st	X, r24
     a52:	28 c0       	rjmp	.+80     	; 0xaa4 <DIO_enuSetPinValue+0x1c2>
				break;
			case DIO_PORTD:
				PORTD &= ~(1 << Copy_u8PinID);
     a54:	a2 e3       	ldi	r26, 0x32	; 50
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	e2 e3       	ldi	r30, 0x32	; 50
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	80 81       	ld	r24, Z
     a5e:	48 2f       	mov	r20, r24
     a60:	8b 81       	ldd	r24, Y+3	; 0x03
     a62:	28 2f       	mov	r18, r24
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <DIO_enuSetPinValue+0x18e>
     a6c:	88 0f       	add	r24, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	2a 95       	dec	r18
     a72:	e2 f7       	brpl	.-8      	; 0xa6c <DIO_enuSetPinValue+0x18a>
     a74:	80 95       	com	r24
     a76:	84 23       	and	r24, r20
     a78:	8c 93       	st	X, r24
				PORTD |= (Copy_u8Value << Copy_u8PinID);
     a7a:	a2 e3       	ldi	r26, 0x32	; 50
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	e2 e3       	ldi	r30, 0x32	; 50
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	80 81       	ld	r24, Z
     a84:	48 2f       	mov	r20, r24
     a86:	8c 81       	ldd	r24, Y+4	; 0x04
     a88:	28 2f       	mov	r18, r24
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	8b 81       	ldd	r24, Y+3	; 0x03
     a8e:	88 2f       	mov	r24, r24
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	b9 01       	movw	r22, r18
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <DIO_enuSetPinValue+0x1b8>
     a96:	66 0f       	add	r22, r22
     a98:	77 1f       	adc	r23, r23
     a9a:	8a 95       	dec	r24
     a9c:	e2 f7       	brpl	.-8      	; 0xa96 <DIO_enuSetPinValue+0x1b4>
     a9e:	cb 01       	movw	r24, r22
     aa0:	84 2b       	or	r24, r20
     aa2:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
     aa4:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
}
     aa8:	26 96       	adiw	r28, 0x06	; 6
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	cf 91       	pop	r28
     ab6:	df 91       	pop	r29
     ab8:	08 95       	ret

00000aba <DIO_enuGetpin>:

ES DIO_enuGetpin(u8 Copy_u8PortID,u8 Copy_u8PinID, u8* Copy_pu8Value)
{
     aba:	df 93       	push	r29
     abc:	cf 93       	push	r28
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62
     ac2:	27 97       	sbiw	r28, 0x07	; 7
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	f8 94       	cli
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	cd bf       	out	0x3d, r28	; 61
     ace:	8a 83       	std	Y+2, r24	; 0x02
     ad0:	6b 83       	std	Y+3, r22	; 0x03
     ad2:	5d 83       	std	Y+5, r21	; 0x05
     ad4:	4c 83       	std	Y+4, r20	; 0x04
	ES Local_enuErrorState = ES_NOK;
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
     ada:	8a 81       	ldd	r24, Y+2	; 0x02
     adc:	84 30       	cpi	r24, 0x04	; 4
     ade:	18 f0       	brcs	.+6      	; 0xae6 <DIO_enuGetpin+0x2c>
     ae0:	83 e0       	ldi	r24, 0x03	; 3
     ae2:	89 83       	std	Y+1, r24	; 0x01
     ae4:	7e c0       	rjmp	.+252    	; 0xbe2 <DIO_enuGetpin+0x128>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
     ae6:	8b 81       	ldd	r24, Y+3	; 0x03
     ae8:	88 30       	cpi	r24, 0x08	; 8
     aea:	18 f0       	brcs	.+6      	; 0xaf2 <DIO_enuGetpin+0x38>
     aec:	83 e0       	ldi	r24, 0x03	; 3
     aee:	89 83       	std	Y+1, r24	; 0x01
     af0:	78 c0       	rjmp	.+240    	; 0xbe2 <DIO_enuGetpin+0x128>
	else if(Copy_pu8Value == NULL)Local_enuErrorState = ES_NULL_POINTER;
     af2:	8c 81       	ldd	r24, Y+4	; 0x04
     af4:	9d 81       	ldd	r25, Y+5	; 0x05
     af6:	00 97       	sbiw	r24, 0x00	; 0
     af8:	19 f4       	brne	.+6      	; 0xb00 <DIO_enuGetpin+0x46>
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	89 83       	std	Y+1, r24	; 0x01
     afe:	71 c0       	rjmp	.+226    	; 0xbe2 <DIO_enuGetpin+0x128>
	else{
		switch(Copy_u8PortID){
     b00:	8a 81       	ldd	r24, Y+2	; 0x02
     b02:	28 2f       	mov	r18, r24
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	3f 83       	std	Y+7, r19	; 0x07
     b08:	2e 83       	std	Y+6, r18	; 0x06
     b0a:	4e 81       	ldd	r20, Y+6	; 0x06
     b0c:	5f 81       	ldd	r21, Y+7	; 0x07
     b0e:	41 30       	cpi	r20, 0x01	; 1
     b10:	51 05       	cpc	r21, r1
     b12:	59 f1       	breq	.+86     	; 0xb6a <DIO_enuGetpin+0xb0>
     b14:	8e 81       	ldd	r24, Y+6	; 0x06
     b16:	9f 81       	ldd	r25, Y+7	; 0x07
     b18:	82 30       	cpi	r24, 0x02	; 2
     b1a:	91 05       	cpc	r25, r1
     b1c:	34 f4       	brge	.+12     	; 0xb2a <DIO_enuGetpin+0x70>
     b1e:	2e 81       	ldd	r18, Y+6	; 0x06
     b20:	3f 81       	ldd	r19, Y+7	; 0x07
     b22:	21 15       	cp	r18, r1
     b24:	31 05       	cpc	r19, r1
     b26:	69 f0       	breq	.+26     	; 0xb42 <DIO_enuGetpin+0x88>
     b28:	5b c0       	rjmp	.+182    	; 0xbe0 <DIO_enuGetpin+0x126>
     b2a:	4e 81       	ldd	r20, Y+6	; 0x06
     b2c:	5f 81       	ldd	r21, Y+7	; 0x07
     b2e:	42 30       	cpi	r20, 0x02	; 2
     b30:	51 05       	cpc	r21, r1
     b32:	79 f1       	breq	.+94     	; 0xb92 <DIO_enuGetpin+0xd8>
     b34:	8e 81       	ldd	r24, Y+6	; 0x06
     b36:	9f 81       	ldd	r25, Y+7	; 0x07
     b38:	83 30       	cpi	r24, 0x03	; 3
     b3a:	91 05       	cpc	r25, r1
     b3c:	09 f4       	brne	.+2      	; 0xb40 <DIO_enuGetpin+0x86>
     b3e:	3d c0       	rjmp	.+122    	; 0xbba <DIO_enuGetpin+0x100>
     b40:	4f c0       	rjmp	.+158    	; 0xbe0 <DIO_enuGetpin+0x126>
			case DIO_PORTA:
				*Copy_pu8Value = getBit(PINA,Copy_u8PinID);
     b42:	e9 e3       	ldi	r30, 0x39	; 57
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	28 2f       	mov	r18, r24
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	8b 81       	ldd	r24, Y+3	; 0x03
     b4e:	88 2f       	mov	r24, r24
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	a9 01       	movw	r20, r18
     b54:	02 c0       	rjmp	.+4      	; 0xb5a <DIO_enuGetpin+0xa0>
     b56:	55 95       	asr	r21
     b58:	47 95       	ror	r20
     b5a:	8a 95       	dec	r24
     b5c:	e2 f7       	brpl	.-8      	; 0xb56 <DIO_enuGetpin+0x9c>
     b5e:	ca 01       	movw	r24, r20
     b60:	81 70       	andi	r24, 0x01	; 1
     b62:	ec 81       	ldd	r30, Y+4	; 0x04
     b64:	fd 81       	ldd	r31, Y+5	; 0x05
     b66:	80 83       	st	Z, r24
     b68:	3b c0       	rjmp	.+118    	; 0xbe0 <DIO_enuGetpin+0x126>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = getBit(PINB,Copy_u8PinID);
     b6a:	e6 e3       	ldi	r30, 0x36	; 54
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	28 2f       	mov	r18, r24
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	88 2f       	mov	r24, r24
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	a9 01       	movw	r20, r18
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <DIO_enuGetpin+0xc8>
     b7e:	55 95       	asr	r21
     b80:	47 95       	ror	r20
     b82:	8a 95       	dec	r24
     b84:	e2 f7       	brpl	.-8      	; 0xb7e <DIO_enuGetpin+0xc4>
     b86:	ca 01       	movw	r24, r20
     b88:	81 70       	andi	r24, 0x01	; 1
     b8a:	ec 81       	ldd	r30, Y+4	; 0x04
     b8c:	fd 81       	ldd	r31, Y+5	; 0x05
     b8e:	80 83       	st	Z, r24
     b90:	27 c0       	rjmp	.+78     	; 0xbe0 <DIO_enuGetpin+0x126>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = getBit(PINC,Copy_u8PinID);
     b92:	e3 e3       	ldi	r30, 0x33	; 51
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	28 2f       	mov	r18, r24
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	a9 01       	movw	r20, r18
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <DIO_enuGetpin+0xf0>
     ba6:	55 95       	asr	r21
     ba8:	47 95       	ror	r20
     baa:	8a 95       	dec	r24
     bac:	e2 f7       	brpl	.-8      	; 0xba6 <DIO_enuGetpin+0xec>
     bae:	ca 01       	movw	r24, r20
     bb0:	81 70       	andi	r24, 0x01	; 1
     bb2:	ec 81       	ldd	r30, Y+4	; 0x04
     bb4:	fd 81       	ldd	r31, Y+5	; 0x05
     bb6:	80 83       	st	Z, r24
     bb8:	13 c0       	rjmp	.+38     	; 0xbe0 <DIO_enuGetpin+0x126>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = getBit(PIND,Copy_u8PinID);
     bba:	e0 e3       	ldi	r30, 0x30	; 48
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	88 2f       	mov	r24, r24
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	a9 01       	movw	r20, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <DIO_enuGetpin+0x118>
     bce:	55 95       	asr	r21
     bd0:	47 95       	ror	r20
     bd2:	8a 95       	dec	r24
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <DIO_enuGetpin+0x114>
     bd6:	ca 01       	movw	r24, r20
     bd8:	81 70       	andi	r24, 0x01	; 1
     bda:	ec 81       	ldd	r30, Y+4	; 0x04
     bdc:	fd 81       	ldd	r31, Y+5	; 0x05
     bde:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
     be0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enuErrorState;
     be2:	89 81       	ldd	r24, Y+1	; 0x01
}
     be4:	27 96       	adiw	r28, 0x07	; 7
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	08 95       	ret

00000bf6 <DIO_enuTogPin>:

ES DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <DIO_enuTogPin+0x6>
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <DIO_enuTogPin+0x8>
     bfe:	0f 92       	push	r0
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	8a 83       	std	Y+2, r24	; 0x02
     c06:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
     c0c:	8a 81       	ldd	r24, Y+2	; 0x02
     c0e:	84 30       	cpi	r24, 0x04	; 4
     c10:	18 f0       	brcs	.+6      	; 0xc18 <DIO_enuTogPin+0x22>
     c12:	83 e0       	ldi	r24, 0x03	; 3
     c14:	89 83       	std	Y+1, r24	; 0x01
     c16:	75 c0       	rjmp	.+234    	; 0xd02 <DIO_enuTogPin+0x10c>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	88 30       	cpi	r24, 0x08	; 8
     c1c:	18 f0       	brcs	.+6      	; 0xc24 <DIO_enuTogPin+0x2e>
     c1e:	83 e0       	ldi	r24, 0x03	; 3
     c20:	89 83       	std	Y+1, r24	; 0x01
     c22:	6f c0       	rjmp	.+222    	; 0xd02 <DIO_enuTogPin+0x10c>
	else{
		switch(Copy_u8PortID){
     c24:	8a 81       	ldd	r24, Y+2	; 0x02
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	3d 83       	std	Y+5, r19	; 0x05
     c2c:	2c 83       	std	Y+4, r18	; 0x04
     c2e:	8c 81       	ldd	r24, Y+4	; 0x04
     c30:	9d 81       	ldd	r25, Y+5	; 0x05
     c32:	81 30       	cpi	r24, 0x01	; 1
     c34:	91 05       	cpc	r25, r1
     c36:	49 f1       	breq	.+82     	; 0xc8a <DIO_enuTogPin+0x94>
     c38:	2c 81       	ldd	r18, Y+4	; 0x04
     c3a:	3d 81       	ldd	r19, Y+5	; 0x05
     c3c:	22 30       	cpi	r18, 0x02	; 2
     c3e:	31 05       	cpc	r19, r1
     c40:	2c f4       	brge	.+10     	; 0xc4c <DIO_enuTogPin+0x56>
     c42:	8c 81       	ldd	r24, Y+4	; 0x04
     c44:	9d 81       	ldd	r25, Y+5	; 0x05
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	61 f0       	breq	.+24     	; 0xc62 <DIO_enuTogPin+0x6c>
     c4a:	5a c0       	rjmp	.+180    	; 0xd00 <DIO_enuTogPin+0x10a>
     c4c:	2c 81       	ldd	r18, Y+4	; 0x04
     c4e:	3d 81       	ldd	r19, Y+5	; 0x05
     c50:	22 30       	cpi	r18, 0x02	; 2
     c52:	31 05       	cpc	r19, r1
     c54:	71 f1       	breq	.+92     	; 0xcb2 <DIO_enuTogPin+0xbc>
     c56:	8c 81       	ldd	r24, Y+4	; 0x04
     c58:	9d 81       	ldd	r25, Y+5	; 0x05
     c5a:	83 30       	cpi	r24, 0x03	; 3
     c5c:	91 05       	cpc	r25, r1
     c5e:	e9 f1       	breq	.+122    	; 0xcda <DIO_enuTogPin+0xe4>
     c60:	4f c0       	rjmp	.+158    	; 0xd00 <DIO_enuTogPin+0x10a>
			case DIO_PORTA:
				PORTA ^= (1 << Copy_u8PinID);
     c62:	ab e3       	ldi	r26, 0x3B	; 59
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	eb e3       	ldi	r30, 0x3B	; 59
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	48 2f       	mov	r20, r24
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 2e       	mov	r0, r18
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <DIO_enuTogPin+0x8a>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	0a 94       	dec	r0
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <DIO_enuTogPin+0x86>
     c84:	84 27       	eor	r24, r20
     c86:	8c 93       	st	X, r24
     c88:	3b c0       	rjmp	.+118    	; 0xd00 <DIO_enuTogPin+0x10a>
				break;
			case DIO_PORTB:
				PORTB ^= (1 << Copy_u8PinID);
     c8a:	a8 e3       	ldi	r26, 0x38	; 56
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 e3       	ldi	r30, 0x38	; 56
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	48 2f       	mov	r20, r24
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	02 2e       	mov	r0, r18
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <DIO_enuTogPin+0xb2>
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	0a 94       	dec	r0
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <DIO_enuTogPin+0xae>
     cac:	84 27       	eor	r24, r20
     cae:	8c 93       	st	X, r24
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <DIO_enuTogPin+0x10a>
				break;
			case DIO_PORTC:
				PORTC ^= (1 << Copy_u8PinID);
     cb2:	a5 e3       	ldi	r26, 0x35	; 53
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e5 e3       	ldi	r30, 0x35	; 53
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	48 2f       	mov	r20, r24
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	28 2f       	mov	r18, r24
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	02 2e       	mov	r0, r18
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <DIO_enuTogPin+0xda>
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	0a 94       	dec	r0
     cd2:	e2 f7       	brpl	.-8      	; 0xccc <DIO_enuTogPin+0xd6>
     cd4:	84 27       	eor	r24, r20
     cd6:	8c 93       	st	X, r24
     cd8:	13 c0       	rjmp	.+38     	; 0xd00 <DIO_enuTogPin+0x10a>
				break;
			case DIO_PORTD:
				PORTD ^= (1 << Copy_u8PinID);
     cda:	a2 e3       	ldi	r26, 0x32	; 50
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e2 e3       	ldi	r30, 0x32	; 50
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	48 2f       	mov	r20, r24
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	02 2e       	mov	r0, r18
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <DIO_enuTogPin+0x102>
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	0a 94       	dec	r0
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <DIO_enuTogPin+0xfe>
     cfc:	84 27       	eor	r24, r20
     cfe:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
     d00:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
     d02:	89 81       	ldd	r24, Y+1	; 0x01

}
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	08 95       	ret

00000d14 <EXTI_enuInit>:
static volatile void (*EXTI_ApfunINTFun  [3]  )(void*) = {NULL,NULL,NULL};

static volatile void * EXTI_ApvidGenericparameter[3] = {NULL,NULL,NULL};

ES EXTI_enuInit (EXTI_t * Copy_pstrEXTIConfig)
{
     d14:	df 93       	push	r29
     d16:	cf 93       	push	r28
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	2c 97       	sbiw	r28, 0x0c	; 12
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	9c 83       	std	Y+4, r25	; 0x04
     d2a:	8b 83       	std	Y+3, r24	; 0x03
	ES Local_enuErrorState = ES_NOK;
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_pstrEXTIConfig != NULL)
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	9c 81       	ldd	r25, Y+4	; 0x04
     d34:	00 97       	sbiw	r24, 0x00	; 0
     d36:	09 f4       	brne	.+2      	; 0xd3a <EXTI_enuInit+0x26>
     d38:	0d c1       	rjmp	.+538    	; 0xf54 <EXTI_enuInit+0x240>
	{
		u8 Local_u8Iter=0;
     d3a:	19 82       	std	Y+1, r1	; 0x01
		for (Local_u8Iter =0; Local_u8Iter < 3 ; Local_u8Iter++)
     d3c:	19 82       	std	Y+1, r1	; 0x01
     d3e:	05 c1       	rjmp	.+522    	; 0xf4a <EXTI_enuInit+0x236>
		{
			if (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8State == ACTIVE)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	88 2f       	mov	r24, r24
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	9c 01       	movw	r18, r24
     d48:	22 0f       	add	r18, r18
     d4a:	33 1f       	adc	r19, r19
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	9c 81       	ldd	r25, Y+4	; 0x04
     d50:	fc 01       	movw	r30, r24
     d52:	e2 0f       	add	r30, r18
     d54:	f3 1f       	adc	r31, r19
     d56:	80 81       	ld	r24, Z
     d58:	85 30       	cpi	r24, 0x05	; 5
     d5a:	09 f0       	breq	.+2      	; 0xd5e <EXTI_enuInit+0x4a>
     d5c:	f3 c0       	rjmp	.+486    	; 0xf44 <EXTI_enuInit+0x230>
			{
				switch(Local_u8Iter)
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	3c 87       	std	Y+12, r19	; 0x0c
     d66:	2b 87       	std	Y+11, r18	; 0x0b
     d68:	8b 85       	ldd	r24, Y+11	; 0x0b
     d6a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	91 05       	cpc	r25, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <EXTI_enuInit+0x60>
     d72:	60 c0       	rjmp	.+192    	; 0xe34 <EXTI_enuInit+0x120>
     d74:	2b 85       	ldd	r18, Y+11	; 0x0b
     d76:	3c 85       	ldd	r19, Y+12	; 0x0c
     d78:	22 30       	cpi	r18, 0x02	; 2
     d7a:	31 05       	cpc	r19, r1
     d7c:	09 f4       	brne	.+2      	; 0xd80 <EXTI_enuInit+0x6c>
     d7e:	af c0       	rjmp	.+350    	; 0xede <EXTI_enuInit+0x1ca>
     d80:	8b 85       	ldd	r24, Y+11	; 0x0b
     d82:	9c 85       	ldd	r25, Y+12	; 0x0c
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	09 f0       	breq	.+2      	; 0xd8a <EXTI_enuInit+0x76>
     d88:	dd c0       	rjmp	.+442    	; 0xf44 <EXTI_enuInit+0x230>
				{
				case 0:
					MCUCR &=~ (3<<0);
     d8a:	a5 e5       	ldi	r26, 0x55	; 85
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e5 e5       	ldi	r30, 0x55	; 85
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	8c 7f       	andi	r24, 0xFC	; 252
     d96:	8c 93       	st	X, r24
					GICR |= (1<<6);
     d98:	ab e5       	ldi	r26, 0x5B	; 91
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	eb e5       	ldi	r30, 0x5B	; 91
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	80 64       	ori	r24, 0x40	; 64
     da4:	8c 93       	st	X, r24
					switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	88 2f       	mov	r24, r24
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	9c 01       	movw	r18, r24
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	9c 81       	ldd	r25, Y+4	; 0x04
     db6:	fc 01       	movw	r30, r24
     db8:	e2 0f       	add	r30, r18
     dba:	f3 1f       	adc	r31, r19
     dbc:	81 81       	ldd	r24, Z+1	; 0x01
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	3a 87       	std	Y+10, r19	; 0x0a
     dc4:	29 87       	std	Y+9, r18	; 0x09
     dc6:	89 85       	ldd	r24, Y+9	; 0x09
     dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dca:	89 30       	cpi	r24, 0x09	; 9
     dcc:	91 05       	cpc	r25, r1
     dce:	f9 f0       	breq	.+62     	; 0xe0e <EXTI_enuInit+0xfa>
     dd0:	29 85       	ldd	r18, Y+9	; 0x09
     dd2:	3a 85       	ldd	r19, Y+10	; 0x0a
     dd4:	2a 30       	cpi	r18, 0x0A	; 10
     dd6:	31 05       	cpc	r19, r1
     dd8:	34 f4       	brge	.+12     	; 0xde6 <EXTI_enuInit+0xd2>
     dda:	89 85       	ldd	r24, Y+9	; 0x09
     ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dde:	85 30       	cpi	r24, 0x05	; 5
     de0:	91 05       	cpc	r25, r1
     de2:	69 f0       	breq	.+26     	; 0xdfe <EXTI_enuInit+0xea>
     de4:	24 c0       	rjmp	.+72     	; 0xe2e <EXTI_enuInit+0x11a>
     de6:	29 85       	ldd	r18, Y+9	; 0x09
     de8:	3a 85       	ldd	r19, Y+10	; 0x0a
     dea:	23 31       	cpi	r18, 0x13	; 19
     dec:	31 05       	cpc	r19, r1
     dee:	b9 f0       	breq	.+46     	; 0xe1e <EXTI_enuInit+0x10a>
     df0:	89 85       	ldd	r24, Y+9	; 0x09
     df2:	9a 85       	ldd	r25, Y+10	; 0x0a
     df4:	8d 35       	cpi	r24, 0x5D	; 93
     df6:	91 05       	cpc	r25, r1
     df8:	09 f4       	brne	.+2      	; 0xdfc <EXTI_enuInit+0xe8>
     dfa:	a4 c0       	rjmp	.+328    	; 0xf44 <EXTI_enuInit+0x230>
     dfc:	18 c0       	rjmp	.+48     	; 0xe2e <EXTI_enuInit+0x11a>
					{
					case RISING_EDGE:
						MCUCR |= (3<<0);
     dfe:	a5 e5       	ldi	r26, 0x55	; 85
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e5 e5       	ldi	r30, 0x55	; 85
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	83 60       	ori	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	9b c0       	rjmp	.+310    	; 0xf44 <EXTI_enuInit+0x230>
						break;
					case FALLING_EDGE:
						MCUCR |= (1<<1);
     e0e:	a5 e5       	ldi	r26, 0x55	; 85
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e5 e5       	ldi	r30, 0x55	; 85
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	82 60       	ori	r24, 0x02	; 2
     e1a:	8c 93       	st	X, r24
     e1c:	93 c0       	rjmp	.+294    	; 0xf44 <EXTI_enuInit+0x230>
						break;
					case ANY_LOGIC:
						MCUCR |= (1<<0);
     e1e:	a5 e5       	ldi	r26, 0x55	; 85
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e5 e5       	ldi	r30, 0x55	; 85
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	81 60       	ori	r24, 0x01	; 1
     e2a:	8c 93       	st	X, r24
     e2c:	8b c0       	rjmp	.+278    	; 0xf44 <EXTI_enuInit+0x230>
						break;
					case LOW_LEVEL:
						break;
					default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
     e2e:	83 e0       	ldi	r24, 0x03	; 3
     e30:	8a 83       	std	Y+2, r24	; 0x02
     e32:	88 c0       	rjmp	.+272    	; 0xf44 <EXTI_enuInit+0x230>
					}
					break;


					case 1:
						MCUCR &=~ (3<<2);
     e34:	a5 e5       	ldi	r26, 0x55	; 85
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e5 e5       	ldi	r30, 0x55	; 85
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	83 7f       	andi	r24, 0xF3	; 243
     e40:	8c 93       	st	X, r24
						GICR |= (1<<7);
     e42:	ab e5       	ldi	r26, 0x5B	; 91
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	eb e5       	ldi	r30, 0x5B	; 91
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	80 68       	ori	r24, 0x80	; 128
     e4e:	8c 93       	st	X, r24
						switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	9c 01       	movw	r18, r24
     e58:	22 0f       	add	r18, r18
     e5a:	33 1f       	adc	r19, r19
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	9c 81       	ldd	r25, Y+4	; 0x04
     e60:	fc 01       	movw	r30, r24
     e62:	e2 0f       	add	r30, r18
     e64:	f3 1f       	adc	r31, r19
     e66:	81 81       	ldd	r24, Z+1	; 0x01
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	38 87       	std	Y+8, r19	; 0x08
     e6e:	2f 83       	std	Y+7, r18	; 0x07
     e70:	8f 81       	ldd	r24, Y+7	; 0x07
     e72:	98 85       	ldd	r25, Y+8	; 0x08
     e74:	89 30       	cpi	r24, 0x09	; 9
     e76:	91 05       	cpc	r25, r1
     e78:	f9 f0       	breq	.+62     	; 0xeb8 <EXTI_enuInit+0x1a4>
     e7a:	2f 81       	ldd	r18, Y+7	; 0x07
     e7c:	38 85       	ldd	r19, Y+8	; 0x08
     e7e:	2a 30       	cpi	r18, 0x0A	; 10
     e80:	31 05       	cpc	r19, r1
     e82:	34 f4       	brge	.+12     	; 0xe90 <EXTI_enuInit+0x17c>
     e84:	8f 81       	ldd	r24, Y+7	; 0x07
     e86:	98 85       	ldd	r25, Y+8	; 0x08
     e88:	85 30       	cpi	r24, 0x05	; 5
     e8a:	91 05       	cpc	r25, r1
     e8c:	69 f0       	breq	.+26     	; 0xea8 <EXTI_enuInit+0x194>
     e8e:	24 c0       	rjmp	.+72     	; 0xed8 <EXTI_enuInit+0x1c4>
     e90:	2f 81       	ldd	r18, Y+7	; 0x07
     e92:	38 85       	ldd	r19, Y+8	; 0x08
     e94:	23 31       	cpi	r18, 0x13	; 19
     e96:	31 05       	cpc	r19, r1
     e98:	b9 f0       	breq	.+46     	; 0xec8 <EXTI_enuInit+0x1b4>
     e9a:	8f 81       	ldd	r24, Y+7	; 0x07
     e9c:	98 85       	ldd	r25, Y+8	; 0x08
     e9e:	8d 35       	cpi	r24, 0x5D	; 93
     ea0:	91 05       	cpc	r25, r1
     ea2:	09 f4       	brne	.+2      	; 0xea6 <EXTI_enuInit+0x192>
     ea4:	4f c0       	rjmp	.+158    	; 0xf44 <EXTI_enuInit+0x230>
     ea6:	18 c0       	rjmp	.+48     	; 0xed8 <EXTI_enuInit+0x1c4>
						{
						case RISING_EDGE:
							MCUCR |= (3<<2);
     ea8:	a5 e5       	ldi	r26, 0x55	; 85
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e5 e5       	ldi	r30, 0x55	; 85
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	8c 60       	ori	r24, 0x0C	; 12
     eb4:	8c 93       	st	X, r24
     eb6:	46 c0       	rjmp	.+140    	; 0xf44 <EXTI_enuInit+0x230>
							break;
						case FALLING_EDGE:
							MCUCR |= (1<<3);
     eb8:	a5 e5       	ldi	r26, 0x55	; 85
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e5 e5       	ldi	r30, 0x55	; 85
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	88 60       	ori	r24, 0x08	; 8
     ec4:	8c 93       	st	X, r24
     ec6:	3e c0       	rjmp	.+124    	; 0xf44 <EXTI_enuInit+0x230>
							break;
						case ANY_LOGIC:
							MCUCR |= (1<<2);
     ec8:	a5 e5       	ldi	r26, 0x55	; 85
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e5 e5       	ldi	r30, 0x55	; 85
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	84 60       	ori	r24, 0x04	; 4
     ed4:	8c 93       	st	X, r24
     ed6:	36 c0       	rjmp	.+108    	; 0xf44 <EXTI_enuInit+0x230>
							break;
						case LOW_LEVEL:
							break;
						default:
							Local_enuErrorState = ES_OUT_OF_RANGE;
     ed8:	83 e0       	ldi	r24, 0x03	; 3
     eda:	8a 83       	std	Y+2, r24	; 0x02
     edc:	33 c0       	rjmp	.+102    	; 0xf44 <EXTI_enuInit+0x230>
						}

						break;
						case 2:
							MCUCSR &=~(1<<6);
     ede:	a4 e5       	ldi	r26, 0x54	; 84
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e4 e5       	ldi	r30, 0x54	; 84
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8f 7b       	andi	r24, 0xBF	; 191
     eea:	8c 93       	st	X, r24
							GICR |= (1<<5);
     eec:	ab e5       	ldi	r26, 0x5B	; 91
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	eb e5       	ldi	r30, 0x5B	; 91
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	80 62       	ori	r24, 0x20	; 32
     ef8:	8c 93       	st	X, r24
							switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	9c 01       	movw	r18, r24
     f02:	22 0f       	add	r18, r18
     f04:	33 1f       	adc	r19, r19
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	9c 81       	ldd	r25, Y+4	; 0x04
     f0a:	fc 01       	movw	r30, r24
     f0c:	e2 0f       	add	r30, r18
     f0e:	f3 1f       	adc	r31, r19
     f10:	81 81       	ldd	r24, Z+1	; 0x01
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	3e 83       	std	Y+6, r19	; 0x06
     f18:	2d 83       	std	Y+5, r18	; 0x05
     f1a:	8d 81       	ldd	r24, Y+5	; 0x05
     f1c:	9e 81       	ldd	r25, Y+6	; 0x06
     f1e:	85 30       	cpi	r24, 0x05	; 5
     f20:	91 05       	cpc	r25, r1
     f22:	31 f0       	breq	.+12     	; 0xf30 <EXTI_enuInit+0x21c>
     f24:	2d 81       	ldd	r18, Y+5	; 0x05
     f26:	3e 81       	ldd	r19, Y+6	; 0x06
     f28:	29 30       	cpi	r18, 0x09	; 9
     f2a:	31 05       	cpc	r19, r1
     f2c:	59 f0       	breq	.+22     	; 0xf44 <EXTI_enuInit+0x230>
     f2e:	08 c0       	rjmp	.+16     	; 0xf40 <EXTI_enuInit+0x22c>
							{
							case RISING_EDGE:
								MCUCSR |= (1<<6);
     f30:	a4 e5       	ldi	r26, 0x54	; 84
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e4 e5       	ldi	r30, 0x54	; 84
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	80 64       	ori	r24, 0x40	; 64
     f3c:	8c 93       	st	X, r24
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <EXTI_enuInit+0x230>
								break;
							case FALLING_EDGE:
								break;
							default:
								Local_enuErrorState = ES_OUT_OF_RANGE;
     f40:	83 e0       	ldi	r24, 0x03	; 3
     f42:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;

	if(Copy_pstrEXTIConfig != NULL)
	{
		u8 Local_u8Iter=0;
		for (Local_u8Iter =0; Local_u8Iter < 3 ; Local_u8Iter++)
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	8f 5f       	subi	r24, 0xFF	; 255
     f48:	89 83       	std	Y+1, r24	; 0x01
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	08 f4       	brcc	.+2      	; 0xf52 <EXTI_enuInit+0x23e>
     f50:	f7 ce       	rjmp	.-530    	; 0xd40 <EXTI_enuInit+0x2c>
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <EXTI_enuInit+0x244>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f5a:	2c 96       	adiw	r28, 0x0c	; 12
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <EXTI_enuSetSenceMode>:

ES EXTI_enuSetSenceMode(u8 Copy_u8EXTI_ID , u8 Copy_u8SenseLevel)
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	29 97       	sbiw	r28, 0x09	; 9
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	8a 83       	std	Y+2, r24	; 0x02
     f82:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8EXTI_ID < 3)
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	83 30       	cpi	r24, 0x03	; 3
     f8c:	08 f0       	brcs	.+2      	; 0xf90 <EXTI_enuSetSenceMode+0x24>
     f8e:	b2 c0       	rjmp	.+356    	; 0x10f4 <EXTI_enuSetSenceMode+0x188>
	{
		if (Copy_u8EXTI_ID ==0)
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	88 23       	and	r24, r24
     f94:	09 f0       	breq	.+2      	; 0xf98 <EXTI_enuSetSenceMode+0x2c>
     f96:	43 c0       	rjmp	.+134    	; 0x101e <EXTI_enuSetSenceMode+0xb2>
		{
			MCUCR &=~ (3<<0);
     f98:	a5 e5       	ldi	r26, 0x55	; 85
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e5 e5       	ldi	r30, 0x55	; 85
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	8c 7f       	andi	r24, 0xFC	; 252
     fa4:	8c 93       	st	X, r24
			switch (Copy_u8SenseLevel)
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	39 87       	std	Y+9, r19	; 0x09
     fae:	28 87       	std	Y+8, r18	; 0x08
     fb0:	88 85       	ldd	r24, Y+8	; 0x08
     fb2:	99 85       	ldd	r25, Y+9	; 0x09
     fb4:	89 30       	cpi	r24, 0x09	; 9
     fb6:	91 05       	cpc	r25, r1
     fb8:	f9 f0       	breq	.+62     	; 0xff8 <EXTI_enuSetSenceMode+0x8c>
     fba:	28 85       	ldd	r18, Y+8	; 0x08
     fbc:	39 85       	ldd	r19, Y+9	; 0x09
     fbe:	2a 30       	cpi	r18, 0x0A	; 10
     fc0:	31 05       	cpc	r19, r1
     fc2:	34 f4       	brge	.+12     	; 0xfd0 <EXTI_enuSetSenceMode+0x64>
     fc4:	88 85       	ldd	r24, Y+8	; 0x08
     fc6:	99 85       	ldd	r25, Y+9	; 0x09
     fc8:	85 30       	cpi	r24, 0x05	; 5
     fca:	91 05       	cpc	r25, r1
     fcc:	69 f0       	breq	.+26     	; 0xfe8 <EXTI_enuSetSenceMode+0x7c>
     fce:	24 c0       	rjmp	.+72     	; 0x1018 <EXTI_enuSetSenceMode+0xac>
     fd0:	28 85       	ldd	r18, Y+8	; 0x08
     fd2:	39 85       	ldd	r19, Y+9	; 0x09
     fd4:	23 31       	cpi	r18, 0x13	; 19
     fd6:	31 05       	cpc	r19, r1
     fd8:	b9 f0       	breq	.+46     	; 0x1008 <EXTI_enuSetSenceMode+0x9c>
     fda:	88 85       	ldd	r24, Y+8	; 0x08
     fdc:	99 85       	ldd	r25, Y+9	; 0x09
     fde:	8d 35       	cpi	r24, 0x5D	; 93
     fe0:	91 05       	cpc	r25, r1
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <EXTI_enuSetSenceMode+0x7a>
     fe4:	87 c0       	rjmp	.+270    	; 0x10f4 <EXTI_enuSetSenceMode+0x188>
     fe6:	18 c0       	rjmp	.+48     	; 0x1018 <EXTI_enuSetSenceMode+0xac>
			{
			case RISING_EDGE:
				MCUCR |= (3<<0);
     fe8:	a5 e5       	ldi	r26, 0x55	; 85
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e5 e5       	ldi	r30, 0x55	; 85
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	83 60       	ori	r24, 0x03	; 3
     ff4:	8c 93       	st	X, r24
     ff6:	7e c0       	rjmp	.+252    	; 0x10f4 <EXTI_enuSetSenceMode+0x188>
				break;
			case FALLING_EDGE:
				MCUCR |= (1<<1);
     ff8:	a5 e5       	ldi	r26, 0x55	; 85
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e5 e5       	ldi	r30, 0x55	; 85
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	82 60       	ori	r24, 0x02	; 2
    1004:	8c 93       	st	X, r24
    1006:	76 c0       	rjmp	.+236    	; 0x10f4 <EXTI_enuSetSenceMode+0x188>
				break;
			case ANY_LOGIC:
				MCUCR |= (1<<0);
    1008:	a5 e5       	ldi	r26, 0x55	; 85
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e5 e5       	ldi	r30, 0x55	; 85
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	81 60       	ori	r24, 0x01	; 1
    1014:	8c 93       	st	X, r24
    1016:	6e c0       	rjmp	.+220    	; 0x10f4 <EXTI_enuSetSenceMode+0x188>
				break;
			case LOW_LEVEL:
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    1018:	83 e0       	ldi	r24, 0x03	; 3
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	6b c0       	rjmp	.+214    	; 0x10f4 <EXTI_enuSetSenceMode+0x188>
			}
		}
		else if (Copy_u8EXTI_ID ==1)
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	09 f0       	breq	.+2      	; 0x1026 <EXTI_enuSetSenceMode+0xba>
    1024:	43 c0       	rjmp	.+134    	; 0x10ac <EXTI_enuSetSenceMode+0x140>
		{
			MCUCR &=~ (3<<2);
    1026:	a5 e5       	ldi	r26, 0x55	; 85
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e5 e5       	ldi	r30, 0x55	; 85
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	83 7f       	andi	r24, 0xF3	; 243
    1032:	8c 93       	st	X, r24
			switch (Copy_u8SenseLevel)
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	3f 83       	std	Y+7, r19	; 0x07
    103c:	2e 83       	std	Y+6, r18	; 0x06
    103e:	8e 81       	ldd	r24, Y+6	; 0x06
    1040:	9f 81       	ldd	r25, Y+7	; 0x07
    1042:	89 30       	cpi	r24, 0x09	; 9
    1044:	91 05       	cpc	r25, r1
    1046:	f9 f0       	breq	.+62     	; 0x1086 <EXTI_enuSetSenceMode+0x11a>
    1048:	2e 81       	ldd	r18, Y+6	; 0x06
    104a:	3f 81       	ldd	r19, Y+7	; 0x07
    104c:	2a 30       	cpi	r18, 0x0A	; 10
    104e:	31 05       	cpc	r19, r1
    1050:	34 f4       	brge	.+12     	; 0x105e <EXTI_enuSetSenceMode+0xf2>
    1052:	8e 81       	ldd	r24, Y+6	; 0x06
    1054:	9f 81       	ldd	r25, Y+7	; 0x07
    1056:	85 30       	cpi	r24, 0x05	; 5
    1058:	91 05       	cpc	r25, r1
    105a:	69 f0       	breq	.+26     	; 0x1076 <EXTI_enuSetSenceMode+0x10a>
    105c:	24 c0       	rjmp	.+72     	; 0x10a6 <EXTI_enuSetSenceMode+0x13a>
    105e:	2e 81       	ldd	r18, Y+6	; 0x06
    1060:	3f 81       	ldd	r19, Y+7	; 0x07
    1062:	23 31       	cpi	r18, 0x13	; 19
    1064:	31 05       	cpc	r19, r1
    1066:	b9 f0       	breq	.+46     	; 0x1096 <EXTI_enuSetSenceMode+0x12a>
    1068:	8e 81       	ldd	r24, Y+6	; 0x06
    106a:	9f 81       	ldd	r25, Y+7	; 0x07
    106c:	8d 35       	cpi	r24, 0x5D	; 93
    106e:	91 05       	cpc	r25, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <EXTI_enuSetSenceMode+0x108>
    1072:	40 c0       	rjmp	.+128    	; 0x10f4 <EXTI_enuSetSenceMode+0x188>
    1074:	18 c0       	rjmp	.+48     	; 0x10a6 <EXTI_enuSetSenceMode+0x13a>
			{
			case RISING_EDGE:
				MCUCR |= (3<<2);
    1076:	a5 e5       	ldi	r26, 0x55	; 85
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e5 e5       	ldi	r30, 0x55	; 85
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	8c 60       	ori	r24, 0x0C	; 12
    1082:	8c 93       	st	X, r24
    1084:	37 c0       	rjmp	.+110    	; 0x10f4 <EXTI_enuSetSenceMode+0x188>
				break;
			case FALLING_EDGE:
				MCUCR |= (1<<3);
    1086:	a5 e5       	ldi	r26, 0x55	; 85
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e5 e5       	ldi	r30, 0x55	; 85
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	88 60       	ori	r24, 0x08	; 8
    1092:	8c 93       	st	X, r24
    1094:	2f c0       	rjmp	.+94     	; 0x10f4 <EXTI_enuSetSenceMode+0x188>
				break;
			case ANY_LOGIC:
				MCUCR |= (1<<2);
    1096:	a5 e5       	ldi	r26, 0x55	; 85
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e5 e5       	ldi	r30, 0x55	; 85
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	84 60       	ori	r24, 0x04	; 4
    10a2:	8c 93       	st	X, r24
    10a4:	27 c0       	rjmp	.+78     	; 0x10f4 <EXTI_enuSetSenceMode+0x188>
				break;
			case LOW_LEVEL:
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    10a6:	83 e0       	ldi	r24, 0x03	; 3
    10a8:	89 83       	std	Y+1, r24	; 0x01
    10aa:	24 c0       	rjmp	.+72     	; 0x10f4 <EXTI_enuSetSenceMode+0x188>
			}
		}
		else if (Copy_u8EXTI_ID ==2)
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	82 30       	cpi	r24, 0x02	; 2
    10b0:	09 f5       	brne	.+66     	; 0x10f4 <EXTI_enuSetSenceMode+0x188>
		{
			MCUCSR &=~(1<<6);
    10b2:	a4 e5       	ldi	r26, 0x54	; 84
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e4 e5       	ldi	r30, 0x54	; 84
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	8f 7b       	andi	r24, 0xBF	; 191
    10be:	8c 93       	st	X, r24
			switch (Copy_u8SenseLevel)
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	3d 83       	std	Y+5, r19	; 0x05
    10c8:	2c 83       	std	Y+4, r18	; 0x04
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	9d 81       	ldd	r25, Y+5	; 0x05
    10ce:	85 30       	cpi	r24, 0x05	; 5
    10d0:	91 05       	cpc	r25, r1
    10d2:	31 f0       	breq	.+12     	; 0x10e0 <EXTI_enuSetSenceMode+0x174>
    10d4:	2c 81       	ldd	r18, Y+4	; 0x04
    10d6:	3d 81       	ldd	r19, Y+5	; 0x05
    10d8:	29 30       	cpi	r18, 0x09	; 9
    10da:	31 05       	cpc	r19, r1
    10dc:	59 f0       	breq	.+22     	; 0x10f4 <EXTI_enuSetSenceMode+0x188>
    10de:	08 c0       	rjmp	.+16     	; 0x10f0 <EXTI_enuSetSenceMode+0x184>
			{
			case RISING_EDGE:
				MCUCSR |= (1<<6);
    10e0:	a4 e5       	ldi	r26, 0x54	; 84
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e4 e5       	ldi	r30, 0x54	; 84
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	80 64       	ori	r24, 0x40	; 64
    10ec:	8c 93       	st	X, r24
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <EXTI_enuSetSenceMode+0x188>
				break;
			case FALLING_EDGE:
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    10f0:	83 e0       	ldi	r24, 0x03	; 3
    10f2:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}

	return Local_enuErrorState;
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10f6:	29 96       	adiw	r28, 0x09	; 9
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <EXTI_enuEnableINT>:


ES EXTI_enuEnableINT(u8 Copy_u8EXTI_ID)
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	00 d0       	rcall	.+0      	; 0x110e <EXTI_enuEnableINT+0x6>
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8EXTI_ID < 3)
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	83 30       	cpi	r24, 0x03	; 3
    111c:	00 f5       	brcc	.+64     	; 0x115e <EXTI_enuEnableINT+0x56>
	{
		if (Copy_u8EXTI_ID ==0)
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	88 23       	and	r24, r24
    1122:	41 f4       	brne	.+16     	; 0x1134 <EXTI_enuEnableINT+0x2c>
		{
			GICR |= (1<<6);
    1124:	ab e5       	ldi	r26, 0x5B	; 91
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	eb e5       	ldi	r30, 0x5B	; 91
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 64       	ori	r24, 0x40	; 64
    1130:	8c 93       	st	X, r24
    1132:	15 c0       	rjmp	.+42     	; 0x115e <EXTI_enuEnableINT+0x56>
		}
		else if (Copy_u8EXTI_ID ==1)
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	41 f4       	brne	.+16     	; 0x114a <EXTI_enuEnableINT+0x42>
		{
			GICR |= (1<<7);
    113a:	ab e5       	ldi	r26, 0x5B	; 91
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	eb e5       	ldi	r30, 0x5B	; 91
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	80 68       	ori	r24, 0x80	; 128
    1146:	8c 93       	st	X, r24
    1148:	0a c0       	rjmp	.+20     	; 0x115e <EXTI_enuEnableINT+0x56>
		}
		else if (Copy_u8EXTI_ID ==2)
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	39 f4       	brne	.+14     	; 0x115e <EXTI_enuEnableINT+0x56>
		{
			GICR |= (1<<5);
    1150:	ab e5       	ldi	r26, 0x5B	; 91
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	eb e5       	ldi	r30, 0x5B	; 91
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	80 62       	ori	r24, 0x20	; 32
    115c:	8c 93       	st	X, r24
		}
	}

	return Local_enuErrorState;
    115e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <EXTI_enuDisableINT>:

ES EXTI_enuDisableINT(u8 Copy_u8EXTI_ID)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	00 d0       	rcall	.+0      	; 0x1170 <EXTI_enuDisableINT+0x6>
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8EXTI_ID < 3)
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	83 30       	cpi	r24, 0x03	; 3
    117e:	00 f5       	brcc	.+64     	; 0x11c0 <EXTI_enuDisableINT+0x56>
	{
		if (Copy_u8EXTI_ID ==0)
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	88 23       	and	r24, r24
    1184:	41 f4       	brne	.+16     	; 0x1196 <EXTI_enuDisableINT+0x2c>
		{
			GICR &=~(1<<6);
    1186:	ab e5       	ldi	r26, 0x5B	; 91
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	eb e5       	ldi	r30, 0x5B	; 91
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	8f 7b       	andi	r24, 0xBF	; 191
    1192:	8c 93       	st	X, r24
    1194:	15 c0       	rjmp	.+42     	; 0x11c0 <EXTI_enuDisableINT+0x56>
		}
		else if (Copy_u8EXTI_ID ==1)
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	41 f4       	brne	.+16     	; 0x11ac <EXTI_enuDisableINT+0x42>
		{
			GICR &=~(1<<7);
    119c:	ab e5       	ldi	r26, 0x5B	; 91
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	eb e5       	ldi	r30, 0x5B	; 91
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	8f 77       	andi	r24, 0x7F	; 127
    11a8:	8c 93       	st	X, r24
    11aa:	0a c0       	rjmp	.+20     	; 0x11c0 <EXTI_enuDisableINT+0x56>
		}
		else if (Copy_u8EXTI_ID ==2)
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	82 30       	cpi	r24, 0x02	; 2
    11b0:	39 f4       	brne	.+14     	; 0x11c0 <EXTI_enuDisableINT+0x56>
		{
			GICR &=~(1<<5);
    11b2:	ab e5       	ldi	r26, 0x5B	; 91
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	eb e5       	ldi	r30, 0x5B	; 91
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	8f 7d       	andi	r24, 0xDF	; 223
    11be:	8c 93       	st	X, r24
		}
	}

	return Local_enuErrorState;
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <EXTI_enuCallBack>:


ES EXTI_enuCallBack(volatile void (*Copy_pfunAppFun)(void*) ,volatile void * Copy_pvidParameter , u8 Copy_u8EXTI_ID)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <EXTI_enuCallBack+0x6>
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <EXTI_enuCallBack+0x8>
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <EXTI_enuCallBack+0xa>
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	9b 83       	std	Y+3, r25	; 0x03
    11dc:	8a 83       	std	Y+2, r24	; 0x02
    11de:	7d 83       	std	Y+5, r23	; 0x05
    11e0:	6c 83       	std	Y+4, r22	; 0x04
    11e2:	4e 83       	std	Y+6, r20	; 0x06
	ES Local_enuErrorState = ES_NOK;
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pfunAppFun != NULL && Copy_u8EXTI_ID <3)
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	9b 81       	ldd	r25, Y+3	; 0x03
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	d9 f0       	breq	.+54     	; 0x1226 <EXTI_enuCallBack+0x5a>
    11f0:	8e 81       	ldd	r24, Y+6	; 0x06
    11f2:	83 30       	cpi	r24, 0x03	; 3
    11f4:	c0 f4       	brcc	.+48     	; 0x1226 <EXTI_enuCallBack+0x5a>
	{
		EXTI_ApfunINTFun[Copy_u8EXTI_ID]=Copy_pfunAppFun;
    11f6:	8e 81       	ldd	r24, Y+6	; 0x06
    11f8:	88 2f       	mov	r24, r24
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	fc 01       	movw	r30, r24
    1202:	e6 59       	subi	r30, 0x96	; 150
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	9b 81       	ldd	r25, Y+3	; 0x03
    120a:	91 83       	std	Z+1, r25	; 0x01
    120c:	80 83       	st	Z, r24
		EXTI_ApvidGenericparameter[Copy_u8EXTI_ID] = Copy_pvidParameter;
    120e:	8e 81       	ldd	r24, Y+6	; 0x06
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	fc 01       	movw	r30, r24
    121a:	e0 59       	subi	r30, 0x90	; 144
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	9d 81       	ldd	r25, Y+5	; 0x05
    1222:	91 83       	std	Z+1, r25	; 0x01
    1224:	80 83       	st	Z, r24
	}

	return Local_enuErrorState;
    1226:	89 81       	ldd	r24, Y+1	; 0x01
}
    1228:	26 96       	adiw	r28, 0x06	; 6
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <__vector_1>:



ISR(VECT_INT0)
{
    123a:	1f 92       	push	r1
    123c:	0f 92       	push	r0
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	0f 92       	push	r0
    1242:	11 24       	eor	r1, r1
    1244:	2f 93       	push	r18
    1246:	3f 93       	push	r19
    1248:	4f 93       	push	r20
    124a:	5f 93       	push	r21
    124c:	6f 93       	push	r22
    124e:	7f 93       	push	r23
    1250:	8f 93       	push	r24
    1252:	9f 93       	push	r25
    1254:	af 93       	push	r26
    1256:	bf 93       	push	r27
    1258:	ef 93       	push	r30
    125a:	ff 93       	push	r31
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[0] != NULL)
    1264:	80 91 6a 00 	lds	r24, 0x006A
    1268:	90 91 6b 00 	lds	r25, 0x006B
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	49 f0       	breq	.+18     	; 0x1282 <__vector_1+0x48>
	{
		EXTI_ApfunINTFun[0] ( EXTI_ApvidGenericparameter[0] );
    1270:	e0 91 6a 00 	lds	r30, 0x006A
    1274:	f0 91 6b 00 	lds	r31, 0x006B
    1278:	80 91 70 00 	lds	r24, 0x0070
    127c:	90 91 71 00 	lds	r25, 0x0071
    1280:	09 95       	icall
	}
}
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	ff 91       	pop	r31
    1288:	ef 91       	pop	r30
    128a:	bf 91       	pop	r27
    128c:	af 91       	pop	r26
    128e:	9f 91       	pop	r25
    1290:	8f 91       	pop	r24
    1292:	7f 91       	pop	r23
    1294:	6f 91       	pop	r22
    1296:	5f 91       	pop	r21
    1298:	4f 91       	pop	r20
    129a:	3f 91       	pop	r19
    129c:	2f 91       	pop	r18
    129e:	0f 90       	pop	r0
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	0f 90       	pop	r0
    12a4:	1f 90       	pop	r1
    12a6:	18 95       	reti

000012a8 <__vector_2>:

ISR(VECT_INT1)
{
    12a8:	1f 92       	push	r1
    12aa:	0f 92       	push	r0
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	0f 92       	push	r0
    12b0:	11 24       	eor	r1, r1
    12b2:	2f 93       	push	r18
    12b4:	3f 93       	push	r19
    12b6:	4f 93       	push	r20
    12b8:	5f 93       	push	r21
    12ba:	6f 93       	push	r22
    12bc:	7f 93       	push	r23
    12be:	8f 93       	push	r24
    12c0:	9f 93       	push	r25
    12c2:	af 93       	push	r26
    12c4:	bf 93       	push	r27
    12c6:	ef 93       	push	r30
    12c8:	ff 93       	push	r31
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[1] != NULL)
    12d2:	80 91 6c 00 	lds	r24, 0x006C
    12d6:	90 91 6d 00 	lds	r25, 0x006D
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	49 f0       	breq	.+18     	; 0x12f0 <__vector_2+0x48>
	{
		EXTI_ApfunINTFun[1] ( EXTI_ApvidGenericparameter[1] );
    12de:	e0 91 6c 00 	lds	r30, 0x006C
    12e2:	f0 91 6d 00 	lds	r31, 0x006D
    12e6:	80 91 72 00 	lds	r24, 0x0072
    12ea:	90 91 73 00 	lds	r25, 0x0073
    12ee:	09 95       	icall
	}
}
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	ff 91       	pop	r31
    12f6:	ef 91       	pop	r30
    12f8:	bf 91       	pop	r27
    12fa:	af 91       	pop	r26
    12fc:	9f 91       	pop	r25
    12fe:	8f 91       	pop	r24
    1300:	7f 91       	pop	r23
    1302:	6f 91       	pop	r22
    1304:	5f 91       	pop	r21
    1306:	4f 91       	pop	r20
    1308:	3f 91       	pop	r19
    130a:	2f 91       	pop	r18
    130c:	0f 90       	pop	r0
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	0f 90       	pop	r0
    1312:	1f 90       	pop	r1
    1314:	18 95       	reti

00001316 <__vector_3>:

ISR(VECT_INT2)
{
    1316:	1f 92       	push	r1
    1318:	0f 92       	push	r0
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	0f 92       	push	r0
    131e:	11 24       	eor	r1, r1
    1320:	2f 93       	push	r18
    1322:	3f 93       	push	r19
    1324:	4f 93       	push	r20
    1326:	5f 93       	push	r21
    1328:	6f 93       	push	r22
    132a:	7f 93       	push	r23
    132c:	8f 93       	push	r24
    132e:	9f 93       	push	r25
    1330:	af 93       	push	r26
    1332:	bf 93       	push	r27
    1334:	ef 93       	push	r30
    1336:	ff 93       	push	r31
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[2] != NULL)
    1340:	80 91 6e 00 	lds	r24, 0x006E
    1344:	90 91 6f 00 	lds	r25, 0x006F
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	49 f0       	breq	.+18     	; 0x135e <__vector_3+0x48>
	{
		EXTI_ApfunINTFun[2] ( EXTI_ApvidGenericparameter[2] );
    134c:	e0 91 6e 00 	lds	r30, 0x006E
    1350:	f0 91 6f 00 	lds	r31, 0x006F
    1354:	80 91 74 00 	lds	r24, 0x0074
    1358:	90 91 75 00 	lds	r25, 0x0075
    135c:	09 95       	icall
	}
}
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	ff 91       	pop	r31
    1364:	ef 91       	pop	r30
    1366:	bf 91       	pop	r27
    1368:	af 91       	pop	r26
    136a:	9f 91       	pop	r25
    136c:	8f 91       	pop	r24
    136e:	7f 91       	pop	r23
    1370:	6f 91       	pop	r22
    1372:	5f 91       	pop	r21
    1374:	4f 91       	pop	r20
    1376:	3f 91       	pop	r19
    1378:	2f 91       	pop	r18
    137a:	0f 90       	pop	r0
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	0f 90       	pop	r0
    1380:	1f 90       	pop	r1
    1382:	18 95       	reti

00001384 <GIE_enuEnable>:
#include "errorStates.h"

#include "GIE_priv.h"

ES GIE_enuEnable(void)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	0f 92       	push	r0
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	89 83       	std	Y+1, r24	; 0x01

	SREG |=(1<<7);
    1392:	af e5       	ldi	r26, 0x5F	; 95
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	ef e5       	ldi	r30, 0x5F	; 95
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	80 68       	ori	r24, 0x80	; 128
    139e:	8c 93       	st	X, r24

	return Local_enuErrorState;
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a2:	0f 90       	pop	r0
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <GIE_enuDisable>:


ES GIE_enuDisable(void)
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	0f 92       	push	r0
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	89 83       	std	Y+1, r24	; 0x01

	SREG &=~(1<<7);
    13b8:	af e5       	ldi	r26, 0x5F	; 95
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	ef e5       	ldi	r30, 0x5F	; 95
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8f 77       	andi	r24, 0x7F	; 127
    13c4:	8c 93       	st	X, r24

	return Local_enuErrorState;
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <read>:

extern EXTI_t EXTI_AstrEXTIConfig [3] ;


void read (void *p)
{
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <read+0x6>
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	9a 83       	std	Y+2, r25	; 0x02
    13dc:	89 83       	std	Y+1, r24	; 0x01
	ADC_enuRead((u16*)p);
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	9a 81       	ldd	r25, Y+2	; 0x02
    13e2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <ADC_enuRead>
}
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <main>:



int main(void)
{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <main+0x6>
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
	u16 adcRead=0;
    13fa:	1a 82       	std	Y+2, r1	; 0x02
    13fc:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPortDirection(DIO_u8PORTC, 0xff);
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	6f ef       	ldi	r22, 0xFF	; 255
    1402:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_enuSetPortDirection>
	DIO_enuSetPinDirection(DIO_u8PORTA, DIO_u8PIN3, DIO_u8INPUT);
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	63 e0       	ldi	r22, 0x03	; 3
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	0e 94 85 03 	call	0x70a	; 0x70a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN2, DIO_u8INPUT);
    1410:	83 e0       	ldi	r24, 0x03	; 3
    1412:	62 e0       	ldi	r22, 0x02	; 2
    1414:	40 e0       	ldi	r20, 0x00	; 0
    1416:	0e 94 85 03 	call	0x70a	; 0x70a <DIO_enuSetPinDirection>

	EXTI_enuInit(EXTI_AstrEXTIConfig);
    141a:	80 e6       	ldi	r24, 0x60	; 96
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 8a 06 	call	0xd14	; 0xd14 <EXTI_enuInit>
	EXTI_enuSetSenceMode(0,FALLING_EDGE);
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	69 e0       	ldi	r22, 0x09	; 9
    1426:	0e 94 b6 07 	call	0xf6c	; 0xf6c <EXTI_enuSetSenceMode>
	EXTI_enuEnableINT(0);
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	0e 94 84 08 	call	0x1108	; 0x1108 <EXTI_enuEnableINT>

	ADC_enuInit();
    1430:	0e 94 49 00 	call	0x92	; 0x92 <ADC_enuInit>
	ADC_enuSelectChannel(3);
    1434:	83 e0       	ldi	r24, 0x03	; 3
    1436:	0e 94 37 01 	call	0x26e	; 0x26e <ADC_enuSelectChannel>
	ADC_enuEnableTriggeringMode(ADC_EXTI0_TRIG);
    143a:	80 e1       	ldi	r24, 0x10	; 16
    143c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <ADC_enuEnableTriggeringMode>
	ADC_enuEnableInterruptMode();
    1440:	0e 94 c0 01 	call	0x380	; 0x380 <ADC_enuEnableInterruptMode>

	ADC_enuCallBack(read , &adcRead);
    1444:	88 ee       	ldi	r24, 0xE8	; 232
    1446:	99 e0       	ldi	r25, 0x09	; 9
    1448:	9e 01       	movw	r18, r28
    144a:	2f 5f       	subi	r18, 0xFF	; 255
    144c:	3f 4f       	sbci	r19, 0xFF	; 255
    144e:	b9 01       	movw	r22, r18
    1450:	0e 94 11 01 	call	0x222	; 0x222 <ADC_enuCallBack>

	ADC_enuStartConversion();
    1454:	0e 94 86 00 	call	0x10c	; 0x10c <ADC_enuStartConversion>

	GIE_enuEnable();
    1458:	0e 94 c2 09 	call	0x1384	; 0x1384 <GIE_enuEnable>

	while (1)
	{

		DIO_enuSetPortValue(DIO_u8PORTC , adcRead);
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	9a 81       	ldd	r25, Y+2	; 0x02
    1460:	98 2f       	mov	r25, r24
    1462:	82 e0       	ldi	r24, 0x02	; 2
    1464:	69 2f       	mov	r22, r25
    1466:	0e 94 84 02 	call	0x508	; 0x508 <DIO_enuSetPortValue>
    146a:	f8 cf       	rjmp	.-16     	; 0x145c <main+0x6c>

0000146c <_exit>:
    146c:	f8 94       	cli

0000146e <__stop_program>:
    146e:	ff cf       	rjmp	.-2      	; 0x146e <__stop_program>
