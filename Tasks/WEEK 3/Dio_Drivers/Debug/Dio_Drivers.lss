
Dio_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000097e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000a5c  00000000  00000000  000009d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000045c  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b6 04 	call	0x96c	; 0x96c <main>
  64:	0c 94 bd 04 	jmp	0x97a	; 0x97a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_enuInit>:
#include "DIO_config.h"



ES DIO_enuInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	89 83       	std	Y+1, r24	; 0x01

	//Initialize Direction Pins
	DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
  82:	e7 e3       	ldi	r30, 0x37	; 55
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
  8a:	e4 e3       	ldi	r30, 0x34	; 52
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
  92:	e1 e3       	ldi	r30, 0x31	; 49
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	80 83       	st	Z, r24

	//Initialize Port Pins
	PORTA = CONC(PA_PIN7_Val, PA_PIN6_Val, PA_PIN5_Val, PA_PIN4_Val, PA_PIN3_Val, PA_PIN2_Val, PA_PIN1_Val, PA_PIN0_Val);
  9a:	eb e3       	ldi	r30, 0x3B	; 59
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	80 83       	st	Z, r24
	PORTB = CONC(PB_PIN7_Val, PB_PIN6_Val, PB_PIN5_Val, PB_PIN4_Val, PB_PIN3_Val, PB_PIN2_Val, PB_PIN1_Val, PB_PIN0_Val);
  a2:	e8 e3       	ldi	r30, 0x38	; 56
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 83       	st	Z, r24
	PORTC = CONC(PC_PIN7_Val, PC_PIN6_Val, PC_PIN5_Val, PC_PIN4_Val, PC_PIN3_Val, PC_PIN2_Val, PC_PIN1_Val, PC_PIN0_Val);
  aa:	e5 e3       	ldi	r30, 0x35	; 53
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_Val, PD_PIN6_Val, PD_PIN5_Val, PD_PIN4_Val, PD_PIN3_Val, PD_PIN2_Val, PD_PIN1_Val, PD_PIN0_Val);
  b2:	e2 e3       	ldi	r30, 0x32	; 50
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
  ba:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
  bc:	89 81       	ldd	r24, Y+1	; 0x01
}
  be:	0f 90       	pop	r0
  c0:	cf 91       	pop	r28
  c2:	df 91       	pop	r29
  c4:	08 95       	ret

000000c6 <DIO_enuSetPortDirection>:


ES DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
  c6:	df 93       	push	r29
  c8:	cf 93       	push	r28
  ca:	00 d0       	rcall	.+0      	; 0xcc <DIO_enuSetPortDirection+0x6>
  cc:	00 d0       	rcall	.+0      	; 0xce <DIO_enuSetPortDirection+0x8>
  ce:	0f 92       	push	r0
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	8a 83       	std	Y+2, r24	; 0x02
  d6:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
  dc:	8a 81       	ldd	r24, Y+2	; 0x02
  de:	84 30       	cpi	r24, 0x04	; 4
  e0:	18 f0       	brcs	.+6      	; 0xe8 <DIO_enuSetPortDirection+0x22>
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	89 83       	std	Y+1, r24	; 0x01
  e6:	33 c0       	rjmp	.+102    	; 0x14e <DIO_enuSetPortDirection+0x88>
	else{
		switch(Copy_u8PortID){
  e8:	8a 81       	ldd	r24, Y+2	; 0x02
  ea:	28 2f       	mov	r18, r24
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	3d 83       	std	Y+5, r19	; 0x05
  f0:	2c 83       	std	Y+4, r18	; 0x04
  f2:	8c 81       	ldd	r24, Y+4	; 0x04
  f4:	9d 81       	ldd	r25, Y+5	; 0x05
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	91 05       	cpc	r25, r1
  fa:	d1 f0       	breq	.+52     	; 0x130 <DIO_enuSetPortDirection+0x6a>
  fc:	2c 81       	ldd	r18, Y+4	; 0x04
  fe:	3d 81       	ldd	r19, Y+5	; 0x05
 100:	22 30       	cpi	r18, 0x02	; 2
 102:	31 05       	cpc	r19, r1
 104:	2c f4       	brge	.+10     	; 0x110 <DIO_enuSetPortDirection+0x4a>
 106:	8c 81       	ldd	r24, Y+4	; 0x04
 108:	9d 81       	ldd	r25, Y+5	; 0x05
 10a:	00 97       	sbiw	r24, 0x00	; 0
 10c:	61 f0       	breq	.+24     	; 0x126 <DIO_enuSetPortDirection+0x60>
 10e:	1e c0       	rjmp	.+60     	; 0x14c <DIO_enuSetPortDirection+0x86>
 110:	2c 81       	ldd	r18, Y+4	; 0x04
 112:	3d 81       	ldd	r19, Y+5	; 0x05
 114:	22 30       	cpi	r18, 0x02	; 2
 116:	31 05       	cpc	r19, r1
 118:	81 f0       	breq	.+32     	; 0x13a <DIO_enuSetPortDirection+0x74>
 11a:	8c 81       	ldd	r24, Y+4	; 0x04
 11c:	9d 81       	ldd	r25, Y+5	; 0x05
 11e:	83 30       	cpi	r24, 0x03	; 3
 120:	91 05       	cpc	r25, r1
 122:	81 f0       	breq	.+32     	; 0x144 <DIO_enuSetPortDirection+0x7e>
 124:	13 c0       	rjmp	.+38     	; 0x14c <DIO_enuSetPortDirection+0x86>
			case DIO_PORTA:
				DDRA = Copy_u8Value;
 126:	ea e3       	ldi	r30, 0x3A	; 58
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	8b 81       	ldd	r24, Y+3	; 0x03
 12c:	80 83       	st	Z, r24
 12e:	0e c0       	rjmp	.+28     	; 0x14c <DIO_enuSetPortDirection+0x86>
				break;
			case DIO_PORTB:
				DDRB = Copy_u8Value;
 130:	e7 e3       	ldi	r30, 0x37	; 55
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	8b 81       	ldd	r24, Y+3	; 0x03
 136:	80 83       	st	Z, r24
 138:	09 c0       	rjmp	.+18     	; 0x14c <DIO_enuSetPortDirection+0x86>
				break;
			case DIO_PORTC:
				DDRC = Copy_u8Value;
 13a:	e4 e3       	ldi	r30, 0x34	; 52
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	80 83       	st	Z, r24
 142:	04 c0       	rjmp	.+8      	; 0x14c <DIO_enuSetPortDirection+0x86>
				break;
			case DIO_PORTD:
				DDRD = Copy_u8Value;
 144:	e1 e3       	ldi	r30, 0x31	; 49
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
 14c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
 14e:	89 81       	ldd	r24, Y+1	; 0x01
}
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	cf 91       	pop	r28
 15c:	df 91       	pop	r29
 15e:	08 95       	ret

00000160 <DIO_enuSetPortValue>:

ES DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
 160:	df 93       	push	r29
 162:	cf 93       	push	r28
 164:	00 d0       	rcall	.+0      	; 0x166 <DIO_enuSetPortValue+0x6>
 166:	00 d0       	rcall	.+0      	; 0x168 <DIO_enuSetPortValue+0x8>
 168:	0f 92       	push	r0
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	8a 83       	std	Y+2, r24	; 0x02
 170:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
 176:	8a 81       	ldd	r24, Y+2	; 0x02
 178:	84 30       	cpi	r24, 0x04	; 4
 17a:	18 f0       	brcs	.+6      	; 0x182 <DIO_enuSetPortValue+0x22>
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	89 83       	std	Y+1, r24	; 0x01
 180:	33 c0       	rjmp	.+102    	; 0x1e8 <DIO_enuSetPortValue+0x88>
	else{
		switch(Copy_u8PortID){
 182:	8a 81       	ldd	r24, Y+2	; 0x02
 184:	28 2f       	mov	r18, r24
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	3d 83       	std	Y+5, r19	; 0x05
 18a:	2c 83       	std	Y+4, r18	; 0x04
 18c:	8c 81       	ldd	r24, Y+4	; 0x04
 18e:	9d 81       	ldd	r25, Y+5	; 0x05
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	91 05       	cpc	r25, r1
 194:	d1 f0       	breq	.+52     	; 0x1ca <DIO_enuSetPortValue+0x6a>
 196:	2c 81       	ldd	r18, Y+4	; 0x04
 198:	3d 81       	ldd	r19, Y+5	; 0x05
 19a:	22 30       	cpi	r18, 0x02	; 2
 19c:	31 05       	cpc	r19, r1
 19e:	2c f4       	brge	.+10     	; 0x1aa <DIO_enuSetPortValue+0x4a>
 1a0:	8c 81       	ldd	r24, Y+4	; 0x04
 1a2:	9d 81       	ldd	r25, Y+5	; 0x05
 1a4:	00 97       	sbiw	r24, 0x00	; 0
 1a6:	61 f0       	breq	.+24     	; 0x1c0 <DIO_enuSetPortValue+0x60>
 1a8:	1e c0       	rjmp	.+60     	; 0x1e6 <DIO_enuSetPortValue+0x86>
 1aa:	2c 81       	ldd	r18, Y+4	; 0x04
 1ac:	3d 81       	ldd	r19, Y+5	; 0x05
 1ae:	22 30       	cpi	r18, 0x02	; 2
 1b0:	31 05       	cpc	r19, r1
 1b2:	81 f0       	breq	.+32     	; 0x1d4 <DIO_enuSetPortValue+0x74>
 1b4:	8c 81       	ldd	r24, Y+4	; 0x04
 1b6:	9d 81       	ldd	r25, Y+5	; 0x05
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	91 05       	cpc	r25, r1
 1bc:	81 f0       	breq	.+32     	; 0x1de <DIO_enuSetPortValue+0x7e>
 1be:	13 c0       	rjmp	.+38     	; 0x1e6 <DIO_enuSetPortValue+0x86>
			case DIO_PORTA:
				PORTA = Copy_u8Value;
 1c0:	eb e3       	ldi	r30, 0x3B	; 59
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	8b 81       	ldd	r24, Y+3	; 0x03
 1c6:	80 83       	st	Z, r24
 1c8:	0e c0       	rjmp	.+28     	; 0x1e6 <DIO_enuSetPortValue+0x86>
				break;
			case DIO_PORTB:
				PORTB = Copy_u8Value;
 1ca:	e8 e3       	ldi	r30, 0x38	; 56
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	80 83       	st	Z, r24
 1d2:	09 c0       	rjmp	.+18     	; 0x1e6 <DIO_enuSetPortValue+0x86>
				break;
			case DIO_PORTC:
				PORTC = Copy_u8Value;
 1d4:	e5 e3       	ldi	r30, 0x35	; 53
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	8b 81       	ldd	r24, Y+3	; 0x03
 1da:	80 83       	st	Z, r24
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <DIO_enuSetPortValue+0x86>
				break;
			case DIO_PORTD:
				PORTD = Copy_u8Value;
 1de:	e2 e3       	ldi	r30, 0x32	; 50
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
 1e6:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
}
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	cf 91       	pop	r28
 1f6:	df 91       	pop	r29
 1f8:	08 95       	ret

000001fa <DIO_enuTogPort>:

ES DIO_enuTogPort(u8 Copy_u8PortID)
{
 1fa:	df 93       	push	r29
 1fc:	cf 93       	push	r28
 1fe:	00 d0       	rcall	.+0      	; 0x200 <DIO_enuTogPort+0x6>
 200:	00 d0       	rcall	.+0      	; 0x202 <DIO_enuTogPort+0x8>
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
 206:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	84 30       	cpi	r24, 0x04	; 4
 210:	18 f0       	brcs	.+6      	; 0x218 <DIO_enuTogPort+0x1e>
 212:	83 e0       	ldi	r24, 0x03	; 3
 214:	89 83       	std	Y+1, r24	; 0x01
 216:	3f c0       	rjmp	.+126    	; 0x296 <DIO_enuTogPort+0x9c>
	else{
		switch(Copy_u8PortID){
 218:	8a 81       	ldd	r24, Y+2	; 0x02
 21a:	28 2f       	mov	r18, r24
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	3c 83       	std	Y+4, r19	; 0x04
 220:	2b 83       	std	Y+3, r18	; 0x03
 222:	8b 81       	ldd	r24, Y+3	; 0x03
 224:	9c 81       	ldd	r25, Y+4	; 0x04
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	91 05       	cpc	r25, r1
 22a:	e9 f0       	breq	.+58     	; 0x266 <DIO_enuTogPort+0x6c>
 22c:	2b 81       	ldd	r18, Y+3	; 0x03
 22e:	3c 81       	ldd	r19, Y+4	; 0x04
 230:	22 30       	cpi	r18, 0x02	; 2
 232:	31 05       	cpc	r19, r1
 234:	2c f4       	brge	.+10     	; 0x240 <DIO_enuTogPort+0x46>
 236:	8b 81       	ldd	r24, Y+3	; 0x03
 238:	9c 81       	ldd	r25, Y+4	; 0x04
 23a:	00 97       	sbiw	r24, 0x00	; 0
 23c:	61 f0       	breq	.+24     	; 0x256 <DIO_enuTogPort+0x5c>
 23e:	2a c0       	rjmp	.+84     	; 0x294 <DIO_enuTogPort+0x9a>
 240:	2b 81       	ldd	r18, Y+3	; 0x03
 242:	3c 81       	ldd	r19, Y+4	; 0x04
 244:	22 30       	cpi	r18, 0x02	; 2
 246:	31 05       	cpc	r19, r1
 248:	b1 f0       	breq	.+44     	; 0x276 <DIO_enuTogPort+0x7c>
 24a:	8b 81       	ldd	r24, Y+3	; 0x03
 24c:	9c 81       	ldd	r25, Y+4	; 0x04
 24e:	83 30       	cpi	r24, 0x03	; 3
 250:	91 05       	cpc	r25, r1
 252:	c9 f0       	breq	.+50     	; 0x286 <DIO_enuTogPort+0x8c>
 254:	1f c0       	rjmp	.+62     	; 0x294 <DIO_enuTogPort+0x9a>
			case DIO_PORTA:
				PORTA = ~PORTA;
 256:	ab e3       	ldi	r26, 0x3B	; 59
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	eb e3       	ldi	r30, 0x3B	; 59
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	80 95       	com	r24
 262:	8c 93       	st	X, r24
 264:	17 c0       	rjmp	.+46     	; 0x294 <DIO_enuTogPort+0x9a>
				break;
			case DIO_PORTB:
				PORTB = ~PORTB;
 266:	a8 e3       	ldi	r26, 0x38	; 56
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	e8 e3       	ldi	r30, 0x38	; 56
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	80 95       	com	r24
 272:	8c 93       	st	X, r24
 274:	0f c0       	rjmp	.+30     	; 0x294 <DIO_enuTogPort+0x9a>
				break;
			case DIO_PORTC:
				PORTC = ~PORTC;
 276:	a5 e3       	ldi	r26, 0x35	; 53
 278:	b0 e0       	ldi	r27, 0x00	; 0
 27a:	e5 e3       	ldi	r30, 0x35	; 53
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	80 95       	com	r24
 282:	8c 93       	st	X, r24
 284:	07 c0       	rjmp	.+14     	; 0x294 <DIO_enuTogPort+0x9a>
				break;
			case DIO_PORTD:
				PORTD = ~PORTD;
 286:	a2 e3       	ldi	r26, 0x32	; 50
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	e2 e3       	ldi	r30, 0x32	; 50
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	80 95       	com	r24
 292:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
 294:	19 82       	std	Y+1, r1	; 0x01
	}


	return Local_enuErrorState;
 296:	89 81       	ldd	r24, Y+1	; 0x01
}
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	cf 91       	pop	r28
 2a2:	df 91       	pop	r29
 2a4:	08 95       	ret

000002a6 <DIO_enuGetPort>:

ES DIO_enuGetPort(u8 Copy_u8PortID, u8* Copy_pu8Value)
{
 2a6:	df 93       	push	r29
 2a8:	cf 93       	push	r28
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <DIO_enuGetPort+0x6>
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <DIO_enuGetPort+0x8>
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <DIO_enuGetPort+0xa>
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	8a 83       	std	Y+2, r24	; 0x02
 2b6:	7c 83       	std	Y+4, r23	; 0x04
 2b8:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pu8Value == NULL) Local_enuErrorState = ES_NULL_POINTER;
 2be:	8b 81       	ldd	r24, Y+3	; 0x03
 2c0:	9c 81       	ldd	r25, Y+4	; 0x04
 2c2:	00 97       	sbiw	r24, 0x00	; 0
 2c4:	19 f4       	brne	.+6      	; 0x2cc <DIO_enuGetPort+0x26>
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	89 83       	std	Y+1, r24	; 0x01
 2ca:	41 c0       	rjmp	.+130    	; 0x34e <DIO_enuGetPort+0xa8>
	else if (Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
 2cc:	8a 81       	ldd	r24, Y+2	; 0x02
 2ce:	84 30       	cpi	r24, 0x04	; 4
 2d0:	18 f0       	brcs	.+6      	; 0x2d8 <DIO_enuGetPort+0x32>
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	89 83       	std	Y+1, r24	; 0x01
 2d6:	3b c0       	rjmp	.+118    	; 0x34e <DIO_enuGetPort+0xa8>
	else{
		switch(Copy_u8PortID){
 2d8:	8a 81       	ldd	r24, Y+2	; 0x02
 2da:	28 2f       	mov	r18, r24
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	3e 83       	std	Y+6, r19	; 0x06
 2e0:	2d 83       	std	Y+5, r18	; 0x05
 2e2:	8d 81       	ldd	r24, Y+5	; 0x05
 2e4:	9e 81       	ldd	r25, Y+6	; 0x06
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	91 05       	cpc	r25, r1
 2ea:	e1 f0       	breq	.+56     	; 0x324 <DIO_enuGetPort+0x7e>
 2ec:	2d 81       	ldd	r18, Y+5	; 0x05
 2ee:	3e 81       	ldd	r19, Y+6	; 0x06
 2f0:	22 30       	cpi	r18, 0x02	; 2
 2f2:	31 05       	cpc	r19, r1
 2f4:	2c f4       	brge	.+10     	; 0x300 <DIO_enuGetPort+0x5a>
 2f6:	8d 81       	ldd	r24, Y+5	; 0x05
 2f8:	9e 81       	ldd	r25, Y+6	; 0x06
 2fa:	00 97       	sbiw	r24, 0x00	; 0
 2fc:	61 f0       	breq	.+24     	; 0x316 <DIO_enuGetPort+0x70>
 2fe:	26 c0       	rjmp	.+76     	; 0x34c <DIO_enuGetPort+0xa6>
 300:	2d 81       	ldd	r18, Y+5	; 0x05
 302:	3e 81       	ldd	r19, Y+6	; 0x06
 304:	22 30       	cpi	r18, 0x02	; 2
 306:	31 05       	cpc	r19, r1
 308:	a1 f0       	breq	.+40     	; 0x332 <DIO_enuGetPort+0x8c>
 30a:	8d 81       	ldd	r24, Y+5	; 0x05
 30c:	9e 81       	ldd	r25, Y+6	; 0x06
 30e:	83 30       	cpi	r24, 0x03	; 3
 310:	91 05       	cpc	r25, r1
 312:	b1 f0       	breq	.+44     	; 0x340 <DIO_enuGetPort+0x9a>
 314:	1b c0       	rjmp	.+54     	; 0x34c <DIO_enuGetPort+0xa6>
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
 316:	e9 e3       	ldi	r30, 0x39	; 57
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	eb 81       	ldd	r30, Y+3	; 0x03
 31e:	fc 81       	ldd	r31, Y+4	; 0x04
 320:	80 83       	st	Z, r24
 322:	14 c0       	rjmp	.+40     	; 0x34c <DIO_enuGetPort+0xa6>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
 324:	e6 e3       	ldi	r30, 0x36	; 54
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	eb 81       	ldd	r30, Y+3	; 0x03
 32c:	fc 81       	ldd	r31, Y+4	; 0x04
 32e:	80 83       	st	Z, r24
 330:	0d c0       	rjmp	.+26     	; 0x34c <DIO_enuGetPort+0xa6>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
 332:	e3 e3       	ldi	r30, 0x33	; 51
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	eb 81       	ldd	r30, Y+3	; 0x03
 33a:	fc 81       	ldd	r31, Y+4	; 0x04
 33c:	80 83       	st	Z, r24
 33e:	06 c0       	rjmp	.+12     	; 0x34c <DIO_enuGetPort+0xa6>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
 340:	e0 e3       	ldi	r30, 0x30	; 48
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	eb 81       	ldd	r30, Y+3	; 0x03
 348:	fc 81       	ldd	r31, Y+4	; 0x04
 34a:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
 34c:	19 82       	std	Y+1, r1	; 0x01
	}


	return Local_enuErrorState;
 34e:	89 81       	ldd	r24, Y+1	; 0x01
}
 350:	26 96       	adiw	r28, 0x06	; 6
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	f8 94       	cli
 356:	de bf       	out	0x3e, r29	; 62
 358:	0f be       	out	0x3f, r0	; 63
 35a:	cd bf       	out	0x3d, r28	; 61
 35c:	cf 91       	pop	r28
 35e:	df 91       	pop	r29
 360:	08 95       	ret

00000362 <DIO_enuSetPinDirection>:




ES DIO_enuSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Value)
{
 362:	df 93       	push	r29
 364:	cf 93       	push	r28
 366:	00 d0       	rcall	.+0      	; 0x368 <DIO_enuSetPinDirection+0x6>
 368:	00 d0       	rcall	.+0      	; 0x36a <DIO_enuSetPinDirection+0x8>
 36a:	00 d0       	rcall	.+0      	; 0x36c <DIO_enuSetPinDirection+0xa>
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62
 370:	8a 83       	std	Y+2, r24	; 0x02
 372:	6b 83       	std	Y+3, r22	; 0x03
 374:	4c 83       	std	Y+4, r20	; 0x04
	ES Local_enuErrorState = ES_NOK;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD || Copy_u8Value > OUTPUT) Local_enuErrorState = ES_OUT_OF_RANGE;
 37a:	8a 81       	ldd	r24, Y+2	; 0x02
 37c:	84 30       	cpi	r24, 0x04	; 4
 37e:	18 f4       	brcc	.+6      	; 0x386 <DIO_enuSetPinDirection+0x24>
 380:	8c 81       	ldd	r24, Y+4	; 0x04
 382:	82 30       	cpi	r24, 0x02	; 2
 384:	18 f0       	brcs	.+6      	; 0x38c <DIO_enuSetPinDirection+0x2a>
 386:	83 e0       	ldi	r24, 0x03	; 3
 388:	89 83       	std	Y+1, r24	; 0x01
 38a:	cd c0       	rjmp	.+410    	; 0x526 <__stack+0xc7>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
 38c:	8b 81       	ldd	r24, Y+3	; 0x03
 38e:	88 30       	cpi	r24, 0x08	; 8
 390:	18 f0       	brcs	.+6      	; 0x398 <DIO_enuSetPinDirection+0x36>
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	89 83       	std	Y+1, r24	; 0x01
 396:	c7 c0       	rjmp	.+398    	; 0x526 <__stack+0xc7>
	else {
		switch(Copy_u8PortID){
 398:	8a 81       	ldd	r24, Y+2	; 0x02
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	3e 83       	std	Y+6, r19	; 0x06
 3a0:	2d 83       	std	Y+5, r18	; 0x05
 3a2:	6d 81       	ldd	r22, Y+5	; 0x05
 3a4:	7e 81       	ldd	r23, Y+6	; 0x06
 3a6:	61 30       	cpi	r22, 0x01	; 1
 3a8:	71 05       	cpc	r23, r1
 3aa:	09 f4       	brne	.+2      	; 0x3ae <DIO_enuSetPinDirection+0x4c>
 3ac:	41 c0       	rjmp	.+130    	; 0x430 <DIO_enuSetPinDirection+0xce>
 3ae:	8d 81       	ldd	r24, Y+5	; 0x05
 3b0:	9e 81       	ldd	r25, Y+6	; 0x06
 3b2:	82 30       	cpi	r24, 0x02	; 2
 3b4:	91 05       	cpc	r25, r1
 3b6:	34 f4       	brge	.+12     	; 0x3c4 <DIO_enuSetPinDirection+0x62>
 3b8:	2d 81       	ldd	r18, Y+5	; 0x05
 3ba:	3e 81       	ldd	r19, Y+6	; 0x06
 3bc:	21 15       	cp	r18, r1
 3be:	31 05       	cpc	r19, r1
 3c0:	71 f0       	breq	.+28     	; 0x3de <DIO_enuSetPinDirection+0x7c>
 3c2:	b0 c0       	rjmp	.+352    	; 0x524 <__stack+0xc5>
 3c4:	6d 81       	ldd	r22, Y+5	; 0x05
 3c6:	7e 81       	ldd	r23, Y+6	; 0x06
 3c8:	62 30       	cpi	r22, 0x02	; 2
 3ca:	71 05       	cpc	r23, r1
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <DIO_enuSetPinDirection+0x6e>
 3ce:	59 c0       	rjmp	.+178    	; 0x482 <__stack+0x23>
 3d0:	8d 81       	ldd	r24, Y+5	; 0x05
 3d2:	9e 81       	ldd	r25, Y+6	; 0x06
 3d4:	83 30       	cpi	r24, 0x03	; 3
 3d6:	91 05       	cpc	r25, r1
 3d8:	09 f4       	brne	.+2      	; 0x3dc <DIO_enuSetPinDirection+0x7a>
 3da:	7c c0       	rjmp	.+248    	; 0x4d4 <__stack+0x75>
 3dc:	a3 c0       	rjmp	.+326    	; 0x524 <__stack+0xc5>
			case DIO_PORTA:
				DDRA &= ~(1 << Copy_u8PinID);
 3de:	aa e3       	ldi	r26, 0x3A	; 58
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	ea e3       	ldi	r30, 0x3A	; 58
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	48 2f       	mov	r20, r24
 3ea:	8b 81       	ldd	r24, Y+3	; 0x03
 3ec:	28 2f       	mov	r18, r24
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_enuSetPinDirection+0x98>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	2a 95       	dec	r18
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_enuSetPinDirection+0x94>
 3fe:	80 95       	com	r24
 400:	84 23       	and	r24, r20
 402:	8c 93       	st	X, r24
				DDRA |= (Copy_u8Value << Copy_u8PinID);
 404:	aa e3       	ldi	r26, 0x3A	; 58
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	ea e3       	ldi	r30, 0x3A	; 58
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	48 2f       	mov	r20, r24
 410:	8c 81       	ldd	r24, Y+4	; 0x04
 412:	28 2f       	mov	r18, r24
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	8b 81       	ldd	r24, Y+3	; 0x03
 418:	88 2f       	mov	r24, r24
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	b9 01       	movw	r22, r18
 41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_enuSetPinDirection+0xc2>
 420:	66 0f       	add	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	8a 95       	dec	r24
 426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_enuSetPinDirection+0xbe>
 428:	cb 01       	movw	r24, r22
 42a:	84 2b       	or	r24, r20
 42c:	8c 93       	st	X, r24
 42e:	7a c0       	rjmp	.+244    	; 0x524 <__stack+0xc5>
				break;
			case DIO_PORTB:
				DDRB &= ~(1 << Copy_u8PinID);
 430:	a7 e3       	ldi	r26, 0x37	; 55
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	e7 e3       	ldi	r30, 0x37	; 55
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	48 2f       	mov	r20, r24
 43c:	8b 81       	ldd	r24, Y+3	; 0x03
 43e:	28 2f       	mov	r18, r24
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <DIO_enuSetPinDirection+0xea>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	2a 95       	dec	r18
 44e:	e2 f7       	brpl	.-8      	; 0x448 <DIO_enuSetPinDirection+0xe6>
 450:	80 95       	com	r24
 452:	84 23       	and	r24, r20
 454:	8c 93       	st	X, r24
				DDRB |= (Copy_u8Value << Copy_u8PinID);
 456:	a7 e3       	ldi	r26, 0x37	; 55
 458:	b0 e0       	ldi	r27, 0x00	; 0
 45a:	e7 e3       	ldi	r30, 0x37	; 55
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	48 2f       	mov	r20, r24
 462:	8c 81       	ldd	r24, Y+4	; 0x04
 464:	28 2f       	mov	r18, r24
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	8b 81       	ldd	r24, Y+3	; 0x03
 46a:	88 2f       	mov	r24, r24
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	b9 01       	movw	r22, r18
 470:	02 c0       	rjmp	.+4      	; 0x476 <__stack+0x17>
 472:	66 0f       	add	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	8a 95       	dec	r24
 478:	e2 f7       	brpl	.-8      	; 0x472 <__stack+0x13>
 47a:	cb 01       	movw	r24, r22
 47c:	84 2b       	or	r24, r20
 47e:	8c 93       	st	X, r24
 480:	51 c0       	rjmp	.+162    	; 0x524 <__stack+0xc5>
				break;
			case DIO_PORTC:
				DDRC &= ~(1 << Copy_u8PinID);
 482:	a4 e3       	ldi	r26, 0x34	; 52
 484:	b0 e0       	ldi	r27, 0x00	; 0
 486:	e4 e3       	ldi	r30, 0x34	; 52
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	48 2f       	mov	r20, r24
 48e:	8b 81       	ldd	r24, Y+3	; 0x03
 490:	28 2f       	mov	r18, r24
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <__stack+0x3f>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	2a 95       	dec	r18
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <__stack+0x3b>
 4a2:	80 95       	com	r24
 4a4:	84 23       	and	r24, r20
 4a6:	8c 93       	st	X, r24
				DDRC |= (Copy_u8Value << Copy_u8PinID);
 4a8:	a4 e3       	ldi	r26, 0x34	; 52
 4aa:	b0 e0       	ldi	r27, 0x00	; 0
 4ac:	e4 e3       	ldi	r30, 0x34	; 52
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	48 2f       	mov	r20, r24
 4b4:	8c 81       	ldd	r24, Y+4	; 0x04
 4b6:	28 2f       	mov	r18, r24
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	8b 81       	ldd	r24, Y+3	; 0x03
 4bc:	88 2f       	mov	r24, r24
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	b9 01       	movw	r22, r18
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__stack+0x69>
 4c4:	66 0f       	add	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	8a 95       	dec	r24
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <__stack+0x65>
 4cc:	cb 01       	movw	r24, r22
 4ce:	84 2b       	or	r24, r20
 4d0:	8c 93       	st	X, r24
 4d2:	28 c0       	rjmp	.+80     	; 0x524 <__stack+0xc5>
				break;
			case DIO_PORTD:
				DDRD &= ~(1 << Copy_u8PinID);
 4d4:	a1 e3       	ldi	r26, 0x31	; 49
 4d6:	b0 e0       	ldi	r27, 0x00	; 0
 4d8:	e1 e3       	ldi	r30, 0x31	; 49
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	48 2f       	mov	r20, r24
 4e0:	8b 81       	ldd	r24, Y+3	; 0x03
 4e2:	28 2f       	mov	r18, r24
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__stack+0x91>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	2a 95       	dec	r18
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <__stack+0x8d>
 4f4:	80 95       	com	r24
 4f6:	84 23       	and	r24, r20
 4f8:	8c 93       	st	X, r24
				DDRD |= (Copy_u8Value << Copy_u8PinID);
 4fa:	a1 e3       	ldi	r26, 0x31	; 49
 4fc:	b0 e0       	ldi	r27, 0x00	; 0
 4fe:	e1 e3       	ldi	r30, 0x31	; 49
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	48 2f       	mov	r20, r24
 506:	8c 81       	ldd	r24, Y+4	; 0x04
 508:	28 2f       	mov	r18, r24
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	8b 81       	ldd	r24, Y+3	; 0x03
 50e:	88 2f       	mov	r24, r24
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	b9 01       	movw	r22, r18
 514:	02 c0       	rjmp	.+4      	; 0x51a <__stack+0xbb>
 516:	66 0f       	add	r22, r22
 518:	77 1f       	adc	r23, r23
 51a:	8a 95       	dec	r24
 51c:	e2 f7       	brpl	.-8      	; 0x516 <__stack+0xb7>
 51e:	cb 01       	movw	r24, r22
 520:	84 2b       	or	r24, r20
 522:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
 524:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
 526:	89 81       	ldd	r24, Y+1	; 0x01
}
 528:	26 96       	adiw	r28, 0x06	; 6
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	f8 94       	cli
 52e:	de bf       	out	0x3e, r29	; 62
 530:	0f be       	out	0x3f, r0	; 63
 532:	cd bf       	out	0x3d, r28	; 61
 534:	cf 91       	pop	r28
 536:	df 91       	pop	r29
 538:	08 95       	ret

0000053a <DIO_enuSetPinValue>:

ES DIO_enuSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Value)
{
 53a:	df 93       	push	r29
 53c:	cf 93       	push	r28
 53e:	00 d0       	rcall	.+0      	; 0x540 <DIO_enuSetPinValue+0x6>
 540:	00 d0       	rcall	.+0      	; 0x542 <DIO_enuSetPinValue+0x8>
 542:	00 d0       	rcall	.+0      	; 0x544 <DIO_enuSetPinValue+0xa>
 544:	cd b7       	in	r28, 0x3d	; 61
 546:	de b7       	in	r29, 0x3e	; 62
 548:	8a 83       	std	Y+2, r24	; 0x02
 54a:	6b 83       	std	Y+3, r22	; 0x03
 54c:	4c 83       	std	Y+4, r20	; 0x04
	ES Local_enuErrorState = ES_NOK;
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD || Copy_u8Value > OUTPUT) Local_enuErrorState = ES_OUT_OF_RANGE;
 552:	8a 81       	ldd	r24, Y+2	; 0x02
 554:	84 30       	cpi	r24, 0x04	; 4
 556:	18 f4       	brcc	.+6      	; 0x55e <DIO_enuSetPinValue+0x24>
 558:	8c 81       	ldd	r24, Y+4	; 0x04
 55a:	82 30       	cpi	r24, 0x02	; 2
 55c:	18 f0       	brcs	.+6      	; 0x564 <DIO_enuSetPinValue+0x2a>
 55e:	83 e0       	ldi	r24, 0x03	; 3
 560:	89 83       	std	Y+1, r24	; 0x01
 562:	cd c0       	rjmp	.+410    	; 0x6fe <DIO_enuSetPinValue+0x1c4>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
 564:	8b 81       	ldd	r24, Y+3	; 0x03
 566:	88 30       	cpi	r24, 0x08	; 8
 568:	18 f0       	brcs	.+6      	; 0x570 <DIO_enuSetPinValue+0x36>
 56a:	83 e0       	ldi	r24, 0x03	; 3
 56c:	89 83       	std	Y+1, r24	; 0x01
 56e:	c7 c0       	rjmp	.+398    	; 0x6fe <DIO_enuSetPinValue+0x1c4>
	else{
		switch(Copy_u8PortID){
 570:	8a 81       	ldd	r24, Y+2	; 0x02
 572:	28 2f       	mov	r18, r24
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	3e 83       	std	Y+6, r19	; 0x06
 578:	2d 83       	std	Y+5, r18	; 0x05
 57a:	6d 81       	ldd	r22, Y+5	; 0x05
 57c:	7e 81       	ldd	r23, Y+6	; 0x06
 57e:	61 30       	cpi	r22, 0x01	; 1
 580:	71 05       	cpc	r23, r1
 582:	09 f4       	brne	.+2      	; 0x586 <DIO_enuSetPinValue+0x4c>
 584:	41 c0       	rjmp	.+130    	; 0x608 <DIO_enuSetPinValue+0xce>
 586:	8d 81       	ldd	r24, Y+5	; 0x05
 588:	9e 81       	ldd	r25, Y+6	; 0x06
 58a:	82 30       	cpi	r24, 0x02	; 2
 58c:	91 05       	cpc	r25, r1
 58e:	34 f4       	brge	.+12     	; 0x59c <DIO_enuSetPinValue+0x62>
 590:	2d 81       	ldd	r18, Y+5	; 0x05
 592:	3e 81       	ldd	r19, Y+6	; 0x06
 594:	21 15       	cp	r18, r1
 596:	31 05       	cpc	r19, r1
 598:	71 f0       	breq	.+28     	; 0x5b6 <DIO_enuSetPinValue+0x7c>
 59a:	b0 c0       	rjmp	.+352    	; 0x6fc <DIO_enuSetPinValue+0x1c2>
 59c:	6d 81       	ldd	r22, Y+5	; 0x05
 59e:	7e 81       	ldd	r23, Y+6	; 0x06
 5a0:	62 30       	cpi	r22, 0x02	; 2
 5a2:	71 05       	cpc	r23, r1
 5a4:	09 f4       	brne	.+2      	; 0x5a8 <DIO_enuSetPinValue+0x6e>
 5a6:	59 c0       	rjmp	.+178    	; 0x65a <DIO_enuSetPinValue+0x120>
 5a8:	8d 81       	ldd	r24, Y+5	; 0x05
 5aa:	9e 81       	ldd	r25, Y+6	; 0x06
 5ac:	83 30       	cpi	r24, 0x03	; 3
 5ae:	91 05       	cpc	r25, r1
 5b0:	09 f4       	brne	.+2      	; 0x5b4 <DIO_enuSetPinValue+0x7a>
 5b2:	7c c0       	rjmp	.+248    	; 0x6ac <DIO_enuSetPinValue+0x172>
 5b4:	a3 c0       	rjmp	.+326    	; 0x6fc <DIO_enuSetPinValue+0x1c2>
			case DIO_PORTA:
				PORTA &= ~(1 << Copy_u8PinID);
 5b6:	ab e3       	ldi	r26, 0x3B	; 59
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	eb e3       	ldi	r30, 0x3B	; 59
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	48 2f       	mov	r20, r24
 5c2:	8b 81       	ldd	r24, Y+3	; 0x03
 5c4:	28 2f       	mov	r18, r24
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_enuSetPinValue+0x98>
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	2a 95       	dec	r18
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_enuSetPinValue+0x94>
 5d6:	80 95       	com	r24
 5d8:	84 23       	and	r24, r20
 5da:	8c 93       	st	X, r24
				PORTA |= (Copy_u8Value << Copy_u8PinID);
 5dc:	ab e3       	ldi	r26, 0x3B	; 59
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	eb e3       	ldi	r30, 0x3B	; 59
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	80 81       	ld	r24, Z
 5e6:	48 2f       	mov	r20, r24
 5e8:	8c 81       	ldd	r24, Y+4	; 0x04
 5ea:	28 2f       	mov	r18, r24
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	8b 81       	ldd	r24, Y+3	; 0x03
 5f0:	88 2f       	mov	r24, r24
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	b9 01       	movw	r22, r18
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_enuSetPinValue+0xc2>
 5f8:	66 0f       	add	r22, r22
 5fa:	77 1f       	adc	r23, r23
 5fc:	8a 95       	dec	r24
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_enuSetPinValue+0xbe>
 600:	cb 01       	movw	r24, r22
 602:	84 2b       	or	r24, r20
 604:	8c 93       	st	X, r24
 606:	7a c0       	rjmp	.+244    	; 0x6fc <DIO_enuSetPinValue+0x1c2>
				break;
			case DIO_PORTB:
				PORTB &= ~(1 << Copy_u8PinID);
 608:	a8 e3       	ldi	r26, 0x38	; 56
 60a:	b0 e0       	ldi	r27, 0x00	; 0
 60c:	e8 e3       	ldi	r30, 0x38	; 56
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	48 2f       	mov	r20, r24
 614:	8b 81       	ldd	r24, Y+3	; 0x03
 616:	28 2f       	mov	r18, r24
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_enuSetPinValue+0xea>
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	2a 95       	dec	r18
 626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_enuSetPinValue+0xe6>
 628:	80 95       	com	r24
 62a:	84 23       	and	r24, r20
 62c:	8c 93       	st	X, r24
				PORTB |= (Copy_u8Value << Copy_u8PinID);
 62e:	a8 e3       	ldi	r26, 0x38	; 56
 630:	b0 e0       	ldi	r27, 0x00	; 0
 632:	e8 e3       	ldi	r30, 0x38	; 56
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	80 81       	ld	r24, Z
 638:	48 2f       	mov	r20, r24
 63a:	8c 81       	ldd	r24, Y+4	; 0x04
 63c:	28 2f       	mov	r18, r24
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	8b 81       	ldd	r24, Y+3	; 0x03
 642:	88 2f       	mov	r24, r24
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	b9 01       	movw	r22, r18
 648:	02 c0       	rjmp	.+4      	; 0x64e <DIO_enuSetPinValue+0x114>
 64a:	66 0f       	add	r22, r22
 64c:	77 1f       	adc	r23, r23
 64e:	8a 95       	dec	r24
 650:	e2 f7       	brpl	.-8      	; 0x64a <DIO_enuSetPinValue+0x110>
 652:	cb 01       	movw	r24, r22
 654:	84 2b       	or	r24, r20
 656:	8c 93       	st	X, r24
 658:	51 c0       	rjmp	.+162    	; 0x6fc <DIO_enuSetPinValue+0x1c2>
				break;
			case DIO_PORTC:
				PORTC &= ~(1 << Copy_u8PinID);
 65a:	a5 e3       	ldi	r26, 0x35	; 53
 65c:	b0 e0       	ldi	r27, 0x00	; 0
 65e:	e5 e3       	ldi	r30, 0x35	; 53
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	80 81       	ld	r24, Z
 664:	48 2f       	mov	r20, r24
 666:	8b 81       	ldd	r24, Y+3	; 0x03
 668:	28 2f       	mov	r18, r24
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_enuSetPinValue+0x13c>
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	2a 95       	dec	r18
 678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_enuSetPinValue+0x138>
 67a:	80 95       	com	r24
 67c:	84 23       	and	r24, r20
 67e:	8c 93       	st	X, r24
				PORTC |= (Copy_u8Value << Copy_u8PinID);
 680:	a5 e3       	ldi	r26, 0x35	; 53
 682:	b0 e0       	ldi	r27, 0x00	; 0
 684:	e5 e3       	ldi	r30, 0x35	; 53
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	48 2f       	mov	r20, r24
 68c:	8c 81       	ldd	r24, Y+4	; 0x04
 68e:	28 2f       	mov	r18, r24
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	8b 81       	ldd	r24, Y+3	; 0x03
 694:	88 2f       	mov	r24, r24
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	b9 01       	movw	r22, r18
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_enuSetPinValue+0x166>
 69c:	66 0f       	add	r22, r22
 69e:	77 1f       	adc	r23, r23
 6a0:	8a 95       	dec	r24
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_enuSetPinValue+0x162>
 6a4:	cb 01       	movw	r24, r22
 6a6:	84 2b       	or	r24, r20
 6a8:	8c 93       	st	X, r24
 6aa:	28 c0       	rjmp	.+80     	; 0x6fc <DIO_enuSetPinValue+0x1c2>
				break;
			case DIO_PORTD:
				PORTD &= ~(1 << Copy_u8PinID);
 6ac:	a2 e3       	ldi	r26, 0x32	; 50
 6ae:	b0 e0       	ldi	r27, 0x00	; 0
 6b0:	e2 e3       	ldi	r30, 0x32	; 50
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	48 2f       	mov	r20, r24
 6b8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ba:	28 2f       	mov	r18, r24
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <DIO_enuSetPinValue+0x18e>
 6c4:	88 0f       	add	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	2a 95       	dec	r18
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <DIO_enuSetPinValue+0x18a>
 6cc:	80 95       	com	r24
 6ce:	84 23       	and	r24, r20
 6d0:	8c 93       	st	X, r24
				PORTD |= (Copy_u8Value << Copy_u8PinID);
 6d2:	a2 e3       	ldi	r26, 0x32	; 50
 6d4:	b0 e0       	ldi	r27, 0x00	; 0
 6d6:	e2 e3       	ldi	r30, 0x32	; 50
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	80 81       	ld	r24, Z
 6dc:	48 2f       	mov	r20, r24
 6de:	8c 81       	ldd	r24, Y+4	; 0x04
 6e0:	28 2f       	mov	r18, r24
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	8b 81       	ldd	r24, Y+3	; 0x03
 6e6:	88 2f       	mov	r24, r24
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	b9 01       	movw	r22, r18
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <DIO_enuSetPinValue+0x1b8>
 6ee:	66 0f       	add	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	8a 95       	dec	r24
 6f4:	e2 f7       	brpl	.-8      	; 0x6ee <DIO_enuSetPinValue+0x1b4>
 6f6:	cb 01       	movw	r24, r22
 6f8:	84 2b       	or	r24, r20
 6fa:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
 6fc:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
 6fe:	89 81       	ldd	r24, Y+1	; 0x01
}
 700:	26 96       	adiw	r28, 0x06	; 6
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	f8 94       	cli
 706:	de bf       	out	0x3e, r29	; 62
 708:	0f be       	out	0x3f, r0	; 63
 70a:	cd bf       	out	0x3d, r28	; 61
 70c:	cf 91       	pop	r28
 70e:	df 91       	pop	r29
 710:	08 95       	ret

00000712 <DIO_enuGetpin>:

ES DIO_enuGetpin(u8 Copy_u8PortID,u8 Copy_u8PinID, u8* Copy_pu8Value)
{
 712:	df 93       	push	r29
 714:	cf 93       	push	r28
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
 71a:	27 97       	sbiw	r28, 0x07	; 7
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	f8 94       	cli
 720:	de bf       	out	0x3e, r29	; 62
 722:	0f be       	out	0x3f, r0	; 63
 724:	cd bf       	out	0x3d, r28	; 61
 726:	8a 83       	std	Y+2, r24	; 0x02
 728:	6b 83       	std	Y+3, r22	; 0x03
 72a:	5d 83       	std	Y+5, r21	; 0x05
 72c:	4c 83       	std	Y+4, r20	; 0x04
	ES Local_enuErrorState = ES_NOK;
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
 732:	8a 81       	ldd	r24, Y+2	; 0x02
 734:	84 30       	cpi	r24, 0x04	; 4
 736:	18 f0       	brcs	.+6      	; 0x73e <DIO_enuGetpin+0x2c>
 738:	83 e0       	ldi	r24, 0x03	; 3
 73a:	89 83       	std	Y+1, r24	; 0x01
 73c:	7e c0       	rjmp	.+252    	; 0x83a <DIO_enuGetpin+0x128>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
 73e:	8b 81       	ldd	r24, Y+3	; 0x03
 740:	88 30       	cpi	r24, 0x08	; 8
 742:	18 f0       	brcs	.+6      	; 0x74a <DIO_enuGetpin+0x38>
 744:	83 e0       	ldi	r24, 0x03	; 3
 746:	89 83       	std	Y+1, r24	; 0x01
 748:	78 c0       	rjmp	.+240    	; 0x83a <DIO_enuGetpin+0x128>
	else if(Copy_pu8Value == NULL)Local_enuErrorState = ES_NULL_POINTER;
 74a:	8c 81       	ldd	r24, Y+4	; 0x04
 74c:	9d 81       	ldd	r25, Y+5	; 0x05
 74e:	00 97       	sbiw	r24, 0x00	; 0
 750:	19 f4       	brne	.+6      	; 0x758 <DIO_enuGetpin+0x46>
 752:	82 e0       	ldi	r24, 0x02	; 2
 754:	89 83       	std	Y+1, r24	; 0x01
 756:	71 c0       	rjmp	.+226    	; 0x83a <DIO_enuGetpin+0x128>
	else{
		switch(Copy_u8PortID){
 758:	8a 81       	ldd	r24, Y+2	; 0x02
 75a:	28 2f       	mov	r18, r24
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	3f 83       	std	Y+7, r19	; 0x07
 760:	2e 83       	std	Y+6, r18	; 0x06
 762:	4e 81       	ldd	r20, Y+6	; 0x06
 764:	5f 81       	ldd	r21, Y+7	; 0x07
 766:	41 30       	cpi	r20, 0x01	; 1
 768:	51 05       	cpc	r21, r1
 76a:	59 f1       	breq	.+86     	; 0x7c2 <DIO_enuGetpin+0xb0>
 76c:	8e 81       	ldd	r24, Y+6	; 0x06
 76e:	9f 81       	ldd	r25, Y+7	; 0x07
 770:	82 30       	cpi	r24, 0x02	; 2
 772:	91 05       	cpc	r25, r1
 774:	34 f4       	brge	.+12     	; 0x782 <DIO_enuGetpin+0x70>
 776:	2e 81       	ldd	r18, Y+6	; 0x06
 778:	3f 81       	ldd	r19, Y+7	; 0x07
 77a:	21 15       	cp	r18, r1
 77c:	31 05       	cpc	r19, r1
 77e:	69 f0       	breq	.+26     	; 0x79a <DIO_enuGetpin+0x88>
 780:	5b c0       	rjmp	.+182    	; 0x838 <DIO_enuGetpin+0x126>
 782:	4e 81       	ldd	r20, Y+6	; 0x06
 784:	5f 81       	ldd	r21, Y+7	; 0x07
 786:	42 30       	cpi	r20, 0x02	; 2
 788:	51 05       	cpc	r21, r1
 78a:	79 f1       	breq	.+94     	; 0x7ea <DIO_enuGetpin+0xd8>
 78c:	8e 81       	ldd	r24, Y+6	; 0x06
 78e:	9f 81       	ldd	r25, Y+7	; 0x07
 790:	83 30       	cpi	r24, 0x03	; 3
 792:	91 05       	cpc	r25, r1
 794:	09 f4       	brne	.+2      	; 0x798 <DIO_enuGetpin+0x86>
 796:	3d c0       	rjmp	.+122    	; 0x812 <DIO_enuGetpin+0x100>
 798:	4f c0       	rjmp	.+158    	; 0x838 <DIO_enuGetpin+0x126>
			case DIO_PORTA:
				*Copy_pu8Value = getBit(PINA,Copy_u8PinID);
 79a:	e9 e3       	ldi	r30, 0x39	; 57
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	80 81       	ld	r24, Z
 7a0:	28 2f       	mov	r18, r24
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	8b 81       	ldd	r24, Y+3	; 0x03
 7a6:	88 2f       	mov	r24, r24
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	a9 01       	movw	r20, r18
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <DIO_enuGetpin+0xa0>
 7ae:	55 95       	asr	r21
 7b0:	47 95       	ror	r20
 7b2:	8a 95       	dec	r24
 7b4:	e2 f7       	brpl	.-8      	; 0x7ae <DIO_enuGetpin+0x9c>
 7b6:	ca 01       	movw	r24, r20
 7b8:	81 70       	andi	r24, 0x01	; 1
 7ba:	ec 81       	ldd	r30, Y+4	; 0x04
 7bc:	fd 81       	ldd	r31, Y+5	; 0x05
 7be:	80 83       	st	Z, r24
 7c0:	3b c0       	rjmp	.+118    	; 0x838 <DIO_enuGetpin+0x126>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = getBit(PINB,Copy_u8PinID);
 7c2:	e6 e3       	ldi	r30, 0x36	; 54
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	80 81       	ld	r24, Z
 7c8:	28 2f       	mov	r18, r24
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	8b 81       	ldd	r24, Y+3	; 0x03
 7ce:	88 2f       	mov	r24, r24
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	a9 01       	movw	r20, r18
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <DIO_enuGetpin+0xc8>
 7d6:	55 95       	asr	r21
 7d8:	47 95       	ror	r20
 7da:	8a 95       	dec	r24
 7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <DIO_enuGetpin+0xc4>
 7de:	ca 01       	movw	r24, r20
 7e0:	81 70       	andi	r24, 0x01	; 1
 7e2:	ec 81       	ldd	r30, Y+4	; 0x04
 7e4:	fd 81       	ldd	r31, Y+5	; 0x05
 7e6:	80 83       	st	Z, r24
 7e8:	27 c0       	rjmp	.+78     	; 0x838 <DIO_enuGetpin+0x126>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = getBit(PINC,Copy_u8PinID);
 7ea:	e3 e3       	ldi	r30, 0x33	; 51
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	80 81       	ld	r24, Z
 7f0:	28 2f       	mov	r18, r24
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	8b 81       	ldd	r24, Y+3	; 0x03
 7f6:	88 2f       	mov	r24, r24
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	a9 01       	movw	r20, r18
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <DIO_enuGetpin+0xf0>
 7fe:	55 95       	asr	r21
 800:	47 95       	ror	r20
 802:	8a 95       	dec	r24
 804:	e2 f7       	brpl	.-8      	; 0x7fe <DIO_enuGetpin+0xec>
 806:	ca 01       	movw	r24, r20
 808:	81 70       	andi	r24, 0x01	; 1
 80a:	ec 81       	ldd	r30, Y+4	; 0x04
 80c:	fd 81       	ldd	r31, Y+5	; 0x05
 80e:	80 83       	st	Z, r24
 810:	13 c0       	rjmp	.+38     	; 0x838 <DIO_enuGetpin+0x126>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = getBit(PIND,Copy_u8PinID);
 812:	e0 e3       	ldi	r30, 0x30	; 48
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	80 81       	ld	r24, Z
 818:	28 2f       	mov	r18, r24
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	8b 81       	ldd	r24, Y+3	; 0x03
 81e:	88 2f       	mov	r24, r24
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	a9 01       	movw	r20, r18
 824:	02 c0       	rjmp	.+4      	; 0x82a <DIO_enuGetpin+0x118>
 826:	55 95       	asr	r21
 828:	47 95       	ror	r20
 82a:	8a 95       	dec	r24
 82c:	e2 f7       	brpl	.-8      	; 0x826 <DIO_enuGetpin+0x114>
 82e:	ca 01       	movw	r24, r20
 830:	81 70       	andi	r24, 0x01	; 1
 832:	ec 81       	ldd	r30, Y+4	; 0x04
 834:	fd 81       	ldd	r31, Y+5	; 0x05
 836:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
 838:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enuErrorState;
 83a:	89 81       	ldd	r24, Y+1	; 0x01
}
 83c:	27 96       	adiw	r28, 0x07	; 7
 83e:	0f b6       	in	r0, 0x3f	; 63
 840:	f8 94       	cli
 842:	de bf       	out	0x3e, r29	; 62
 844:	0f be       	out	0x3f, r0	; 63
 846:	cd bf       	out	0x3d, r28	; 61
 848:	cf 91       	pop	r28
 84a:	df 91       	pop	r29
 84c:	08 95       	ret

0000084e <DIO_enuTogPin>:

ES DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
 84e:	df 93       	push	r29
 850:	cf 93       	push	r28
 852:	00 d0       	rcall	.+0      	; 0x854 <DIO_enuTogPin+0x6>
 854:	00 d0       	rcall	.+0      	; 0x856 <DIO_enuTogPin+0x8>
 856:	0f 92       	push	r0
 858:	cd b7       	in	r28, 0x3d	; 61
 85a:	de b7       	in	r29, 0x3e	; 62
 85c:	8a 83       	std	Y+2, r24	; 0x02
 85e:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
 864:	8a 81       	ldd	r24, Y+2	; 0x02
 866:	84 30       	cpi	r24, 0x04	; 4
 868:	18 f0       	brcs	.+6      	; 0x870 <DIO_enuTogPin+0x22>
 86a:	83 e0       	ldi	r24, 0x03	; 3
 86c:	89 83       	std	Y+1, r24	; 0x01
 86e:	75 c0       	rjmp	.+234    	; 0x95a <DIO_enuTogPin+0x10c>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
 870:	8b 81       	ldd	r24, Y+3	; 0x03
 872:	88 30       	cpi	r24, 0x08	; 8
 874:	18 f0       	brcs	.+6      	; 0x87c <DIO_enuTogPin+0x2e>
 876:	83 e0       	ldi	r24, 0x03	; 3
 878:	89 83       	std	Y+1, r24	; 0x01
 87a:	6f c0       	rjmp	.+222    	; 0x95a <DIO_enuTogPin+0x10c>
	else{
		switch(Copy_u8PortID){
 87c:	8a 81       	ldd	r24, Y+2	; 0x02
 87e:	28 2f       	mov	r18, r24
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	3d 83       	std	Y+5, r19	; 0x05
 884:	2c 83       	std	Y+4, r18	; 0x04
 886:	8c 81       	ldd	r24, Y+4	; 0x04
 888:	9d 81       	ldd	r25, Y+5	; 0x05
 88a:	81 30       	cpi	r24, 0x01	; 1
 88c:	91 05       	cpc	r25, r1
 88e:	49 f1       	breq	.+82     	; 0x8e2 <DIO_enuTogPin+0x94>
 890:	2c 81       	ldd	r18, Y+4	; 0x04
 892:	3d 81       	ldd	r19, Y+5	; 0x05
 894:	22 30       	cpi	r18, 0x02	; 2
 896:	31 05       	cpc	r19, r1
 898:	2c f4       	brge	.+10     	; 0x8a4 <DIO_enuTogPin+0x56>
 89a:	8c 81       	ldd	r24, Y+4	; 0x04
 89c:	9d 81       	ldd	r25, Y+5	; 0x05
 89e:	00 97       	sbiw	r24, 0x00	; 0
 8a0:	61 f0       	breq	.+24     	; 0x8ba <DIO_enuTogPin+0x6c>
 8a2:	5a c0       	rjmp	.+180    	; 0x958 <DIO_enuTogPin+0x10a>
 8a4:	2c 81       	ldd	r18, Y+4	; 0x04
 8a6:	3d 81       	ldd	r19, Y+5	; 0x05
 8a8:	22 30       	cpi	r18, 0x02	; 2
 8aa:	31 05       	cpc	r19, r1
 8ac:	71 f1       	breq	.+92     	; 0x90a <DIO_enuTogPin+0xbc>
 8ae:	8c 81       	ldd	r24, Y+4	; 0x04
 8b0:	9d 81       	ldd	r25, Y+5	; 0x05
 8b2:	83 30       	cpi	r24, 0x03	; 3
 8b4:	91 05       	cpc	r25, r1
 8b6:	e9 f1       	breq	.+122    	; 0x932 <DIO_enuTogPin+0xe4>
 8b8:	4f c0       	rjmp	.+158    	; 0x958 <DIO_enuTogPin+0x10a>
			case DIO_PORTA:
				PORTA ^= (1 << Copy_u8PinID);
 8ba:	ab e3       	ldi	r26, 0x3B	; 59
 8bc:	b0 e0       	ldi	r27, 0x00	; 0
 8be:	eb e3       	ldi	r30, 0x3B	; 59
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	80 81       	ld	r24, Z
 8c4:	48 2f       	mov	r20, r24
 8c6:	8b 81       	ldd	r24, Y+3	; 0x03
 8c8:	28 2f       	mov	r18, r24
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	02 2e       	mov	r0, r18
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <DIO_enuTogPin+0x8a>
 8d4:	88 0f       	add	r24, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	0a 94       	dec	r0
 8da:	e2 f7       	brpl	.-8      	; 0x8d4 <DIO_enuTogPin+0x86>
 8dc:	84 27       	eor	r24, r20
 8de:	8c 93       	st	X, r24
 8e0:	3b c0       	rjmp	.+118    	; 0x958 <DIO_enuTogPin+0x10a>
				break;
			case DIO_PORTB:
				PORTB ^= (1 << Copy_u8PinID);
 8e2:	a8 e3       	ldi	r26, 0x38	; 56
 8e4:	b0 e0       	ldi	r27, 0x00	; 0
 8e6:	e8 e3       	ldi	r30, 0x38	; 56
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	80 81       	ld	r24, Z
 8ec:	48 2f       	mov	r20, r24
 8ee:	8b 81       	ldd	r24, Y+3	; 0x03
 8f0:	28 2f       	mov	r18, r24
 8f2:	30 e0       	ldi	r19, 0x00	; 0
 8f4:	81 e0       	ldi	r24, 0x01	; 1
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	02 2e       	mov	r0, r18
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <DIO_enuTogPin+0xb2>
 8fc:	88 0f       	add	r24, r24
 8fe:	99 1f       	adc	r25, r25
 900:	0a 94       	dec	r0
 902:	e2 f7       	brpl	.-8      	; 0x8fc <DIO_enuTogPin+0xae>
 904:	84 27       	eor	r24, r20
 906:	8c 93       	st	X, r24
 908:	27 c0       	rjmp	.+78     	; 0x958 <DIO_enuTogPin+0x10a>
				break;
			case DIO_PORTC:
				PORTC ^= (1 << Copy_u8PinID);
 90a:	a5 e3       	ldi	r26, 0x35	; 53
 90c:	b0 e0       	ldi	r27, 0x00	; 0
 90e:	e5 e3       	ldi	r30, 0x35	; 53
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	80 81       	ld	r24, Z
 914:	48 2f       	mov	r20, r24
 916:	8b 81       	ldd	r24, Y+3	; 0x03
 918:	28 2f       	mov	r18, r24
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	02 2e       	mov	r0, r18
 922:	02 c0       	rjmp	.+4      	; 0x928 <DIO_enuTogPin+0xda>
 924:	88 0f       	add	r24, r24
 926:	99 1f       	adc	r25, r25
 928:	0a 94       	dec	r0
 92a:	e2 f7       	brpl	.-8      	; 0x924 <DIO_enuTogPin+0xd6>
 92c:	84 27       	eor	r24, r20
 92e:	8c 93       	st	X, r24
 930:	13 c0       	rjmp	.+38     	; 0x958 <DIO_enuTogPin+0x10a>
				break;
			case DIO_PORTD:
				PORTD ^= (1 << Copy_u8PinID);
 932:	a2 e3       	ldi	r26, 0x32	; 50
 934:	b0 e0       	ldi	r27, 0x00	; 0
 936:	e2 e3       	ldi	r30, 0x32	; 50
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	80 81       	ld	r24, Z
 93c:	48 2f       	mov	r20, r24
 93e:	8b 81       	ldd	r24, Y+3	; 0x03
 940:	28 2f       	mov	r18, r24
 942:	30 e0       	ldi	r19, 0x00	; 0
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	02 2e       	mov	r0, r18
 94a:	02 c0       	rjmp	.+4      	; 0x950 <DIO_enuTogPin+0x102>
 94c:	88 0f       	add	r24, r24
 94e:	99 1f       	adc	r25, r25
 950:	0a 94       	dec	r0
 952:	e2 f7       	brpl	.-8      	; 0x94c <DIO_enuTogPin+0xfe>
 954:	84 27       	eor	r24, r20
 956:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
 958:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
 95a:	89 81       	ldd	r24, Y+1	; 0x01

}
 95c:	0f 90       	pop	r0
 95e:	0f 90       	pop	r0
 960:	0f 90       	pop	r0
 962:	0f 90       	pop	r0
 964:	0f 90       	pop	r0
 966:	cf 91       	pop	r28
 968:	df 91       	pop	r29
 96a:	08 95       	ret

0000096c <main>:
#include "errorStates.h";


#include "DIO_init.h"

int main(void){
 96c:	df 93       	push	r29
 96e:	cf 93       	push	r28
 970:	cd b7       	in	r28, 0x3d	; 61
 972:	de b7       	in	r29, 0x3e	; 62

	DIO_enuInit();
 974:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_enuInit>
 978:	ff cf       	rjmp	.-2      	; 0x978 <main+0xc>

0000097a <_exit>:
 97a:	f8 94       	cli

0000097c <__stop_program>:
 97c:	ff cf       	rjmp	.-2      	; 0x97c <__stop_program>
