
LM35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000244c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000244c  000024e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800068  00800068  000024e8  2**0
                  ALLOC
  3 .stab         00002298  00000000  00000000  000024e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cf0  00000000  00000000  00004780  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000055b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005720  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007369  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008254  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009004  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009164  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000093f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009bbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ac 36       	cpi	r26, 0x6C	; 108
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec e4       	ldi	r30, 0x4C	; 76
      78:	f4 e2       	ldi	r31, 0x24	; 36
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 31 11 	call	0x2262	; 0x2262 <main>
      8a:	0c 94 24 12 	jmp	0x2448	; 0x2448 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 15 12 	jmp	0x242a	; 0x242a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 15 12 	jmp	0x242a	; 0x242a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 15 12 	jmp	0x242a	; 0x242a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 15 12 	jmp	0x242a	; 0x242a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 15 12 	jmp	0x242a	; 0x242a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_enuInit>:
static void (*ADC_pfunISRFun)(void*) = NULL;
static void * ADC_pvidISRParameter = NULL;


ES ADC_enuInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	89 83       	std	Y+1, r24	; 0x01


	//Enable ADEN:
	ADCSRA |= (1<<7);
     b54:	a6 e2       	ldi	r26, 0x26	; 38
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	e6 e2       	ldi	r30, 0x26	; 38
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	80 68       	ori	r24, 0x80	; 128
     b60:	8c 93       	st	X, r24
#elif ADC_PRES == PRES_64
	ADCSRA &= ~(1<<0);
	ADCSRA |= (1<<1);
	ADCSRA |= (1<<2);
#elif ADC_PRES == PRES_128
	ADCSRA |= (1<<0);
     b62:	a6 e2       	ldi	r26, 0x26	; 38
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e6 e2       	ldi	r30, 0x26	; 38
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	81 60       	ori	r24, 0x01	; 1
     b6e:	8c 93       	st	X, r24
	ADCSRA |= (1<<1);
     b70:	a6 e2       	ldi	r26, 0x26	; 38
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	e6 e2       	ldi	r30, 0x26	; 38
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	82 60       	ori	r24, 0x02	; 2
     b7c:	8c 93       	st	X, r24
	ADCSRA |= (1<<2);
     b7e:	a6 e2       	ldi	r26, 0x26	; 38
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e6 e2       	ldi	r30, 0x26	; 38
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	84 60       	ori	r24, 0x04	; 4
     b8a:	8c 93       	st	X, r24
	ADMUX &= ~(1<<6);
#elif ADC_REF_VOLT == INTERNAL
	ADMUX |= (1<<7);
	ADMUX |= (1<<6);
#elif ADC_REF_VOLT == AVCC_REF
	ADMUX &=~(1<<7);
     b8c:	a7 e2       	ldi	r26, 0x27	; 39
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	e7 e2       	ldi	r30, 0x27	; 39
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	8f 77       	andi	r24, 0x7F	; 127
     b98:	8c 93       	st	X, r24
	ADMUX |= (1<<6);
     b9a:	a7 e2       	ldi	r26, 0x27	; 39
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	e7 e2       	ldi	r30, 0x27	; 39
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	80 64       	ori	r24, 0x40	; 64
     ba6:	8c 93       	st	X, r24


#if ADC_ADJ == LEFT_ADJ
	ADMUX |= (1<<5);
#elif ADC_ADJ == RIGHT_ADJ
	ADMUX &=~(1<<5);
     ba8:	a7 e2       	ldi	r26, 0x27	; 39
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	e7 e2       	ldi	r30, 0x27	; 39
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	8f 7d       	andi	r24, 0xDF	; 223
     bb4:	8c 93       	st	X, r24
#else
#error" ADC ADJUSTMENT is Wrong "
#endif

	return Local_enuErrorState;
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
}
     bb8:	0f 90       	pop	r0
     bba:	cf 91       	pop	r28
     bbc:	df 91       	pop	r29
     bbe:	08 95       	ret

00000bc0 <ADC_enuStartConversion>:

ES ADC_enuStartConversion(void)
{
     bc0:	df 93       	push	r29
     bc2:	cf 93       	push	r28
     bc4:	0f 92       	push	r0
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA |= (1<<6);
     bce:	a6 e2       	ldi	r26, 0x26	; 38
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e6 e2       	ldi	r30, 0x26	; 38
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	80 64       	ori	r24, 0x40	; 64
     bda:	8c 93       	st	X, r24

	return Local_enuErrorState;
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
}
     bde:	0f 90       	pop	r0
     be0:	cf 91       	pop	r28
     be2:	df 91       	pop	r29
     be4:	08 95       	ret

00000be6 <ADC_enuPollingSystem>:

ES ADC_enuPollingSystem(void)
{
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	0f 92       	push	r0
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	89 83       	std	Y+1, r24	; 0x01

	while (((ADCSRA >> 4)&1) == 0);
     bf4:	e6 e2       	ldi	r30, 0x26	; 38
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	82 95       	swap	r24
     bfc:	8f 70       	andi	r24, 0x0F	; 15
     bfe:	88 2f       	mov	r24, r24
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	81 70       	andi	r24, 0x01	; 1
     c04:	90 70       	andi	r25, 0x00	; 0
     c06:	00 97       	sbiw	r24, 0x00	; 0
     c08:	a9 f3       	breq	.-22     	; 0xbf4 <ADC_enuPollingSystem+0xe>
	ADCSRA |= (1<<4);
     c0a:	a6 e2       	ldi	r26, 0x26	; 38
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e6 e2       	ldi	r30, 0x26	; 38
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	80 61       	ori	r24, 0x10	; 16
     c16:	8c 93       	st	X, r24

	return Local_enuErrorState;
     c18:	89 81       	ldd	r24, Y+1	; 0x01
}
     c1a:	0f 90       	pop	r0
     c1c:	cf 91       	pop	r28
     c1e:	df 91       	pop	r29
     c20:	08 95       	ret

00000c22 <ADC_enuReadHighValue>:

ES ADC_enuReadHighValue(u8 * Copy_pu8Value)
{
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	00 d0       	rcall	.+0      	; 0xc28 <ADC_enuReadHighValue+0x6>
     c28:	0f 92       	push	r0
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	9b 83       	std	Y+3, r25	; 0x03
     c30:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	89 83       	std	Y+1, r24	; 0x01

#if ADC_ADJ == LEFT_ADJ
	*Copy_pu8Value = ADCH;

#elif ADC_ADJ == RIGHT_ADJ
	*Copy_pu8Value  = (ADCL >> 2);
     c36:	e4 e2       	ldi	r30, 0x24	; 36
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	86 95       	lsr	r24
     c3e:	86 95       	lsr	r24
     c40:	ea 81       	ldd	r30, Y+2	; 0x02
     c42:	fb 81       	ldd	r31, Y+3	; 0x03
     c44:	80 83       	st	Z, r24
	*Copy_pu8Value |= (ADCH << 6);
     c46:	ea 81       	ldd	r30, Y+2	; 0x02
     c48:	fb 81       	ldd	r31, Y+3	; 0x03
     c4a:	80 81       	ld	r24, Z
     c4c:	28 2f       	mov	r18, r24
     c4e:	e5 e2       	ldi	r30, 0x25	; 37
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	88 2f       	mov	r24, r24
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	00 24       	eor	r0, r0
     c5a:	96 95       	lsr	r25
     c5c:	87 95       	ror	r24
     c5e:	07 94       	ror	r0
     c60:	96 95       	lsr	r25
     c62:	87 95       	ror	r24
     c64:	07 94       	ror	r0
     c66:	98 2f       	mov	r25, r24
     c68:	80 2d       	mov	r24, r0
     c6a:	82 2b       	or	r24, r18
     c6c:	ea 81       	ldd	r30, Y+2	; 0x02
     c6e:	fb 81       	ldd	r31, Y+3	; 0x03
     c70:	80 83       	st	Z, r24
#else
#error" ADC ADJUSTMENT is Wrong "
#endif

	return Local_enuErrorState;
     c72:	89 81       	ldd	r24, Y+1	; 0x01
}
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	cf 91       	pop	r28
     c7c:	df 91       	pop	r29
     c7e:	08 95       	ret

00000c80 <ADC_enuRead>:

ES ADC_enuRead(s16 * Copy_ps16Value)
{
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	00 d0       	rcall	.+0      	; 0xc86 <ADC_enuRead+0x6>
     c86:	0f 92       	push	r0
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	9b 83       	std	Y+3, r25	; 0x03
     c8e:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	89 83       	std	Y+1, r24	; 0x01
#if ADC_ADJ == LEFT_ADJ
	*Copy_pu16Value  = (ADCL >> 6);
	*Copy_pu16Value |= (ADCH << 2);

#elif ADC_ADJ == RIGHT_ADJ
	*Copy_ps16Value  = ADCL;
     c94:	e4 e2       	ldi	r30, 0x24	; 36
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	88 2f       	mov	r24, r24
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	ea 81       	ldd	r30, Y+2	; 0x02
     ca0:	fb 81       	ldd	r31, Y+3	; 0x03
     ca2:	91 83       	std	Z+1, r25	; 0x01
     ca4:	80 83       	st	Z, r24
	*Copy_ps16Value |= ((s16)ADCH << 8);
     ca6:	ea 81       	ldd	r30, Y+2	; 0x02
     ca8:	fb 81       	ldd	r31, Y+3	; 0x03
     caa:	20 81       	ld	r18, Z
     cac:	31 81       	ldd	r19, Z+1	; 0x01
     cae:	e5 e2       	ldi	r30, 0x25	; 37
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	88 2f       	mov	r24, r24
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	98 2f       	mov	r25, r24
     cba:	88 27       	eor	r24, r24
     cbc:	82 2b       	or	r24, r18
     cbe:	93 2b       	or	r25, r19
     cc0:	ea 81       	ldd	r30, Y+2	; 0x02
     cc2:	fb 81       	ldd	r31, Y+3	; 0x03
     cc4:	91 83       	std	Z+1, r25	; 0x01
     cc6:	80 83       	st	Z, r24
#else
#error" ADC ADJUSTMENT is Wrong "
#endif

	return Local_enuErrorState;
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
}
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <ADC_enuCallBack>:

ES ADC_enuCallBack(void(*Copy_pfunAppFun)(void*) , void * Copy_pvidAppParameter)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <ADC_enuCallBack+0x6>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <ADC_enuCallBack+0x8>
     cde:	0f 92       	push	r0
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	9b 83       	std	Y+3, r25	; 0x03
     ce6:	8a 83       	std	Y+2, r24	; 0x02
     ce8:	7d 83       	std	Y+5, r23	; 0x05
     cea:	6c 83       	std	Y+4, r22	; 0x04
	ES Local_enuErrorState = ES_NOK;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pfunAppFun != NULL)
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	9b 81       	ldd	r25, Y+3	; 0x03
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	61 f0       	breq	.+24     	; 0xd10 <ADC_enuCallBack+0x3a>
	{
		ADC_pfunISRFun = Copy_pfunAppFun;
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	9b 81       	ldd	r25, Y+3	; 0x03
     cfc:	90 93 69 00 	sts	0x0069, r25
     d00:	80 93 68 00 	sts	0x0068, r24
		ADC_pvidISRParameter = Copy_pvidAppParameter;
     d04:	8c 81       	ldd	r24, Y+4	; 0x04
     d06:	9d 81       	ldd	r25, Y+5	; 0x05
     d08:	90 93 6b 00 	sts	0x006B, r25
     d0c:	80 93 6a 00 	sts	0x006A, r24
	}

	return Local_enuErrorState;
     d10:	89 81       	ldd	r24, Y+1	; 0x01
}
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	cf 91       	pop	r28
     d1e:	df 91       	pop	r29
     d20:	08 95       	ret

00000d22 <ADC_enuSelectChannel>:

ES ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	00 d0       	rcall	.+0      	; 0xd28 <ADC_enuSelectChannel+0x6>
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	89 83       	std	Y+1, r24	; 0x01

	ADMUX &= ~ 0x1F;
     d32:	a7 e2       	ldi	r26, 0x27	; 39
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e7 e2       	ldi	r30, 0x27	; 39
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	80 7e       	andi	r24, 0xE0	; 224
     d3e:	8c 93       	st	X, r24
	ADMUX |= Copy_u8ChannelID;
     d40:	a7 e2       	ldi	r26, 0x27	; 39
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e7 e2       	ldi	r30, 0x27	; 39
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	90 81       	ld	r25, Z
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	89 2b       	or	r24, r25
     d4e:	8c 93       	st	X, r24

	return Local_enuErrorState;
     d50:	89 81       	ldd	r24, Y+1	; 0x01
}
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <ADC_enuEnableTriggeringMode>:

ES ADC_enuEnableTriggeringMode(u8 Copy_u8TriggeringSource)
{
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	00 d0       	rcall	.+0      	; 0xd62 <ADC_enuEnableTriggeringMode+0x6>
     d62:	00 d0       	rcall	.+0      	; 0xd64 <ADC_enuEnableTriggeringMode+0x8>
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA &=~(1<<5);
     d6e:	a6 e2       	ldi	r26, 0x26	; 38
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e6 e2       	ldi	r30, 0x26	; 38
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	8f 7d       	andi	r24, 0xDF	; 223
     d7a:	8c 93       	st	X, r24

	switch(Copy_u8TriggeringSource)
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	3c 83       	std	Y+4, r19	; 0x04
     d84:	2b 83       	std	Y+3, r18	; 0x03
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	9c 81       	ldd	r25, Y+4	; 0x04
     d8a:	80 31       	cpi	r24, 0x10	; 16
     d8c:	91 05       	cpc	r25, r1
     d8e:	d9 f0       	breq	.+54     	; 0xdc6 <ADC_enuEnableTriggeringMode+0x6a>
     d90:	2b 81       	ldd	r18, Y+3	; 0x03
     d92:	3c 81       	ldd	r19, Y+4	; 0x04
     d94:	22 31       	cpi	r18, 0x12	; 18
     d96:	31 05       	cpc	r19, r1
     d98:	59 f5       	brne	.+86     	; 0xdf0 <ADC_enuEnableTriggeringMode+0x94>
	{
	case FREE_RUNNING:
		SFIOR &=~(1<<5);
     d9a:	a0 e5       	ldi	r26, 0x50	; 80
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e0 e5       	ldi	r30, 0x50	; 80
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	8f 7d       	andi	r24, 0xDF	; 223
     da6:	8c 93       	st	X, r24
		SFIOR &=~(1<<6);
     da8:	a0 e5       	ldi	r26, 0x50	; 80
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e0 e5       	ldi	r30, 0x50	; 80
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	8f 7b       	andi	r24, 0xBF	; 191
     db4:	8c 93       	st	X, r24
		SFIOR &=~(1<<7);
     db6:	a0 e5       	ldi	r26, 0x50	; 80
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e0 e5       	ldi	r30, 0x50	; 80
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	8f 77       	andi	r24, 0x7F	; 127
     dc2:	8c 93       	st	X, r24
     dc4:	15 c0       	rjmp	.+42     	; 0xdf0 <ADC_enuEnableTriggeringMode+0x94>
		break;
	case EXTI0_TRIG:
		SFIOR &=~(1<<5);
     dc6:	a0 e5       	ldi	r26, 0x50	; 80
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e0 e5       	ldi	r30, 0x50	; 80
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	8f 7d       	andi	r24, 0xDF	; 223
     dd2:	8c 93       	st	X, r24
		SFIOR |= (1<<6);
     dd4:	a0 e5       	ldi	r26, 0x50	; 80
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e0 e5       	ldi	r30, 0x50	; 80
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	80 64       	ori	r24, 0x40	; 64
     de0:	8c 93       	st	X, r24
		SFIOR &=~(1<<7);
     de2:	a0 e5       	ldi	r26, 0x50	; 80
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e0 e5       	ldi	r30, 0x50	; 80
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	8f 77       	andi	r24, 0x7F	; 127
     dee:	8c 93       	st	X, r24
		break;
	}

	ADCSRA |=(1<<5);
     df0:	a6 e2       	ldi	r26, 0x26	; 38
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e6 e2       	ldi	r30, 0x26	; 38
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	80 62       	ori	r24, 0x20	; 32
     dfc:	8c 93       	st	X, r24

	return Local_enuErrorState;
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
}
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <ADC_enuDisableTriggeringMode>:


ES ADC_enuDisableTriggeringMode(void)
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	0f 92       	push	r0
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA &=~(1<<5);
     e1c:	a6 e2       	ldi	r26, 0x26	; 38
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e6 e2       	ldi	r30, 0x26	; 38
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	8f 7d       	andi	r24, 0xDF	; 223
     e28:	8c 93       	st	X, r24

	return Local_enuErrorState;
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e2c:	0f 90       	pop	r0
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <ADC_enuEnableInterruptMode>:

ES ADC_enuEnableInterruptMode(void)
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	0f 92       	push	r0
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA |= (1<<3);
     e42:	a6 e2       	ldi	r26, 0x26	; 38
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e6 e2       	ldi	r30, 0x26	; 38
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	88 60       	ori	r24, 0x08	; 8
     e4e:	8c 93       	st	X, r24

	return Local_enuErrorState;
     e50:	89 81       	ldd	r24, Y+1	; 0x01
}
     e52:	0f 90       	pop	r0
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <__vector_16>:

ISR(VECT_ADC)
{
     e5a:	1f 92       	push	r1
     e5c:	0f 92       	push	r0
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	0f 92       	push	r0
     e62:	11 24       	eor	r1, r1
     e64:	2f 93       	push	r18
     e66:	3f 93       	push	r19
     e68:	4f 93       	push	r20
     e6a:	5f 93       	push	r21
     e6c:	6f 93       	push	r22
     e6e:	7f 93       	push	r23
     e70:	8f 93       	push	r24
     e72:	9f 93       	push	r25
     e74:	af 93       	push	r26
     e76:	bf 93       	push	r27
     e78:	ef 93       	push	r30
     e7a:	ff 93       	push	r31
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
	if (ADC_pfunISRFun != NULL)
     e84:	80 91 68 00 	lds	r24, 0x0068
     e88:	90 91 69 00 	lds	r25, 0x0069
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	49 f0       	breq	.+18     	; 0xea2 <__vector_16+0x48>
	{
		ADC_pfunISRFun(ADC_pvidISRParameter);
     e90:	e0 91 68 00 	lds	r30, 0x0068
     e94:	f0 91 69 00 	lds	r31, 0x0069
     e98:	80 91 6a 00 	lds	r24, 0x006A
     e9c:	90 91 6b 00 	lds	r25, 0x006B
     ea0:	09 95       	icall
	}
}
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	ff 91       	pop	r31
     ea8:	ef 91       	pop	r30
     eaa:	bf 91       	pop	r27
     eac:	af 91       	pop	r26
     eae:	9f 91       	pop	r25
     eb0:	8f 91       	pop	r24
     eb2:	7f 91       	pop	r23
     eb4:	6f 91       	pop	r22
     eb6:	5f 91       	pop	r21
     eb8:	4f 91       	pop	r20
     eba:	3f 91       	pop	r19
     ebc:	2f 91       	pop	r18
     ebe:	0f 90       	pop	r0
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	0f 90       	pop	r0
     ec4:	1f 90       	pop	r1
     ec6:	18 95       	reti

00000ec8 <DIO_enuInit>:
#include "DIO_config.h"



ES DIO_enuInit(void)
{
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	0f 92       	push	r0
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	89 83       	std	Y+1, r24	; 0x01

	//Initialize Direction Pins
	DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
     ed6:	ea e3       	ldi	r30, 0x3A	; 58
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
     ede:	e7 e3       	ldi	r30, 0x37	; 55
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	8f ef       	ldi	r24, 0xFF	; 255
     ee4:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
     ee6:	e4 e3       	ldi	r30, 0x34	; 52
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	8f ef       	ldi	r24, 0xFF	; 255
     eec:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
     eee:	e1 e3       	ldi	r30, 0x31	; 49
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
     ef4:	80 83       	st	Z, r24

	//Initialize Port Pins
	PORTA = CONC(PA_PIN7_Val, PA_PIN6_Val, PA_PIN5_Val, PA_PIN4_Val, PA_PIN3_Val, PA_PIN2_Val, PA_PIN1_Val, PA_PIN0_Val);
     ef6:	eb e3       	ldi	r30, 0x3B	; 59
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	8f ef       	ldi	r24, 0xFF	; 255
     efc:	80 83       	st	Z, r24
	PORTB = CONC(PB_PIN7_Val, PB_PIN6_Val, PB_PIN5_Val, PB_PIN4_Val, PB_PIN3_Val, PB_PIN2_Val, PB_PIN1_Val, PB_PIN0_Val);
     efe:	e8 e3       	ldi	r30, 0x38	; 56
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	80 83       	st	Z, r24
	PORTC = CONC(PC_PIN7_Val, PC_PIN6_Val, PC_PIN5_Val, PC_PIN4_Val, PC_PIN3_Val, PC_PIN2_Val, PC_PIN1_Val, PC_PIN0_Val);
     f06:	e5 e3       	ldi	r30, 0x35	; 53
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
     f0c:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_Val, PD_PIN6_Val, PD_PIN5_Val, PD_PIN4_Val, PD_PIN3_Val, PD_PIN2_Val, PD_PIN1_Val, PD_PIN0_Val);
     f0e:	e2 e3       	ldi	r30, 0x32	; 50
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	8f ef       	ldi	r24, 0xFF	; 255
     f14:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
     f16:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
     f18:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1a:	0f 90       	pop	r0
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <DIO_enuSetPortDirection>:


ES DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	00 d0       	rcall	.+0      	; 0xf28 <DIO_enuSetPortDirection+0x6>
     f28:	00 d0       	rcall	.+0      	; 0xf2a <DIO_enuSetPortDirection+0x8>
     f2a:	0f 92       	push	r0
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	8a 83       	std	Y+2, r24	; 0x02
     f32:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	84 30       	cpi	r24, 0x04	; 4
     f3c:	18 f0       	brcs	.+6      	; 0xf44 <DIO_enuSetPortDirection+0x22>
     f3e:	83 e0       	ldi	r24, 0x03	; 3
     f40:	89 83       	std	Y+1, r24	; 0x01
     f42:	33 c0       	rjmp	.+102    	; 0xfaa <DIO_enuSetPortDirection+0x88>
	else{
		switch(Copy_u8PortID){
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	3d 83       	std	Y+5, r19	; 0x05
     f4c:	2c 83       	std	Y+4, r18	; 0x04
     f4e:	8c 81       	ldd	r24, Y+4	; 0x04
     f50:	9d 81       	ldd	r25, Y+5	; 0x05
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	91 05       	cpc	r25, r1
     f56:	d1 f0       	breq	.+52     	; 0xf8c <DIO_enuSetPortDirection+0x6a>
     f58:	2c 81       	ldd	r18, Y+4	; 0x04
     f5a:	3d 81       	ldd	r19, Y+5	; 0x05
     f5c:	22 30       	cpi	r18, 0x02	; 2
     f5e:	31 05       	cpc	r19, r1
     f60:	2c f4       	brge	.+10     	; 0xf6c <DIO_enuSetPortDirection+0x4a>
     f62:	8c 81       	ldd	r24, Y+4	; 0x04
     f64:	9d 81       	ldd	r25, Y+5	; 0x05
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	61 f0       	breq	.+24     	; 0xf82 <DIO_enuSetPortDirection+0x60>
     f6a:	1e c0       	rjmp	.+60     	; 0xfa8 <DIO_enuSetPortDirection+0x86>
     f6c:	2c 81       	ldd	r18, Y+4	; 0x04
     f6e:	3d 81       	ldd	r19, Y+5	; 0x05
     f70:	22 30       	cpi	r18, 0x02	; 2
     f72:	31 05       	cpc	r19, r1
     f74:	81 f0       	breq	.+32     	; 0xf96 <DIO_enuSetPortDirection+0x74>
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	9d 81       	ldd	r25, Y+5	; 0x05
     f7a:	83 30       	cpi	r24, 0x03	; 3
     f7c:	91 05       	cpc	r25, r1
     f7e:	81 f0       	breq	.+32     	; 0xfa0 <DIO_enuSetPortDirection+0x7e>
     f80:	13 c0       	rjmp	.+38     	; 0xfa8 <DIO_enuSetPortDirection+0x86>
			case DIO_PORTA:
				DDRA = Copy_u8Value;
     f82:	ea e3       	ldi	r30, 0x3A	; 58
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	80 83       	st	Z, r24
     f8a:	0e c0       	rjmp	.+28     	; 0xfa8 <DIO_enuSetPortDirection+0x86>
				break;
			case DIO_PORTB:
				DDRB = Copy_u8Value;
     f8c:	e7 e3       	ldi	r30, 0x37	; 55
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	80 83       	st	Z, r24
     f94:	09 c0       	rjmp	.+18     	; 0xfa8 <DIO_enuSetPortDirection+0x86>
				break;
			case DIO_PORTC:
				DDRC = Copy_u8Value;
     f96:	e4 e3       	ldi	r30, 0x34	; 52
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	80 83       	st	Z, r24
     f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <DIO_enuSetPortDirection+0x86>
				break;
			case DIO_PORTD:
				DDRD = Copy_u8Value;
     fa0:	e1 e3       	ldi	r30, 0x31	; 49
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
     fa8:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
     faa:	89 81       	ldd	r24, Y+1	; 0x01
}
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <DIO_enuSetPortValue>:

ES DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <DIO_enuSetPortValue+0x6>
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <DIO_enuSetPortValue+0x8>
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	8a 83       	std	Y+2, r24	; 0x02
     fcc:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	84 30       	cpi	r24, 0x04	; 4
     fd6:	18 f0       	brcs	.+6      	; 0xfde <DIO_enuSetPortValue+0x22>
     fd8:	83 e0       	ldi	r24, 0x03	; 3
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	33 c0       	rjmp	.+102    	; 0x1044 <DIO_enuSetPortValue+0x88>
	else{
		switch(Copy_u8PortID){
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	3d 83       	std	Y+5, r19	; 0x05
     fe6:	2c 83       	std	Y+4, r18	; 0x04
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	9d 81       	ldd	r25, Y+5	; 0x05
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	91 05       	cpc	r25, r1
     ff0:	d1 f0       	breq	.+52     	; 0x1026 <DIO_enuSetPortValue+0x6a>
     ff2:	2c 81       	ldd	r18, Y+4	; 0x04
     ff4:	3d 81       	ldd	r19, Y+5	; 0x05
     ff6:	22 30       	cpi	r18, 0x02	; 2
     ff8:	31 05       	cpc	r19, r1
     ffa:	2c f4       	brge	.+10     	; 0x1006 <DIO_enuSetPortValue+0x4a>
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	61 f0       	breq	.+24     	; 0x101c <DIO_enuSetPortValue+0x60>
    1004:	1e c0       	rjmp	.+60     	; 0x1042 <DIO_enuSetPortValue+0x86>
    1006:	2c 81       	ldd	r18, Y+4	; 0x04
    1008:	3d 81       	ldd	r19, Y+5	; 0x05
    100a:	22 30       	cpi	r18, 0x02	; 2
    100c:	31 05       	cpc	r19, r1
    100e:	81 f0       	breq	.+32     	; 0x1030 <DIO_enuSetPortValue+0x74>
    1010:	8c 81       	ldd	r24, Y+4	; 0x04
    1012:	9d 81       	ldd	r25, Y+5	; 0x05
    1014:	83 30       	cpi	r24, 0x03	; 3
    1016:	91 05       	cpc	r25, r1
    1018:	81 f0       	breq	.+32     	; 0x103a <DIO_enuSetPortValue+0x7e>
    101a:	13 c0       	rjmp	.+38     	; 0x1042 <DIO_enuSetPortValue+0x86>
			case DIO_PORTA:
				PORTA = Copy_u8Value;
    101c:	eb e3       	ldi	r30, 0x3B	; 59
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	80 83       	st	Z, r24
    1024:	0e c0       	rjmp	.+28     	; 0x1042 <DIO_enuSetPortValue+0x86>
				break;
			case DIO_PORTB:
				PORTB = Copy_u8Value;
    1026:	e8 e3       	ldi	r30, 0x38	; 56
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	80 83       	st	Z, r24
    102e:	09 c0       	rjmp	.+18     	; 0x1042 <DIO_enuSetPortValue+0x86>
				break;
			case DIO_PORTC:
				PORTC = Copy_u8Value;
    1030:	e5 e3       	ldi	r30, 0x35	; 53
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	80 83       	st	Z, r24
    1038:	04 c0       	rjmp	.+8      	; 0x1042 <DIO_enuSetPortValue+0x86>
				break;
			case DIO_PORTD:
				PORTD = Copy_u8Value;
    103a:	e2 e3       	ldi	r30, 0x32	; 50
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    1042:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
    1044:	89 81       	ldd	r24, Y+1	; 0x01
}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <DIO_enuTogPort>:

ES DIO_enuTogPort(u8 Copy_u8PortID)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <DIO_enuTogPort+0x6>
    105c:	00 d0       	rcall	.+0      	; 0x105e <DIO_enuTogPort+0x8>
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	84 30       	cpi	r24, 0x04	; 4
    106c:	18 f0       	brcs	.+6      	; 0x1074 <DIO_enuTogPort+0x1e>
    106e:	83 e0       	ldi	r24, 0x03	; 3
    1070:	89 83       	std	Y+1, r24	; 0x01
    1072:	3f c0       	rjmp	.+126    	; 0x10f2 <DIO_enuTogPort+0x9c>
	else{
		switch(Copy_u8PortID){
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	3c 83       	std	Y+4, r19	; 0x04
    107c:	2b 83       	std	Y+3, r18	; 0x03
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	91 05       	cpc	r25, r1
    1086:	e9 f0       	breq	.+58     	; 0x10c2 <DIO_enuTogPort+0x6c>
    1088:	2b 81       	ldd	r18, Y+3	; 0x03
    108a:	3c 81       	ldd	r19, Y+4	; 0x04
    108c:	22 30       	cpi	r18, 0x02	; 2
    108e:	31 05       	cpc	r19, r1
    1090:	2c f4       	brge	.+10     	; 0x109c <DIO_enuTogPort+0x46>
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	9c 81       	ldd	r25, Y+4	; 0x04
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	61 f0       	breq	.+24     	; 0x10b2 <DIO_enuTogPort+0x5c>
    109a:	2a c0       	rjmp	.+84     	; 0x10f0 <DIO_enuTogPort+0x9a>
    109c:	2b 81       	ldd	r18, Y+3	; 0x03
    109e:	3c 81       	ldd	r19, Y+4	; 0x04
    10a0:	22 30       	cpi	r18, 0x02	; 2
    10a2:	31 05       	cpc	r19, r1
    10a4:	b1 f0       	breq	.+44     	; 0x10d2 <DIO_enuTogPort+0x7c>
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	9c 81       	ldd	r25, Y+4	; 0x04
    10aa:	83 30       	cpi	r24, 0x03	; 3
    10ac:	91 05       	cpc	r25, r1
    10ae:	c9 f0       	breq	.+50     	; 0x10e2 <DIO_enuTogPort+0x8c>
    10b0:	1f c0       	rjmp	.+62     	; 0x10f0 <DIO_enuTogPort+0x9a>
			case DIO_PORTA:
				PORTA = ~PORTA;
    10b2:	ab e3       	ldi	r26, 0x3B	; 59
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	eb e3       	ldi	r30, 0x3B	; 59
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	80 95       	com	r24
    10be:	8c 93       	st	X, r24
    10c0:	17 c0       	rjmp	.+46     	; 0x10f0 <DIO_enuTogPort+0x9a>
				break;
			case DIO_PORTB:
				PORTB = ~PORTB;
    10c2:	a8 e3       	ldi	r26, 0x38	; 56
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e8 e3       	ldi	r30, 0x38	; 56
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	80 95       	com	r24
    10ce:	8c 93       	st	X, r24
    10d0:	0f c0       	rjmp	.+30     	; 0x10f0 <DIO_enuTogPort+0x9a>
				break;
			case DIO_PORTC:
				PORTC = ~PORTC;
    10d2:	a5 e3       	ldi	r26, 0x35	; 53
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e5 e3       	ldi	r30, 0x35	; 53
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	80 95       	com	r24
    10de:	8c 93       	st	X, r24
    10e0:	07 c0       	rjmp	.+14     	; 0x10f0 <DIO_enuTogPort+0x9a>
				break;
			case DIO_PORTD:
				PORTD = ~PORTD;
    10e2:	a2 e3       	ldi	r26, 0x32	; 50
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e2 e3       	ldi	r30, 0x32	; 50
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	80 95       	com	r24
    10ee:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    10f0:	19 82       	std	Y+1, r1	; 0x01
	}


	return Local_enuErrorState;
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <DIO_enuGetPort>:

ES DIO_enuGetPort(u8 Copy_u8PortID, u8* Copy_pu8Value)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	00 d0       	rcall	.+0      	; 0x1108 <DIO_enuGetPort+0x6>
    1108:	00 d0       	rcall	.+0      	; 0x110a <DIO_enuGetPort+0x8>
    110a:	00 d0       	rcall	.+0      	; 0x110c <DIO_enuGetPort+0xa>
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	8a 83       	std	Y+2, r24	; 0x02
    1112:	7c 83       	std	Y+4, r23	; 0x04
    1114:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pu8Value == NULL) Local_enuErrorState = ES_NULL_POINTER;
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	9c 81       	ldd	r25, Y+4	; 0x04
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	19 f4       	brne	.+6      	; 0x1128 <DIO_enuGetPort+0x26>
    1122:	82 e0       	ldi	r24, 0x02	; 2
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	41 c0       	rjmp	.+130    	; 0x11aa <DIO_enuGetPort+0xa8>
	else if (Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	84 30       	cpi	r24, 0x04	; 4
    112c:	18 f0       	brcs	.+6      	; 0x1134 <DIO_enuGetPort+0x32>
    112e:	83 e0       	ldi	r24, 0x03	; 3
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	3b c0       	rjmp	.+118    	; 0x11aa <DIO_enuGetPort+0xa8>
	else{
		switch(Copy_u8PortID){
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	3e 83       	std	Y+6, r19	; 0x06
    113c:	2d 83       	std	Y+5, r18	; 0x05
    113e:	8d 81       	ldd	r24, Y+5	; 0x05
    1140:	9e 81       	ldd	r25, Y+6	; 0x06
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	91 05       	cpc	r25, r1
    1146:	e1 f0       	breq	.+56     	; 0x1180 <DIO_enuGetPort+0x7e>
    1148:	2d 81       	ldd	r18, Y+5	; 0x05
    114a:	3e 81       	ldd	r19, Y+6	; 0x06
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	2c f4       	brge	.+10     	; 0x115c <DIO_enuGetPort+0x5a>
    1152:	8d 81       	ldd	r24, Y+5	; 0x05
    1154:	9e 81       	ldd	r25, Y+6	; 0x06
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	61 f0       	breq	.+24     	; 0x1172 <DIO_enuGetPort+0x70>
    115a:	26 c0       	rjmp	.+76     	; 0x11a8 <DIO_enuGetPort+0xa6>
    115c:	2d 81       	ldd	r18, Y+5	; 0x05
    115e:	3e 81       	ldd	r19, Y+6	; 0x06
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	a1 f0       	breq	.+40     	; 0x118e <DIO_enuGetPort+0x8c>
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	83 30       	cpi	r24, 0x03	; 3
    116c:	91 05       	cpc	r25, r1
    116e:	b1 f0       	breq	.+44     	; 0x119c <DIO_enuGetPort+0x9a>
    1170:	1b c0       	rjmp	.+54     	; 0x11a8 <DIO_enuGetPort+0xa6>
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    1172:	e9 e3       	ldi	r30, 0x39	; 57
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	eb 81       	ldd	r30, Y+3	; 0x03
    117a:	fc 81       	ldd	r31, Y+4	; 0x04
    117c:	80 83       	st	Z, r24
    117e:	14 c0       	rjmp	.+40     	; 0x11a8 <DIO_enuGetPort+0xa6>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    1180:	e6 e3       	ldi	r30, 0x36	; 54
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	eb 81       	ldd	r30, Y+3	; 0x03
    1188:	fc 81       	ldd	r31, Y+4	; 0x04
    118a:	80 83       	st	Z, r24
    118c:	0d c0       	rjmp	.+26     	; 0x11a8 <DIO_enuGetPort+0xa6>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    118e:	e3 e3       	ldi	r30, 0x33	; 51
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	eb 81       	ldd	r30, Y+3	; 0x03
    1196:	fc 81       	ldd	r31, Y+4	; 0x04
    1198:	80 83       	st	Z, r24
    119a:	06 c0       	rjmp	.+12     	; 0x11a8 <DIO_enuGetPort+0xa6>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    119c:	e0 e3       	ldi	r30, 0x30	; 48
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	eb 81       	ldd	r30, Y+3	; 0x03
    11a4:	fc 81       	ldd	r31, Y+4	; 0x04
    11a6:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    11a8:	19 82       	std	Y+1, r1	; 0x01
	}


	return Local_enuErrorState;
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ac:	26 96       	adiw	r28, 0x06	; 6
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <DIO_enuSetPinDirection>:




ES DIO_enuSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Value)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <DIO_enuSetPinDirection+0x6>
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <DIO_enuSetPinDirection+0x8>
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <DIO_enuSetPinDirection+0xa>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	8a 83       	std	Y+2, r24	; 0x02
    11ce:	6b 83       	std	Y+3, r22	; 0x03
    11d0:	4c 83       	std	Y+4, r20	; 0x04
	ES Local_enuErrorState = ES_NOK;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD || Copy_u8Value > OUTPUT) Local_enuErrorState = ES_OUT_OF_RANGE;
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	84 30       	cpi	r24, 0x04	; 4
    11da:	18 f4       	brcc	.+6      	; 0x11e2 <DIO_enuSetPinDirection+0x24>
    11dc:	8c 81       	ldd	r24, Y+4	; 0x04
    11de:	82 30       	cpi	r24, 0x02	; 2
    11e0:	18 f0       	brcs	.+6      	; 0x11e8 <DIO_enuSetPinDirection+0x2a>
    11e2:	83 e0       	ldi	r24, 0x03	; 3
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	cd c0       	rjmp	.+410    	; 0x1382 <DIO_enuSetPinDirection+0x1c4>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	88 30       	cpi	r24, 0x08	; 8
    11ec:	18 f0       	brcs	.+6      	; 0x11f4 <DIO_enuSetPinDirection+0x36>
    11ee:	83 e0       	ldi	r24, 0x03	; 3
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	c7 c0       	rjmp	.+398    	; 0x1382 <DIO_enuSetPinDirection+0x1c4>
	else {
		switch(Copy_u8PortID){
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	3e 83       	std	Y+6, r19	; 0x06
    11fc:	2d 83       	std	Y+5, r18	; 0x05
    11fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1200:	7e 81       	ldd	r23, Y+6	; 0x06
    1202:	61 30       	cpi	r22, 0x01	; 1
    1204:	71 05       	cpc	r23, r1
    1206:	09 f4       	brne	.+2      	; 0x120a <DIO_enuSetPinDirection+0x4c>
    1208:	41 c0       	rjmp	.+130    	; 0x128c <DIO_enuSetPinDirection+0xce>
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	9e 81       	ldd	r25, Y+6	; 0x06
    120e:	82 30       	cpi	r24, 0x02	; 2
    1210:	91 05       	cpc	r25, r1
    1212:	34 f4       	brge	.+12     	; 0x1220 <DIO_enuSetPinDirection+0x62>
    1214:	2d 81       	ldd	r18, Y+5	; 0x05
    1216:	3e 81       	ldd	r19, Y+6	; 0x06
    1218:	21 15       	cp	r18, r1
    121a:	31 05       	cpc	r19, r1
    121c:	71 f0       	breq	.+28     	; 0x123a <DIO_enuSetPinDirection+0x7c>
    121e:	b0 c0       	rjmp	.+352    	; 0x1380 <DIO_enuSetPinDirection+0x1c2>
    1220:	6d 81       	ldd	r22, Y+5	; 0x05
    1222:	7e 81       	ldd	r23, Y+6	; 0x06
    1224:	62 30       	cpi	r22, 0x02	; 2
    1226:	71 05       	cpc	r23, r1
    1228:	09 f4       	brne	.+2      	; 0x122c <DIO_enuSetPinDirection+0x6e>
    122a:	59 c0       	rjmp	.+178    	; 0x12de <DIO_enuSetPinDirection+0x120>
    122c:	8d 81       	ldd	r24, Y+5	; 0x05
    122e:	9e 81       	ldd	r25, Y+6	; 0x06
    1230:	83 30       	cpi	r24, 0x03	; 3
    1232:	91 05       	cpc	r25, r1
    1234:	09 f4       	brne	.+2      	; 0x1238 <DIO_enuSetPinDirection+0x7a>
    1236:	7c c0       	rjmp	.+248    	; 0x1330 <DIO_enuSetPinDirection+0x172>
    1238:	a3 c0       	rjmp	.+326    	; 0x1380 <DIO_enuSetPinDirection+0x1c2>
			case DIO_PORTA:
				DDRA &= ~(1 << Copy_u8PinID);
    123a:	aa e3       	ldi	r26, 0x3A	; 58
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	ea e3       	ldi	r30, 0x3A	; 58
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <DIO_enuSetPinDirection+0x98>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	2a 95       	dec	r18
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <DIO_enuSetPinDirection+0x94>
    125a:	80 95       	com	r24
    125c:	84 23       	and	r24, r20
    125e:	8c 93       	st	X, r24
				DDRA |= (Copy_u8Value << Copy_u8PinID);
    1260:	aa e3       	ldi	r26, 0x3A	; 58
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	ea e3       	ldi	r30, 0x3A	; 58
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8c 81       	ldd	r24, Y+4	; 0x04
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	b9 01       	movw	r22, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <DIO_enuSetPinDirection+0xc2>
    127c:	66 0f       	add	r22, r22
    127e:	77 1f       	adc	r23, r23
    1280:	8a 95       	dec	r24
    1282:	e2 f7       	brpl	.-8      	; 0x127c <DIO_enuSetPinDirection+0xbe>
    1284:	cb 01       	movw	r24, r22
    1286:	84 2b       	or	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	7a c0       	rjmp	.+244    	; 0x1380 <DIO_enuSetPinDirection+0x1c2>
				break;
			case DIO_PORTB:
				DDRB &= ~(1 << Copy_u8PinID);
    128c:	a7 e3       	ldi	r26, 0x37	; 55
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e7 e3       	ldi	r30, 0x37	; 55
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <DIO_enuSetPinDirection+0xea>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	2a 95       	dec	r18
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <DIO_enuSetPinDirection+0xe6>
    12ac:	80 95       	com	r24
    12ae:	84 23       	and	r24, r20
    12b0:	8c 93       	st	X, r24
				DDRB |= (Copy_u8Value << Copy_u8PinID);
    12b2:	a7 e3       	ldi	r26, 0x37	; 55
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e7 e3       	ldi	r30, 0x37	; 55
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	48 2f       	mov	r20, r24
    12be:	8c 81       	ldd	r24, Y+4	; 0x04
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	88 2f       	mov	r24, r24
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	b9 01       	movw	r22, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_enuSetPinDirection+0x114>
    12ce:	66 0f       	add	r22, r22
    12d0:	77 1f       	adc	r23, r23
    12d2:	8a 95       	dec	r24
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_enuSetPinDirection+0x110>
    12d6:	cb 01       	movw	r24, r22
    12d8:	84 2b       	or	r24, r20
    12da:	8c 93       	st	X, r24
    12dc:	51 c0       	rjmp	.+162    	; 0x1380 <DIO_enuSetPinDirection+0x1c2>
				break;
			case DIO_PORTC:
				DDRC &= ~(1 << Copy_u8PinID);
    12de:	a4 e3       	ldi	r26, 0x34	; 52
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e4 e3       	ldi	r30, 0x34	; 52
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	48 2f       	mov	r20, r24
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_enuSetPinDirection+0x13c>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	2a 95       	dec	r18
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_enuSetPinDirection+0x138>
    12fe:	80 95       	com	r24
    1300:	84 23       	and	r24, r20
    1302:	8c 93       	st	X, r24
				DDRC |= (Copy_u8Value << Copy_u8PinID);
    1304:	a4 e3       	ldi	r26, 0x34	; 52
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e4 e3       	ldi	r30, 0x34	; 52
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	88 2f       	mov	r24, r24
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	b9 01       	movw	r22, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <DIO_enuSetPinDirection+0x166>
    1320:	66 0f       	add	r22, r22
    1322:	77 1f       	adc	r23, r23
    1324:	8a 95       	dec	r24
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <DIO_enuSetPinDirection+0x162>
    1328:	cb 01       	movw	r24, r22
    132a:	84 2b       	or	r24, r20
    132c:	8c 93       	st	X, r24
    132e:	28 c0       	rjmp	.+80     	; 0x1380 <DIO_enuSetPinDirection+0x1c2>
				break;
			case DIO_PORTD:
				DDRD &= ~(1 << Copy_u8PinID);
    1330:	a1 e3       	ldi	r26, 0x31	; 49
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e1 e3       	ldi	r30, 0x31	; 49
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 c0       	rjmp	.+4      	; 0x134c <DIO_enuSetPinDirection+0x18e>
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	2a 95       	dec	r18
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <DIO_enuSetPinDirection+0x18a>
    1350:	80 95       	com	r24
    1352:	84 23       	and	r24, r20
    1354:	8c 93       	st	X, r24
				DDRD |= (Copy_u8Value << Copy_u8PinID);
    1356:	a1 e3       	ldi	r26, 0x31	; 49
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e1 e3       	ldi	r30, 0x31	; 49
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	48 2f       	mov	r20, r24
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	b9 01       	movw	r22, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_enuSetPinDirection+0x1b8>
    1372:	66 0f       	add	r22, r22
    1374:	77 1f       	adc	r23, r23
    1376:	8a 95       	dec	r24
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_enuSetPinDirection+0x1b4>
    137a:	cb 01       	movw	r24, r22
    137c:	84 2b       	or	r24, r20
    137e:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    1380:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
    1382:	89 81       	ldd	r24, Y+1	; 0x01
}
    1384:	26 96       	adiw	r28, 0x06	; 6
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <DIO_enuSetPinValue>:

ES DIO_enuSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Value)
{
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	00 d0       	rcall	.+0      	; 0x139c <DIO_enuSetPinValue+0x6>
    139c:	00 d0       	rcall	.+0      	; 0x139e <DIO_enuSetPinValue+0x8>
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <DIO_enuSetPinValue+0xa>
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	8a 83       	std	Y+2, r24	; 0x02
    13a6:	6b 83       	std	Y+3, r22	; 0x03
    13a8:	4c 83       	std	Y+4, r20	; 0x04
	ES Local_enuErrorState = ES_NOK;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD || Copy_u8Value > OUTPUT) Local_enuErrorState = ES_OUT_OF_RANGE;
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	84 30       	cpi	r24, 0x04	; 4
    13b2:	18 f4       	brcc	.+6      	; 0x13ba <DIO_enuSetPinValue+0x24>
    13b4:	8c 81       	ldd	r24, Y+4	; 0x04
    13b6:	82 30       	cpi	r24, 0x02	; 2
    13b8:	18 f0       	brcs	.+6      	; 0x13c0 <DIO_enuSetPinValue+0x2a>
    13ba:	83 e0       	ldi	r24, 0x03	; 3
    13bc:	89 83       	std	Y+1, r24	; 0x01
    13be:	cd c0       	rjmp	.+410    	; 0x155a <DIO_enuSetPinValue+0x1c4>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	88 30       	cpi	r24, 0x08	; 8
    13c4:	18 f0       	brcs	.+6      	; 0x13cc <DIO_enuSetPinValue+0x36>
    13c6:	83 e0       	ldi	r24, 0x03	; 3
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	c7 c0       	rjmp	.+398    	; 0x155a <DIO_enuSetPinValue+0x1c4>
	else{
		switch(Copy_u8PortID){
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	3e 83       	std	Y+6, r19	; 0x06
    13d4:	2d 83       	std	Y+5, r18	; 0x05
    13d6:	6d 81       	ldd	r22, Y+5	; 0x05
    13d8:	7e 81       	ldd	r23, Y+6	; 0x06
    13da:	61 30       	cpi	r22, 0x01	; 1
    13dc:	71 05       	cpc	r23, r1
    13de:	09 f4       	brne	.+2      	; 0x13e2 <DIO_enuSetPinValue+0x4c>
    13e0:	41 c0       	rjmp	.+130    	; 0x1464 <DIO_enuSetPinValue+0xce>
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	82 30       	cpi	r24, 0x02	; 2
    13e8:	91 05       	cpc	r25, r1
    13ea:	34 f4       	brge	.+12     	; 0x13f8 <DIO_enuSetPinValue+0x62>
    13ec:	2d 81       	ldd	r18, Y+5	; 0x05
    13ee:	3e 81       	ldd	r19, Y+6	; 0x06
    13f0:	21 15       	cp	r18, r1
    13f2:	31 05       	cpc	r19, r1
    13f4:	71 f0       	breq	.+28     	; 0x1412 <DIO_enuSetPinValue+0x7c>
    13f6:	b0 c0       	rjmp	.+352    	; 0x1558 <DIO_enuSetPinValue+0x1c2>
    13f8:	6d 81       	ldd	r22, Y+5	; 0x05
    13fa:	7e 81       	ldd	r23, Y+6	; 0x06
    13fc:	62 30       	cpi	r22, 0x02	; 2
    13fe:	71 05       	cpc	r23, r1
    1400:	09 f4       	brne	.+2      	; 0x1404 <DIO_enuSetPinValue+0x6e>
    1402:	59 c0       	rjmp	.+178    	; 0x14b6 <DIO_enuSetPinValue+0x120>
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	83 30       	cpi	r24, 0x03	; 3
    140a:	91 05       	cpc	r25, r1
    140c:	09 f4       	brne	.+2      	; 0x1410 <DIO_enuSetPinValue+0x7a>
    140e:	7c c0       	rjmp	.+248    	; 0x1508 <DIO_enuSetPinValue+0x172>
    1410:	a3 c0       	rjmp	.+326    	; 0x1558 <DIO_enuSetPinValue+0x1c2>
			case DIO_PORTA:
				PORTA &= ~(1 << Copy_u8PinID);
    1412:	ab e3       	ldi	r26, 0x3B	; 59
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	eb e3       	ldi	r30, 0x3B	; 59
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_enuSetPinValue+0x98>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	2a 95       	dec	r18
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_enuSetPinValue+0x94>
    1432:	80 95       	com	r24
    1434:	84 23       	and	r24, r20
    1436:	8c 93       	st	X, r24
				PORTA |= (Copy_u8Value << Copy_u8PinID);
    1438:	ab e3       	ldi	r26, 0x3B	; 59
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	eb e3       	ldi	r30, 0x3B	; 59
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8c 81       	ldd	r24, Y+4	; 0x04
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	88 2f       	mov	r24, r24
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	b9 01       	movw	r22, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_enuSetPinValue+0xc2>
    1454:	66 0f       	add	r22, r22
    1456:	77 1f       	adc	r23, r23
    1458:	8a 95       	dec	r24
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_enuSetPinValue+0xbe>
    145c:	cb 01       	movw	r24, r22
    145e:	84 2b       	or	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	7a c0       	rjmp	.+244    	; 0x1558 <DIO_enuSetPinValue+0x1c2>
				break;
			case DIO_PORTB:
				PORTB &= ~(1 << Copy_u8PinID);
    1464:	a8 e3       	ldi	r26, 0x38	; 56
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e8 e3       	ldi	r30, 0x38	; 56
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <DIO_enuSetPinValue+0xea>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	2a 95       	dec	r18
    1482:	e2 f7       	brpl	.-8      	; 0x147c <DIO_enuSetPinValue+0xe6>
    1484:	80 95       	com	r24
    1486:	84 23       	and	r24, r20
    1488:	8c 93       	st	X, r24
				PORTB |= (Copy_u8Value << Copy_u8PinID);
    148a:	a8 e3       	ldi	r26, 0x38	; 56
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e8 e3       	ldi	r30, 0x38	; 56
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	48 2f       	mov	r20, r24
    1496:	8c 81       	ldd	r24, Y+4	; 0x04
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	88 2f       	mov	r24, r24
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	b9 01       	movw	r22, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <DIO_enuSetPinValue+0x114>
    14a6:	66 0f       	add	r22, r22
    14a8:	77 1f       	adc	r23, r23
    14aa:	8a 95       	dec	r24
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <DIO_enuSetPinValue+0x110>
    14ae:	cb 01       	movw	r24, r22
    14b0:	84 2b       	or	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	51 c0       	rjmp	.+162    	; 0x1558 <DIO_enuSetPinValue+0x1c2>
				break;
			case DIO_PORTC:
				PORTC &= ~(1 << Copy_u8PinID);
    14b6:	a5 e3       	ldi	r26, 0x35	; 53
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e5 e3       	ldi	r30, 0x35	; 53
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <DIO_enuSetPinValue+0x13c>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	2a 95       	dec	r18
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <DIO_enuSetPinValue+0x138>
    14d6:	80 95       	com	r24
    14d8:	84 23       	and	r24, r20
    14da:	8c 93       	st	X, r24
				PORTC |= (Copy_u8Value << Copy_u8PinID);
    14dc:	a5 e3       	ldi	r26, 0x35	; 53
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e5 e3       	ldi	r30, 0x35	; 53
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	48 2f       	mov	r20, r24
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	88 2f       	mov	r24, r24
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	b9 01       	movw	r22, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <DIO_enuSetPinValue+0x166>
    14f8:	66 0f       	add	r22, r22
    14fa:	77 1f       	adc	r23, r23
    14fc:	8a 95       	dec	r24
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <DIO_enuSetPinValue+0x162>
    1500:	cb 01       	movw	r24, r22
    1502:	84 2b       	or	r24, r20
    1504:	8c 93       	st	X, r24
    1506:	28 c0       	rjmp	.+80     	; 0x1558 <DIO_enuSetPinValue+0x1c2>
				break;
			case DIO_PORTD:
				PORTD &= ~(1 << Copy_u8PinID);
    1508:	a2 e3       	ldi	r26, 0x32	; 50
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e2 e3       	ldi	r30, 0x32	; 50
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	48 2f       	mov	r20, r24
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <DIO_enuSetPinValue+0x18e>
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	2a 95       	dec	r18
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <DIO_enuSetPinValue+0x18a>
    1528:	80 95       	com	r24
    152a:	84 23       	and	r24, r20
    152c:	8c 93       	st	X, r24
				PORTD |= (Copy_u8Value << Copy_u8PinID);
    152e:	a2 e3       	ldi	r26, 0x32	; 50
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e2 e3       	ldi	r30, 0x32	; 50
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	48 2f       	mov	r20, r24
    153a:	8c 81       	ldd	r24, Y+4	; 0x04
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	88 2f       	mov	r24, r24
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	b9 01       	movw	r22, r18
    1548:	02 c0       	rjmp	.+4      	; 0x154e <DIO_enuSetPinValue+0x1b8>
    154a:	66 0f       	add	r22, r22
    154c:	77 1f       	adc	r23, r23
    154e:	8a 95       	dec	r24
    1550:	e2 f7       	brpl	.-8      	; 0x154a <DIO_enuSetPinValue+0x1b4>
    1552:	cb 01       	movw	r24, r22
    1554:	84 2b       	or	r24, r20
    1556:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    1558:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
    155a:	89 81       	ldd	r24, Y+1	; 0x01
}
    155c:	26 96       	adiw	r28, 0x06	; 6
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	de bf       	out	0x3e, r29	; 62
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	cd bf       	out	0x3d, r28	; 61
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <DIO_enuGetpin>:

ES DIO_enuGetpin(u8 Copy_u8PortID,u8 Copy_u8PinID, u8* Copy_pu8Value)
{
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	27 97       	sbiw	r28, 0x07	; 7
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	8a 83       	std	Y+2, r24	; 0x02
    1584:	6b 83       	std	Y+3, r22	; 0x03
    1586:	5d 83       	std	Y+5, r21	; 0x05
    1588:	4c 83       	std	Y+4, r20	; 0x04
	ES Local_enuErrorState = ES_NOK;
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	84 30       	cpi	r24, 0x04	; 4
    1592:	18 f0       	brcs	.+6      	; 0x159a <DIO_enuGetpin+0x2c>
    1594:	83 e0       	ldi	r24, 0x03	; 3
    1596:	89 83       	std	Y+1, r24	; 0x01
    1598:	7e c0       	rjmp	.+252    	; 0x1696 <DIO_enuGetpin+0x128>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	88 30       	cpi	r24, 0x08	; 8
    159e:	18 f0       	brcs	.+6      	; 0x15a6 <DIO_enuGetpin+0x38>
    15a0:	83 e0       	ldi	r24, 0x03	; 3
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	78 c0       	rjmp	.+240    	; 0x1696 <DIO_enuGetpin+0x128>
	else if(Copy_pu8Value == NULL)Local_enuErrorState = ES_NULL_POINTER;
    15a6:	8c 81       	ldd	r24, Y+4	; 0x04
    15a8:	9d 81       	ldd	r25, Y+5	; 0x05
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	19 f4       	brne	.+6      	; 0x15b4 <DIO_enuGetpin+0x46>
    15ae:	82 e0       	ldi	r24, 0x02	; 2
    15b0:	89 83       	std	Y+1, r24	; 0x01
    15b2:	71 c0       	rjmp	.+226    	; 0x1696 <DIO_enuGetpin+0x128>
	else{
		switch(Copy_u8PortID){
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	3f 83       	std	Y+7, r19	; 0x07
    15bc:	2e 83       	std	Y+6, r18	; 0x06
    15be:	4e 81       	ldd	r20, Y+6	; 0x06
    15c0:	5f 81       	ldd	r21, Y+7	; 0x07
    15c2:	41 30       	cpi	r20, 0x01	; 1
    15c4:	51 05       	cpc	r21, r1
    15c6:	59 f1       	breq	.+86     	; 0x161e <DIO_enuGetpin+0xb0>
    15c8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ca:	9f 81       	ldd	r25, Y+7	; 0x07
    15cc:	82 30       	cpi	r24, 0x02	; 2
    15ce:	91 05       	cpc	r25, r1
    15d0:	34 f4       	brge	.+12     	; 0x15de <DIO_enuGetpin+0x70>
    15d2:	2e 81       	ldd	r18, Y+6	; 0x06
    15d4:	3f 81       	ldd	r19, Y+7	; 0x07
    15d6:	21 15       	cp	r18, r1
    15d8:	31 05       	cpc	r19, r1
    15da:	69 f0       	breq	.+26     	; 0x15f6 <DIO_enuGetpin+0x88>
    15dc:	5b c0       	rjmp	.+182    	; 0x1694 <DIO_enuGetpin+0x126>
    15de:	4e 81       	ldd	r20, Y+6	; 0x06
    15e0:	5f 81       	ldd	r21, Y+7	; 0x07
    15e2:	42 30       	cpi	r20, 0x02	; 2
    15e4:	51 05       	cpc	r21, r1
    15e6:	79 f1       	breq	.+94     	; 0x1646 <DIO_enuGetpin+0xd8>
    15e8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ea:	9f 81       	ldd	r25, Y+7	; 0x07
    15ec:	83 30       	cpi	r24, 0x03	; 3
    15ee:	91 05       	cpc	r25, r1
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <DIO_enuGetpin+0x86>
    15f2:	3d c0       	rjmp	.+122    	; 0x166e <DIO_enuGetpin+0x100>
    15f4:	4f c0       	rjmp	.+158    	; 0x1694 <DIO_enuGetpin+0x126>
			case DIO_PORTA:
				*Copy_pu8Value = getBit(PINA,Copy_u8PinID);
    15f6:	e9 e3       	ldi	r30, 0x39	; 57
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	a9 01       	movw	r20, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <DIO_enuGetpin+0xa0>
    160a:	55 95       	asr	r21
    160c:	47 95       	ror	r20
    160e:	8a 95       	dec	r24
    1610:	e2 f7       	brpl	.-8      	; 0x160a <DIO_enuGetpin+0x9c>
    1612:	ca 01       	movw	r24, r20
    1614:	81 70       	andi	r24, 0x01	; 1
    1616:	ec 81       	ldd	r30, Y+4	; 0x04
    1618:	fd 81       	ldd	r31, Y+5	; 0x05
    161a:	80 83       	st	Z, r24
    161c:	3b c0       	rjmp	.+118    	; 0x1694 <DIO_enuGetpin+0x126>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = getBit(PINB,Copy_u8PinID);
    161e:	e6 e3       	ldi	r30, 0x36	; 54
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	88 2f       	mov	r24, r24
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	a9 01       	movw	r20, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <DIO_enuGetpin+0xc8>
    1632:	55 95       	asr	r21
    1634:	47 95       	ror	r20
    1636:	8a 95       	dec	r24
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <DIO_enuGetpin+0xc4>
    163a:	ca 01       	movw	r24, r20
    163c:	81 70       	andi	r24, 0x01	; 1
    163e:	ec 81       	ldd	r30, Y+4	; 0x04
    1640:	fd 81       	ldd	r31, Y+5	; 0x05
    1642:	80 83       	st	Z, r24
    1644:	27 c0       	rjmp	.+78     	; 0x1694 <DIO_enuGetpin+0x126>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = getBit(PINC,Copy_u8PinID);
    1646:	e3 e3       	ldi	r30, 0x33	; 51
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	88 2f       	mov	r24, r24
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	a9 01       	movw	r20, r18
    1658:	02 c0       	rjmp	.+4      	; 0x165e <DIO_enuGetpin+0xf0>
    165a:	55 95       	asr	r21
    165c:	47 95       	ror	r20
    165e:	8a 95       	dec	r24
    1660:	e2 f7       	brpl	.-8      	; 0x165a <DIO_enuGetpin+0xec>
    1662:	ca 01       	movw	r24, r20
    1664:	81 70       	andi	r24, 0x01	; 1
    1666:	ec 81       	ldd	r30, Y+4	; 0x04
    1668:	fd 81       	ldd	r31, Y+5	; 0x05
    166a:	80 83       	st	Z, r24
    166c:	13 c0       	rjmp	.+38     	; 0x1694 <DIO_enuGetpin+0x126>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = getBit(PIND,Copy_u8PinID);
    166e:	e0 e3       	ldi	r30, 0x30	; 48
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	88 2f       	mov	r24, r24
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	a9 01       	movw	r20, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <DIO_enuGetpin+0x118>
    1682:	55 95       	asr	r21
    1684:	47 95       	ror	r20
    1686:	8a 95       	dec	r24
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <DIO_enuGetpin+0x114>
    168a:	ca 01       	movw	r24, r20
    168c:	81 70       	andi	r24, 0x01	; 1
    168e:	ec 81       	ldd	r30, Y+4	; 0x04
    1690:	fd 81       	ldd	r31, Y+5	; 0x05
    1692:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    1694:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enuErrorState;
    1696:	89 81       	ldd	r24, Y+1	; 0x01
}
    1698:	27 96       	adiw	r28, 0x07	; 7
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <DIO_enuTogPin>:

ES DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <DIO_enuTogPin+0x6>
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <DIO_enuTogPin+0x8>
    16b2:	0f 92       	push	r0
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	8a 83       	std	Y+2, r24	; 0x02
    16ba:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	84 30       	cpi	r24, 0x04	; 4
    16c4:	18 f0       	brcs	.+6      	; 0x16cc <DIO_enuTogPin+0x22>
    16c6:	83 e0       	ldi	r24, 0x03	; 3
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	75 c0       	rjmp	.+234    	; 0x17b6 <DIO_enuTogPin+0x10c>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	88 30       	cpi	r24, 0x08	; 8
    16d0:	18 f0       	brcs	.+6      	; 0x16d8 <DIO_enuTogPin+0x2e>
    16d2:	83 e0       	ldi	r24, 0x03	; 3
    16d4:	89 83       	std	Y+1, r24	; 0x01
    16d6:	6f c0       	rjmp	.+222    	; 0x17b6 <DIO_enuTogPin+0x10c>
	else{
		switch(Copy_u8PortID){
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	3d 83       	std	Y+5, r19	; 0x05
    16e0:	2c 83       	std	Y+4, r18	; 0x04
    16e2:	8c 81       	ldd	r24, Y+4	; 0x04
    16e4:	9d 81       	ldd	r25, Y+5	; 0x05
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	91 05       	cpc	r25, r1
    16ea:	49 f1       	breq	.+82     	; 0x173e <DIO_enuTogPin+0x94>
    16ec:	2c 81       	ldd	r18, Y+4	; 0x04
    16ee:	3d 81       	ldd	r19, Y+5	; 0x05
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	2c f4       	brge	.+10     	; 0x1700 <DIO_enuTogPin+0x56>
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	9d 81       	ldd	r25, Y+5	; 0x05
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	61 f0       	breq	.+24     	; 0x1716 <DIO_enuTogPin+0x6c>
    16fe:	5a c0       	rjmp	.+180    	; 0x17b4 <DIO_enuTogPin+0x10a>
    1700:	2c 81       	ldd	r18, Y+4	; 0x04
    1702:	3d 81       	ldd	r19, Y+5	; 0x05
    1704:	22 30       	cpi	r18, 0x02	; 2
    1706:	31 05       	cpc	r19, r1
    1708:	71 f1       	breq	.+92     	; 0x1766 <DIO_enuTogPin+0xbc>
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	9d 81       	ldd	r25, Y+5	; 0x05
    170e:	83 30       	cpi	r24, 0x03	; 3
    1710:	91 05       	cpc	r25, r1
    1712:	e9 f1       	breq	.+122    	; 0x178e <DIO_enuTogPin+0xe4>
    1714:	4f c0       	rjmp	.+158    	; 0x17b4 <DIO_enuTogPin+0x10a>
			case DIO_PORTA:
				PORTA ^= (1 << Copy_u8PinID);
    1716:	ab e3       	ldi	r26, 0x3B	; 59
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	eb e3       	ldi	r30, 0x3B	; 59
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <DIO_enuTogPin+0x8a>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <DIO_enuTogPin+0x86>
    1738:	84 27       	eor	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	3b c0       	rjmp	.+118    	; 0x17b4 <DIO_enuTogPin+0x10a>
				break;
			case DIO_PORTB:
				PORTB ^= (1 << Copy_u8PinID);
    173e:	a8 e3       	ldi	r26, 0x38	; 56
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e8 e3       	ldi	r30, 0x38	; 56
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	48 2f       	mov	r20, r24
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <DIO_enuTogPin+0xb2>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <DIO_enuTogPin+0xae>
    1760:	84 27       	eor	r24, r20
    1762:	8c 93       	st	X, r24
    1764:	27 c0       	rjmp	.+78     	; 0x17b4 <DIO_enuTogPin+0x10a>
				break;
			case DIO_PORTC:
				PORTC ^= (1 << Copy_u8PinID);
    1766:	a5 e3       	ldi	r26, 0x35	; 53
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e5 e3       	ldi	r30, 0x35	; 53
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	48 2f       	mov	r20, r24
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	02 2e       	mov	r0, r18
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <DIO_enuTogPin+0xda>
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	0a 94       	dec	r0
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <DIO_enuTogPin+0xd6>
    1788:	84 27       	eor	r24, r20
    178a:	8c 93       	st	X, r24
    178c:	13 c0       	rjmp	.+38     	; 0x17b4 <DIO_enuTogPin+0x10a>
				break;
			case DIO_PORTD:
				PORTD ^= (1 << Copy_u8PinID);
    178e:	a2 e3       	ldi	r26, 0x32	; 50
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e2 e3       	ldi	r30, 0x32	; 50
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	48 2f       	mov	r20, r24
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	02 2e       	mov	r0, r18
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <DIO_enuTogPin+0x102>
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	0a 94       	dec	r0
    17ae:	e2 f7       	brpl	.-8      	; 0x17a8 <DIO_enuTogPin+0xfe>
    17b0:	84 27       	eor	r24, r20
    17b2:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    17b4:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
    17b6:	89 81       	ldd	r24, Y+1	; 0x01

}
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <GIE_enuEnable>:
#include "errorStates.h"

#include "GIE_priv.h"

ES GIE_enuEnable(void)
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	0f 92       	push	r0
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	89 83       	std	Y+1, r24	; 0x01

	SREG |=(1<<7);
    17d6:	af e5       	ldi	r26, 0x5F	; 95
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	ef e5       	ldi	r30, 0x5F	; 95
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	80 68       	ori	r24, 0x80	; 128
    17e2:	8c 93       	st	X, r24

	return Local_enuErrorState;
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17e6:	0f 90       	pop	r0
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <GIE_enuDisable>:


ES GIE_enuDisable(void)
{
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	0f 92       	push	r0
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	89 83       	std	Y+1, r24	; 0x01

	SREG &=~(1<<7);
    17fc:	af e5       	ldi	r26, 0x5F	; 95
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	ef e5       	ldi	r30, 0x5F	; 95
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	8f 77       	andi	r24, 0x7F	; 127
    1808:	8c 93       	st	X, r24

	return Local_enuErrorState;
    180a:	89 81       	ldd	r24, Y+1	; 0x01
}
    180c:	0f 90       	pop	r0
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <LCD_enuInit>:
#include "LCD_config.h"
#include "LCD_priv.h"

#include "util/delay.h"

ES LCD_enuInit(void){
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	e9 97       	sbiw	r28, 0x39	; 57
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	de bf       	out	0x3e, r29	; 62
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	cd bf       	out	0x3d, r28	; 61
	ES Local_enuErrorState = ES_NOK;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	89 af       	std	Y+57, r24	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	41 e0       	ldi	r20, 0x01	; 1
    183c:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	62 e0       	ldi	r22, 0x02	; 2
    1844:	41 e0       	ldi	r20, 0x01	; 1
    1846:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    184a:	83 e0       	ldi	r24, 0x03	; 3
    184c:	67 e0       	ldi	r22, 0x07	; 7
    184e:	41 e0       	ldi	r20, 0x01	; 1
    1850:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1854:	83 e0       	ldi	r24, 0x03	; 3
    1856:	66 e0       	ldi	r22, 0x06	; 6
    1858:	41 e0       	ldi	r20, 0x01	; 1
    185a:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    185e:	83 e0       	ldi	r24, 0x03	; 3
    1860:	65 e0       	ldi	r22, 0x05	; 5
    1862:	41 e0       	ldi	r20, 0x01	; 1
    1864:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1868:	83 e0       	ldi	r24, 0x03	; 3
    186a:	64 e0       	ldi	r22, 0x04	; 4
    186c:	41 e0       	ldi	r20, 0x01	; 1
    186e:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_enuSetPinDirection>
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	ac e0       	ldi	r26, 0x0C	; 12
    1878:	b2 e4       	ldi	r27, 0x42	; 66
    187a:	8d ab       	std	Y+53, r24	; 0x35
    187c:	9e ab       	std	Y+54, r25	; 0x36
    187e:	af ab       	std	Y+55, r26	; 0x37
    1880:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1882:	6d a9       	ldd	r22, Y+53	; 0x35
    1884:	7e a9       	ldd	r23, Y+54	; 0x36
    1886:	8f a9       	ldd	r24, Y+55	; 0x37
    1888:	98 ad       	ldd	r25, Y+56	; 0x38
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	4a e7       	ldi	r20, 0x7A	; 122
    1890:	53 e4       	ldi	r21, 0x43	; 67
    1892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	89 ab       	std	Y+49, r24	; 0x31
    189c:	9a ab       	std	Y+50, r25	; 0x32
    189e:	ab ab       	std	Y+51, r26	; 0x33
    18a0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18a2:	69 a9       	ldd	r22, Y+49	; 0x31
    18a4:	7a a9       	ldd	r23, Y+50	; 0x32
    18a6:	8b a9       	ldd	r24, Y+51	; 0x33
    18a8:	9c a9       	ldd	r25, Y+52	; 0x34
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	40 e8       	ldi	r20, 0x80	; 128
    18b0:	5f e3       	ldi	r21, 0x3F	; 63
    18b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18b6:	88 23       	and	r24, r24
    18b8:	2c f4       	brge	.+10     	; 0x18c4 <LCD_enuInit+0xb0>
		__ticks = 1;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	98 ab       	std	Y+48, r25	; 0x30
    18c0:	8f a7       	std	Y+47, r24	; 0x2f
    18c2:	3f c0       	rjmp	.+126    	; 0x1942 <LCD_enuInit+0x12e>
	else if (__tmp > 65535)
    18c4:	69 a9       	ldd	r22, Y+49	; 0x31
    18c6:	7a a9       	ldd	r23, Y+50	; 0x32
    18c8:	8b a9       	ldd	r24, Y+51	; 0x33
    18ca:	9c a9       	ldd	r25, Y+52	; 0x34
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	3f ef       	ldi	r19, 0xFF	; 255
    18d0:	4f e7       	ldi	r20, 0x7F	; 127
    18d2:	57 e4       	ldi	r21, 0x47	; 71
    18d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18d8:	18 16       	cp	r1, r24
    18da:	4c f5       	brge	.+82     	; 0x192e <LCD_enuInit+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18dc:	6d a9       	ldd	r22, Y+53	; 0x35
    18de:	7e a9       	ldd	r23, Y+54	; 0x36
    18e0:	8f a9       	ldd	r24, Y+55	; 0x37
    18e2:	98 ad       	ldd	r25, Y+56	; 0x38
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	40 e2       	ldi	r20, 0x20	; 32
    18ea:	51 e4       	ldi	r21, 0x41	; 65
    18ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	bc 01       	movw	r22, r24
    18f6:	cd 01       	movw	r24, r26
    18f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	98 ab       	std	Y+48, r25	; 0x30
    1902:	8f a7       	std	Y+47, r24	; 0x2f
    1904:	0f c0       	rjmp	.+30     	; 0x1924 <LCD_enuInit+0x110>
    1906:	89 e1       	ldi	r24, 0x19	; 25
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	9e a7       	std	Y+46, r25	; 0x2e
    190c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    190e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1910:	9e a5       	ldd	r25, Y+46	; 0x2e
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	f1 f7       	brne	.-4      	; 0x1912 <LCD_enuInit+0xfe>
    1916:	9e a7       	std	Y+46, r25	; 0x2e
    1918:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191a:	8f a5       	ldd	r24, Y+47	; 0x2f
    191c:	98 a9       	ldd	r25, Y+48	; 0x30
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	98 ab       	std	Y+48, r25	; 0x30
    1922:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1924:	8f a5       	ldd	r24, Y+47	; 0x2f
    1926:	98 a9       	ldd	r25, Y+48	; 0x30
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	69 f7       	brne	.-38     	; 0x1906 <LCD_enuInit+0xf2>
    192c:	14 c0       	rjmp	.+40     	; 0x1956 <LCD_enuInit+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192e:	69 a9       	ldd	r22, Y+49	; 0x31
    1930:	7a a9       	ldd	r23, Y+50	; 0x32
    1932:	8b a9       	ldd	r24, Y+51	; 0x33
    1934:	9c a9       	ldd	r25, Y+52	; 0x34
    1936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	98 ab       	std	Y+48, r25	; 0x30
    1940:	8f a7       	std	Y+47, r24	; 0x2f
    1942:	8f a5       	ldd	r24, Y+47	; 0x2f
    1944:	98 a9       	ldd	r25, Y+48	; 0x30
    1946:	9c a7       	std	Y+44, r25	; 0x2c
    1948:	8b a7       	std	Y+43, r24	; 0x2b
    194a:	8b a5       	ldd	r24, Y+43	; 0x2b
    194c:	9c a5       	ldd	r25, Y+44	; 0x2c
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <LCD_enuInit+0x13a>
    1952:	9c a7       	std	Y+44, r25	; 0x2c
    1954:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT
	DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    1956:	83 e0       	ldi	r24, 0x03	; 3
    1958:	63 e0       	ldi	r22, 0x03	; 3
    195a:	41 e0       	ldi	r20, 0x01	; 1
    195c:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    1960:	83 e0       	ldi	r24, 0x03	; 3
    1962:	62 e0       	ldi	r22, 0x02	; 2
    1964:	41 e0       	ldi	r20, 0x01	; 1
    1966:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    196a:	83 e0       	ldi	r24, 0x03	; 3
    196c:	61 e0       	ldi	r22, 0x01	; 1
    196e:	41 e0       	ldi	r20, 0x01	; 1
    1970:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    1974:	83 e0       	ldi	r24, 0x03	; 3
    1976:	60 e0       	ldi	r22, 0x00	; 0
    1978:	41 e0       	ldi	r20, 0x01	; 1
    197a:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_enuSetPinDirection>
	LCD_inVoidSendCommand(0x3B);
    197e:	8b e3       	ldi	r24, 0x3B	; 59
    1980:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_inVoidSendCommand>
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	a0 e8       	ldi	r26, 0x80	; 128
    198a:	bf e3       	ldi	r27, 0x3F	; 63
    198c:	8f a3       	std	Y+39, r24	; 0x27
    198e:	98 a7       	std	Y+40, r25	; 0x28
    1990:	a9 a7       	std	Y+41, r26	; 0x29
    1992:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1994:	6f a1       	ldd	r22, Y+39	; 0x27
    1996:	78 a5       	ldd	r23, Y+40	; 0x28
    1998:	89 a5       	ldd	r24, Y+41	; 0x29
    199a:	9a a5       	ldd	r25, Y+42	; 0x2a
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	4a e7       	ldi	r20, 0x7A	; 122
    19a2:	53 e4       	ldi	r21, 0x43	; 67
    19a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	8b a3       	std	Y+35, r24	; 0x23
    19ae:	9c a3       	std	Y+36, r25	; 0x24
    19b0:	ad a3       	std	Y+37, r26	; 0x25
    19b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19b4:	6b a1       	ldd	r22, Y+35	; 0x23
    19b6:	7c a1       	ldd	r23, Y+36	; 0x24
    19b8:	8d a1       	ldd	r24, Y+37	; 0x25
    19ba:	9e a1       	ldd	r25, Y+38	; 0x26
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e8       	ldi	r20, 0x80	; 128
    19c2:	5f e3       	ldi	r21, 0x3F	; 63
    19c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c8:	88 23       	and	r24, r24
    19ca:	2c f4       	brge	.+10     	; 0x19d6 <LCD_enuInit+0x1c2>
		__ticks = 1;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	9a a3       	std	Y+34, r25	; 0x22
    19d2:	89 a3       	std	Y+33, r24	; 0x21
    19d4:	3f c0       	rjmp	.+126    	; 0x1a54 <LCD_enuInit+0x240>
	else if (__tmp > 65535)
    19d6:	6b a1       	ldd	r22, Y+35	; 0x23
    19d8:	7c a1       	ldd	r23, Y+36	; 0x24
    19da:	8d a1       	ldd	r24, Y+37	; 0x25
    19dc:	9e a1       	ldd	r25, Y+38	; 0x26
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	3f ef       	ldi	r19, 0xFF	; 255
    19e2:	4f e7       	ldi	r20, 0x7F	; 127
    19e4:	57 e4       	ldi	r21, 0x47	; 71
    19e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ea:	18 16       	cp	r1, r24
    19ec:	4c f5       	brge	.+82     	; 0x1a40 <LCD_enuInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ee:	6f a1       	ldd	r22, Y+39	; 0x27
    19f0:	78 a5       	ldd	r23, Y+40	; 0x28
    19f2:	89 a5       	ldd	r24, Y+41	; 0x29
    19f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e2       	ldi	r20, 0x20	; 32
    19fc:	51 e4       	ldi	r21, 0x41	; 65
    19fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	bc 01       	movw	r22, r24
    1a08:	cd 01       	movw	r24, r26
    1a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	9a a3       	std	Y+34, r25	; 0x22
    1a14:	89 a3       	std	Y+33, r24	; 0x21
    1a16:	0f c0       	rjmp	.+30     	; 0x1a36 <LCD_enuInit+0x222>
    1a18:	89 e1       	ldi	r24, 0x19	; 25
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	98 a3       	std	Y+32, r25	; 0x20
    1a1e:	8f 8f       	std	Y+31, r24	; 0x1f
    1a20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a22:	98 a1       	ldd	r25, Y+32	; 0x20
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	f1 f7       	brne	.-4      	; 0x1a24 <LCD_enuInit+0x210>
    1a28:	98 a3       	std	Y+32, r25	; 0x20
    1a2a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	9a a3       	std	Y+34, r25	; 0x22
    1a34:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a36:	89 a1       	ldd	r24, Y+33	; 0x21
    1a38:	9a a1       	ldd	r25, Y+34	; 0x22
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	69 f7       	brne	.-38     	; 0x1a18 <LCD_enuInit+0x204>
    1a3e:	14 c0       	rjmp	.+40     	; 0x1a68 <LCD_enuInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a40:	6b a1       	ldd	r22, Y+35	; 0x23
    1a42:	7c a1       	ldd	r23, Y+36	; 0x24
    1a44:	8d a1       	ldd	r24, Y+37	; 0x25
    1a46:	9e a1       	ldd	r25, Y+38	; 0x26
    1a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	9a a3       	std	Y+34, r25	; 0x22
    1a52:	89 a3       	std	Y+33, r24	; 0x21
    1a54:	89 a1       	ldd	r24, Y+33	; 0x21
    1a56:	9a a1       	ldd	r25, Y+34	; 0x22
    1a58:	9e 8f       	std	Y+30, r25	; 0x1e
    1a5a:	8d 8f       	std	Y+29, r24	; 0x1d
    1a5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	f1 f7       	brne	.-4      	; 0x1a60 <LCD_enuInit+0x24c>
    1a64:	9e 8f       	std	Y+30, r25	; 0x1e
    1a66:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommand(0x2B);
#endif
	_delay_ms(1);
	LCD_inVoidSendCommand(0x0f);
    1a68:	8f e0       	ldi	r24, 0x0F	; 15
    1a6a:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_inVoidSendCommand>
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a0 e8       	ldi	r26, 0x80	; 128
    1a74:	bf e3       	ldi	r27, 0x3F	; 63
    1a76:	89 8f       	std	Y+25, r24	; 0x19
    1a78:	9a 8f       	std	Y+26, r25	; 0x1a
    1a7a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a7c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	4a e7       	ldi	r20, 0x7A	; 122
    1a8c:	53 e4       	ldi	r21, 0x43	; 67
    1a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	8d 8b       	std	Y+21, r24	; 0x15
    1a98:	9e 8b       	std	Y+22, r25	; 0x16
    1a9a:	af 8b       	std	Y+23, r26	; 0x17
    1a9c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa0:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa2:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa4:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e8       	ldi	r20, 0x80	; 128
    1aac:	5f e3       	ldi	r21, 0x3F	; 63
    1aae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab2:	88 23       	and	r24, r24
    1ab4:	2c f4       	brge	.+10     	; 0x1ac0 <LCD_enuInit+0x2ac>
		__ticks = 1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	9c 8b       	std	Y+20, r25	; 0x14
    1abc:	8b 8b       	std	Y+19, r24	; 0x13
    1abe:	3f c0       	rjmp	.+126    	; 0x1b3e <LCD_enuInit+0x32a>
	else if (__tmp > 65535)
    1ac0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	3f ef       	ldi	r19, 0xFF	; 255
    1acc:	4f e7       	ldi	r20, 0x7F	; 127
    1ace:	57 e4       	ldi	r21, 0x47	; 71
    1ad0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad4:	18 16       	cp	r1, r24
    1ad6:	4c f5       	brge	.+82     	; 0x1b2a <LCD_enuInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad8:	69 8d       	ldd	r22, Y+25	; 0x19
    1ada:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1adc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ade:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e2       	ldi	r20, 0x20	; 32
    1ae6:	51 e4       	ldi	r21, 0x41	; 65
    1ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	bc 01       	movw	r22, r24
    1af2:	cd 01       	movw	r24, r26
    1af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9c 8b       	std	Y+20, r25	; 0x14
    1afe:	8b 8b       	std	Y+19, r24	; 0x13
    1b00:	0f c0       	rjmp	.+30     	; 0x1b20 <LCD_enuInit+0x30c>
    1b02:	89 e1       	ldi	r24, 0x19	; 25
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9a 8b       	std	Y+18, r25	; 0x12
    1b08:	89 8b       	std	Y+17, r24	; 0x11
    1b0a:	89 89       	ldd	r24, Y+17	; 0x11
    1b0c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <LCD_enuInit+0x2fa>
    1b12:	9a 8b       	std	Y+18, r25	; 0x12
    1b14:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b16:	8b 89       	ldd	r24, Y+19	; 0x13
    1b18:	9c 89       	ldd	r25, Y+20	; 0x14
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	9c 8b       	std	Y+20, r25	; 0x14
    1b1e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b20:	8b 89       	ldd	r24, Y+19	; 0x13
    1b22:	9c 89       	ldd	r25, Y+20	; 0x14
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	69 f7       	brne	.-38     	; 0x1b02 <LCD_enuInit+0x2ee>
    1b28:	14 c0       	rjmp	.+40     	; 0x1b52 <LCD_enuInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b30:	98 8d       	ldd	r25, Y+24	; 0x18
    1b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	9c 8b       	std	Y+20, r25	; 0x14
    1b3c:	8b 8b       	std	Y+19, r24	; 0x13
    1b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b40:	9c 89       	ldd	r25, Y+20	; 0x14
    1b42:	98 8b       	std	Y+16, r25	; 0x10
    1b44:	8f 87       	std	Y+15, r24	; 0x0f
    1b46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b48:	98 89       	ldd	r25, Y+16	; 0x10
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <LCD_enuInit+0x336>
    1b4e:	98 8b       	std	Y+16, r25	; 0x10
    1b50:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_inVoidSendCommand(0x01);
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_inVoidSendCommand>
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	a0 e0       	ldi	r26, 0x00	; 0
    1b5e:	b0 e4       	ldi	r27, 0x40	; 64
    1b60:	8b 87       	std	Y+11, r24	; 0x0b
    1b62:	9c 87       	std	Y+12, r25	; 0x0c
    1b64:	ad 87       	std	Y+13, r26	; 0x0d
    1b66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	4a e7       	ldi	r20, 0x7A	; 122
    1b76:	53 e4       	ldi	r21, 0x43	; 67
    1b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	8f 83       	std	Y+7, r24	; 0x07
    1b82:	98 87       	std	Y+8, r25	; 0x08
    1b84:	a9 87       	std	Y+9, r26	; 0x09
    1b86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b88:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8a:	78 85       	ldd	r23, Y+8	; 0x08
    1b8c:	89 85       	ldd	r24, Y+9	; 0x09
    1b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e8       	ldi	r20, 0x80	; 128
    1b96:	5f e3       	ldi	r21, 0x3F	; 63
    1b98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b9c:	88 23       	and	r24, r24
    1b9e:	2c f4       	brge	.+10     	; 0x1baa <LCD_enuInit+0x396>
		__ticks = 1;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	9e 83       	std	Y+6, r25	; 0x06
    1ba6:	8d 83       	std	Y+5, r24	; 0x05
    1ba8:	3f c0       	rjmp	.+126    	; 0x1c28 <LCD_enuInit+0x414>
	else if (__tmp > 65535)
    1baa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bac:	78 85       	ldd	r23, Y+8	; 0x08
    1bae:	89 85       	ldd	r24, Y+9	; 0x09
    1bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	3f ef       	ldi	r19, 0xFF	; 255
    1bb6:	4f e7       	ldi	r20, 0x7F	; 127
    1bb8:	57 e4       	ldi	r21, 0x47	; 71
    1bba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bbe:	18 16       	cp	r1, r24
    1bc0:	4c f5       	brge	.+82     	; 0x1c14 <LCD_enuInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e2       	ldi	r20, 0x20	; 32
    1bd0:	51 e4       	ldi	r21, 0x41	; 65
    1bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	bc 01       	movw	r22, r24
    1bdc:	cd 01       	movw	r24, r26
    1bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	9e 83       	std	Y+6, r25	; 0x06
    1be8:	8d 83       	std	Y+5, r24	; 0x05
    1bea:	0f c0       	rjmp	.+30     	; 0x1c0a <LCD_enuInit+0x3f6>
    1bec:	89 e1       	ldi	r24, 0x19	; 25
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	9c 83       	std	Y+4, r25	; 0x04
    1bf2:	8b 83       	std	Y+3, r24	; 0x03
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	f1 f7       	brne	.-4      	; 0x1bf8 <LCD_enuInit+0x3e4>
    1bfc:	9c 83       	std	Y+4, r25	; 0x04
    1bfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c00:	8d 81       	ldd	r24, Y+5	; 0x05
    1c02:	9e 81       	ldd	r25, Y+6	; 0x06
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	9e 83       	std	Y+6, r25	; 0x06
    1c08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	69 f7       	brne	.-38     	; 0x1bec <LCD_enuInit+0x3d8>
    1c12:	14 c0       	rjmp	.+40     	; 0x1c3c <LCD_enuInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c14:	6f 81       	ldd	r22, Y+7	; 0x07
    1c16:	78 85       	ldd	r23, Y+8	; 0x08
    1c18:	89 85       	ldd	r24, Y+9	; 0x09
    1c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	9e 83       	std	Y+6, r25	; 0x06
    1c26:	8d 83       	std	Y+5, r24	; 0x05
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2c:	9a 83       	std	Y+2, r25	; 0x02
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	9a 81       	ldd	r25, Y+2	; 0x02
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <LCD_enuInit+0x420>
    1c38:	9a 83       	std	Y+2, r25	; 0x02
    1c3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_inVoidSendCommand(0x06);
    1c3c:	86 e0       	ldi	r24, 0x06	; 6
    1c3e:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_inVoidSendCommand>

	Local_enuErrorState = ES_OK;
    1c42:	19 ae       	std	Y+57, r1	; 0x39
	return Local_enuErrorState;
    1c44:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1c46:	e9 96       	adiw	r28, 0x39	; 57
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <LCD_enuDisplayChar>:

ES LCD_enuDisplayChar(u8 Copy_u8Data){
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <LCD_enuDisplayChar+0x6>
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	60 e0       	ldi	r22, 0x00	; 0
    1c6c:	41 e0       	ldi	r20, 0x01	; 1
    1c6e:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
	LCD_VoidLatch(Copy_u8Data);
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <LCD_VoidLatch>

	Local_enuErrorState = ES_OK;
    1c78:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <LCD_enuSendCommand>:

ES LCD_enuSendCommand(u8 Copy_u8Command){
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <LCD_enuSendCommand+0x6>
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
	LCD_VoidLatch(Copy_u8Command);
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <LCD_VoidLatch>

	Local_enuErrorState = ES_OK;
    1ca6:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <LCD_enuClearDisplay>:

ES LCD_enuClearDisplay(){
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	0f 92       	push	r0
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	89 83       	std	Y+1, r24	; 0x01

	LCD_inVoidSendCommand(0x01);
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_inVoidSendCommand>

	Local_enuErrorState = ES_OK;
    1cc8:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ccc:	0f 90       	pop	r0
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <LCD_VoidLatch>:

static void LCD_VoidLatch(u8 Copy_u8Data)
{
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	6d 97       	sbiw	r28, 0x1d	; 29
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	61 e0       	ldi	r22, 0x01	; 1
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	62 e0       	ldi	r22, 0x02	; 2
    1cf8:	40 e0       	ldi	r20, 0x00	; 0
    1cfa:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    1cfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d00:	98 2f       	mov	r25, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	99 27       	eor	r25, r25
    1d06:	99 1f       	adc	r25, r25
    1d08:	83 e0       	ldi	r24, 0x03	; 3
    1d0a:	67 e0       	ldi	r22, 0x07	; 7
    1d0c:	49 2f       	mov	r20, r25
    1d0e:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    1d12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d14:	82 95       	swap	r24
    1d16:	86 95       	lsr	r24
    1d18:	86 95       	lsr	r24
    1d1a:	83 70       	andi	r24, 0x03	; 3
    1d1c:	98 2f       	mov	r25, r24
    1d1e:	91 70       	andi	r25, 0x01	; 1
    1d20:	83 e0       	ldi	r24, 0x03	; 3
    1d22:	66 e0       	ldi	r22, 0x06	; 6
    1d24:	49 2f       	mov	r20, r25
    1d26:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    1d2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d2c:	82 95       	swap	r24
    1d2e:	86 95       	lsr	r24
    1d30:	87 70       	andi	r24, 0x07	; 7
    1d32:	98 2f       	mov	r25, r24
    1d34:	91 70       	andi	r25, 0x01	; 1
    1d36:	83 e0       	ldi	r24, 0x03	; 3
    1d38:	65 e0       	ldi	r22, 0x05	; 5
    1d3a:	49 2f       	mov	r20, r25
    1d3c:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    1d40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d42:	82 95       	swap	r24
    1d44:	8f 70       	andi	r24, 0x0F	; 15
    1d46:	98 2f       	mov	r25, r24
    1d48:	91 70       	andi	r25, 0x01	; 1
    1d4a:	83 e0       	ldi	r24, 0x03	; 3
    1d4c:	64 e0       	ldi	r22, 0x04	; 4
    1d4e:	49 2f       	mov	r20, r25
    1d50:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>

#if LCD_MODE == EIGHT_BIT
	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    1d54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d56:	86 95       	lsr	r24
    1d58:	86 95       	lsr	r24
    1d5a:	86 95       	lsr	r24
    1d5c:	98 2f       	mov	r25, r24
    1d5e:	91 70       	andi	r25, 0x01	; 1
    1d60:	83 e0       	ldi	r24, 0x03	; 3
    1d62:	63 e0       	ldi	r22, 0x03	; 3
    1d64:	49 2f       	mov	r20, r25
    1d66:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    1d6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d6c:	86 95       	lsr	r24
    1d6e:	86 95       	lsr	r24
    1d70:	98 2f       	mov	r25, r24
    1d72:	91 70       	andi	r25, 0x01	; 1
    1d74:	83 e0       	ldi	r24, 0x03	; 3
    1d76:	62 e0       	ldi	r22, 0x02	; 2
    1d78:	49 2f       	mov	r20, r25
    1d7a:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    1d7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d80:	86 95       	lsr	r24
    1d82:	98 2f       	mov	r25, r24
    1d84:	91 70       	andi	r25, 0x01	; 1
    1d86:	83 e0       	ldi	r24, 0x03	; 3
    1d88:	61 e0       	ldi	r22, 0x01	; 1
    1d8a:	49 2f       	mov	r20, r25
    1d8c:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    1d90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d92:	98 2f       	mov	r25, r24
    1d94:	91 70       	andi	r25, 0x01	; 1
    1d96:	83 e0       	ldi	r24, 0x03	; 3
    1d98:	60 e0       	ldi	r22, 0x00	; 0
    1d9a:	49 2f       	mov	r20, r25
    1d9c:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
#endif

	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	62 e0       	ldi	r22, 0x02	; 2
    1da4:	41 e0       	ldi	r20, 0x01	; 1
    1da6:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	a0 e2       	ldi	r26, 0x20	; 32
    1db0:	b1 e4       	ldi	r27, 0x41	; 65
    1db2:	89 8f       	std	Y+25, r24	; 0x19
    1db4:	9a 8f       	std	Y+26, r25	; 0x1a
    1db6:	ab 8f       	std	Y+27, r26	; 0x1b
    1db8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dba:	69 8d       	ldd	r22, Y+25	; 0x19
    1dbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	4a e7       	ldi	r20, 0x7A	; 122
    1dc8:	53 e4       	ldi	r21, 0x43	; 67
    1dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	8d 8b       	std	Y+21, r24	; 0x15
    1dd4:	9e 8b       	std	Y+22, r25	; 0x16
    1dd6:	af 8b       	std	Y+23, r26	; 0x17
    1dd8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dda:	6d 89       	ldd	r22, Y+21	; 0x15
    1ddc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dde:	8f 89       	ldd	r24, Y+23	; 0x17
    1de0:	98 8d       	ldd	r25, Y+24	; 0x18
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e8       	ldi	r20, 0x80	; 128
    1de8:	5f e3       	ldi	r21, 0x3F	; 63
    1dea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dee:	88 23       	and	r24, r24
    1df0:	2c f4       	brge	.+10     	; 0x1dfc <LCD_VoidLatch+0x128>
		__ticks = 1;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	9c 8b       	std	Y+20, r25	; 0x14
    1df8:	8b 8b       	std	Y+19, r24	; 0x13
    1dfa:	3f c0       	rjmp	.+126    	; 0x1e7a <LCD_VoidLatch+0x1a6>
	else if (__tmp > 65535)
    1dfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1e00:	8f 89       	ldd	r24, Y+23	; 0x17
    1e02:	98 8d       	ldd	r25, Y+24	; 0x18
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	3f ef       	ldi	r19, 0xFF	; 255
    1e08:	4f e7       	ldi	r20, 0x7F	; 127
    1e0a:	57 e4       	ldi	r21, 0x47	; 71
    1e0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e10:	18 16       	cp	r1, r24
    1e12:	4c f5       	brge	.+82     	; 0x1e66 <LCD_VoidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e14:	69 8d       	ldd	r22, Y+25	; 0x19
    1e16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e2       	ldi	r20, 0x20	; 32
    1e22:	51 e4       	ldi	r21, 0x41	; 65
    1e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	9c 8b       	std	Y+20, r25	; 0x14
    1e3a:	8b 8b       	std	Y+19, r24	; 0x13
    1e3c:	0f c0       	rjmp	.+30     	; 0x1e5c <LCD_VoidLatch+0x188>
    1e3e:	89 e1       	ldi	r24, 0x19	; 25
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	9a 8b       	std	Y+18, r25	; 0x12
    1e44:	89 8b       	std	Y+17, r24	; 0x11
    1e46:	89 89       	ldd	r24, Y+17	; 0x11
    1e48:	9a 89       	ldd	r25, Y+18	; 0x12
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <LCD_VoidLatch+0x176>
    1e4e:	9a 8b       	std	Y+18, r25	; 0x12
    1e50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e52:	8b 89       	ldd	r24, Y+19	; 0x13
    1e54:	9c 89       	ldd	r25, Y+20	; 0x14
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	9c 8b       	std	Y+20, r25	; 0x14
    1e5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	69 f7       	brne	.-38     	; 0x1e3e <LCD_VoidLatch+0x16a>
    1e64:	14 c0       	rjmp	.+40     	; 0x1e8e <LCD_VoidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e66:	6d 89       	ldd	r22, Y+21	; 0x15
    1e68:	7e 89       	ldd	r23, Y+22	; 0x16
    1e6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	9c 8b       	std	Y+20, r25	; 0x14
    1e78:	8b 8b       	std	Y+19, r24	; 0x13
    1e7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7e:	98 8b       	std	Y+16, r25	; 0x10
    1e80:	8f 87       	std	Y+15, r24	; 0x0f
    1e82:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e84:	98 89       	ldd	r25, Y+16	; 0x10
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <LCD_VoidLatch+0x1b2>
    1e8a:	98 8b       	std	Y+16, r25	; 0x10
    1e8c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	62 e0       	ldi	r22, 0x02	; 2
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	a0 e2       	ldi	r26, 0x20	; 32
    1e9e:	b1 e4       	ldi	r27, 0x41	; 65
    1ea0:	8b 87       	std	Y+11, r24	; 0x0b
    1ea2:	9c 87       	std	Y+12, r25	; 0x0c
    1ea4:	ad 87       	std	Y+13, r26	; 0x0d
    1ea6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	4a e7       	ldi	r20, 0x7A	; 122
    1eb6:	53 e4       	ldi	r21, 0x43	; 67
    1eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	8f 83       	std	Y+7, r24	; 0x07
    1ec2:	98 87       	std	Y+8, r25	; 0x08
    1ec4:	a9 87       	std	Y+9, r26	; 0x09
    1ec6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eca:	78 85       	ldd	r23, Y+8	; 0x08
    1ecc:	89 85       	ldd	r24, Y+9	; 0x09
    1ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e8       	ldi	r20, 0x80	; 128
    1ed6:	5f e3       	ldi	r21, 0x3F	; 63
    1ed8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1edc:	88 23       	and	r24, r24
    1ede:	2c f4       	brge	.+10     	; 0x1eea <LCD_VoidLatch+0x216>
		__ticks = 1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9e 83       	std	Y+6, r25	; 0x06
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
    1ee8:	3f c0       	rjmp	.+126    	; 0x1f68 <LCD_VoidLatch+0x294>
	else if (__tmp > 65535)
    1eea:	6f 81       	ldd	r22, Y+7	; 0x07
    1eec:	78 85       	ldd	r23, Y+8	; 0x08
    1eee:	89 85       	ldd	r24, Y+9	; 0x09
    1ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	3f ef       	ldi	r19, 0xFF	; 255
    1ef6:	4f e7       	ldi	r20, 0x7F	; 127
    1ef8:	57 e4       	ldi	r21, 0x47	; 71
    1efa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1efe:	18 16       	cp	r1, r24
    1f00:	4c f5       	brge	.+82     	; 0x1f54 <LCD_VoidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e2       	ldi	r20, 0x20	; 32
    1f10:	51 e4       	ldi	r21, 0x41	; 65
    1f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	9e 83       	std	Y+6, r25	; 0x06
    1f28:	8d 83       	std	Y+5, r24	; 0x05
    1f2a:	0f c0       	rjmp	.+30     	; 0x1f4a <LCD_VoidLatch+0x276>
    1f2c:	89 e1       	ldi	r24, 0x19	; 25
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9c 83       	std	Y+4, r25	; 0x04
    1f32:	8b 83       	std	Y+3, r24	; 0x03
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <LCD_VoidLatch+0x264>
    1f3c:	9c 83       	std	Y+4, r25	; 0x04
    1f3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f40:	8d 81       	ldd	r24, Y+5	; 0x05
    1f42:	9e 81       	ldd	r25, Y+6	; 0x06
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	9e 83       	std	Y+6, r25	; 0x06
    1f48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	69 f7       	brne	.-38     	; 0x1f2c <LCD_VoidLatch+0x258>
    1f52:	14 c0       	rjmp	.+40     	; 0x1f7c <LCD_VoidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f54:	6f 81       	ldd	r22, Y+7	; 0x07
    1f56:	78 85       	ldd	r23, Y+8	; 0x08
    1f58:	89 85       	ldd	r24, Y+9	; 0x09
    1f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	9e 83       	std	Y+6, r25	; 0x06
    1f66:	8d 83       	std	Y+5, r24	; 0x05
    1f68:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6c:	9a 83       	std	Y+2, r25	; 0x02
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	9a 81       	ldd	r25, Y+2	; 0x02
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <LCD_VoidLatch+0x2a0>
    1f78:	9a 83       	std	Y+2, r25	; 0x02
    1f7a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    1f7c:	6d 96       	adiw	r28, 0x1d	; 29
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <LCD_inVoidSendCommand>:


static inline void LCD_inVoidSendCommand(u8 Copy_u8Command){
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	2f 97       	sbiw	r28, 0x0f	; 15
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
    1fa2:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	60 e0       	ldi	r22, 0x00	; 0
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	61 e0       	ldi	r22, 0x01	; 1
    1fb2:	40 e0       	ldi	r20, 0x00	; 0
    1fb4:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	62 e0       	ldi	r22, 0x02	; 2
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(D7_PORT, D7_PIN, (Copy_u8Command >> 7)&1);
    1fc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc4:	98 2f       	mov	r25, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	99 27       	eor	r25, r25
    1fca:	99 1f       	adc	r25, r25
    1fcc:	83 e0       	ldi	r24, 0x03	; 3
    1fce:	67 e0       	ldi	r22, 0x07	; 7
    1fd0:	49 2f       	mov	r20, r25
    1fd2:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN, (Copy_u8Command >> 6)&1);
    1fd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd8:	82 95       	swap	r24
    1fda:	86 95       	lsr	r24
    1fdc:	86 95       	lsr	r24
    1fde:	83 70       	andi	r24, 0x03	; 3
    1fe0:	98 2f       	mov	r25, r24
    1fe2:	91 70       	andi	r25, 0x01	; 1
    1fe4:	83 e0       	ldi	r24, 0x03	; 3
    1fe6:	66 e0       	ldi	r22, 0x06	; 6
    1fe8:	49 2f       	mov	r20, r25
    1fea:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN, (Copy_u8Command >> 5)&1);
    1fee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff0:	82 95       	swap	r24
    1ff2:	86 95       	lsr	r24
    1ff4:	87 70       	andi	r24, 0x07	; 7
    1ff6:	98 2f       	mov	r25, r24
    1ff8:	91 70       	andi	r25, 0x01	; 1
    1ffa:	83 e0       	ldi	r24, 0x03	; 3
    1ffc:	65 e0       	ldi	r22, 0x05	; 5
    1ffe:	49 2f       	mov	r20, r25
    2000:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT, D4_PIN, (Copy_u8Command >> 4)&1);
    2004:	8f 85       	ldd	r24, Y+15	; 0x0f
    2006:	82 95       	swap	r24
    2008:	8f 70       	andi	r24, 0x0F	; 15
    200a:	98 2f       	mov	r25, r24
    200c:	91 70       	andi	r25, 0x01	; 1
    200e:	83 e0       	ldi	r24, 0x03	; 3
    2010:	64 e0       	ldi	r22, 0x04	; 4
    2012:	49 2f       	mov	r20, r25
    2014:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D3_PORT, D3_PIN, (Copy_u8Command >> 3)&1);
    2018:	8f 85       	ldd	r24, Y+15	; 0x0f
    201a:	86 95       	lsr	r24
    201c:	86 95       	lsr	r24
    201e:	86 95       	lsr	r24
    2020:	98 2f       	mov	r25, r24
    2022:	91 70       	andi	r25, 0x01	; 1
    2024:	83 e0       	ldi	r24, 0x03	; 3
    2026:	63 e0       	ldi	r22, 0x03	; 3
    2028:	49 2f       	mov	r20, r25
    202a:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT, D2_PIN, (Copy_u8Command >> 2)&1);
    202e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2030:	86 95       	lsr	r24
    2032:	86 95       	lsr	r24
    2034:	98 2f       	mov	r25, r24
    2036:	91 70       	andi	r25, 0x01	; 1
    2038:	83 e0       	ldi	r24, 0x03	; 3
    203a:	62 e0       	ldi	r22, 0x02	; 2
    203c:	49 2f       	mov	r20, r25
    203e:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT, D1_PIN, (Copy_u8Command >> 1)&1);
    2042:	8f 85       	ldd	r24, Y+15	; 0x0f
    2044:	86 95       	lsr	r24
    2046:	98 2f       	mov	r25, r24
    2048:	91 70       	andi	r25, 0x01	; 1
    204a:	83 e0       	ldi	r24, 0x03	; 3
    204c:	61 e0       	ldi	r22, 0x01	; 1
    204e:	49 2f       	mov	r20, r25
    2050:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT, D0_PIN, (Copy_u8Command >> 0)&1);
    2054:	8f 85       	ldd	r24, Y+15	; 0x0f
    2056:	98 2f       	mov	r25, r24
    2058:	91 70       	andi	r25, 0x01	; 1
    205a:	83 e0       	ldi	r24, 0x03	; 3
    205c:	60 e0       	ldi	r22, 0x00	; 0
    205e:	49 2f       	mov	r20, r25
    2060:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	62 e0       	ldi	r22, 0x02	; 2
    2068:	41 e0       	ldi	r20, 0x01	; 1
    206a:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a0 e2       	ldi	r26, 0x20	; 32
    2074:	b1 e4       	ldi	r27, 0x41	; 65
    2076:	8b 87       	std	Y+11, r24	; 0x0b
    2078:	9c 87       	std	Y+12, r25	; 0x0c
    207a:	ad 87       	std	Y+13, r26	; 0x0d
    207c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2080:	7c 85       	ldd	r23, Y+12	; 0x0c
    2082:	8d 85       	ldd	r24, Y+13	; 0x0d
    2084:	9e 85       	ldd	r25, Y+14	; 0x0e
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	4a e7       	ldi	r20, 0x7A	; 122
    208c:	53 e4       	ldi	r21, 0x43	; 67
    208e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	8f 83       	std	Y+7, r24	; 0x07
    2098:	98 87       	std	Y+8, r25	; 0x08
    209a:	a9 87       	std	Y+9, r26	; 0x09
    209c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    209e:	6f 81       	ldd	r22, Y+7	; 0x07
    20a0:	78 85       	ldd	r23, Y+8	; 0x08
    20a2:	89 85       	ldd	r24, Y+9	; 0x09
    20a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e8       	ldi	r20, 0x80	; 128
    20ac:	5f e3       	ldi	r21, 0x3F	; 63
    20ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b2:	88 23       	and	r24, r24
    20b4:	2c f4       	brge	.+10     	; 0x20c0 <LCD_inVoidSendCommand+0x132>
		__ticks = 1;
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	9e 83       	std	Y+6, r25	; 0x06
    20bc:	8d 83       	std	Y+5, r24	; 0x05
    20be:	3f c0       	rjmp	.+126    	; 0x213e <LCD_inVoidSendCommand+0x1b0>
	else if (__tmp > 65535)
    20c0:	6f 81       	ldd	r22, Y+7	; 0x07
    20c2:	78 85       	ldd	r23, Y+8	; 0x08
    20c4:	89 85       	ldd	r24, Y+9	; 0x09
    20c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	3f ef       	ldi	r19, 0xFF	; 255
    20cc:	4f e7       	ldi	r20, 0x7F	; 127
    20ce:	57 e4       	ldi	r21, 0x47	; 71
    20d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d4:	18 16       	cp	r1, r24
    20d6:	4c f5       	brge	.+82     	; 0x212a <LCD_inVoidSendCommand+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20da:	7c 85       	ldd	r23, Y+12	; 0x0c
    20dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20de:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e2       	ldi	r20, 0x20	; 32
    20e6:	51 e4       	ldi	r21, 0x41	; 65
    20e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	bc 01       	movw	r22, r24
    20f2:	cd 01       	movw	r24, r26
    20f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	9e 83       	std	Y+6, r25	; 0x06
    20fe:	8d 83       	std	Y+5, r24	; 0x05
    2100:	0f c0       	rjmp	.+30     	; 0x2120 <LCD_inVoidSendCommand+0x192>
    2102:	89 e1       	ldi	r24, 0x19	; 25
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	9c 83       	std	Y+4, r25	; 0x04
    2108:	8b 83       	std	Y+3, r24	; 0x03
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	9c 81       	ldd	r25, Y+4	; 0x04
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <LCD_inVoidSendCommand+0x180>
    2112:	9c 83       	std	Y+4, r25	; 0x04
    2114:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2116:	8d 81       	ldd	r24, Y+5	; 0x05
    2118:	9e 81       	ldd	r25, Y+6	; 0x06
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	9e 83       	std	Y+6, r25	; 0x06
    211e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2120:	8d 81       	ldd	r24, Y+5	; 0x05
    2122:	9e 81       	ldd	r25, Y+6	; 0x06
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	69 f7       	brne	.-38     	; 0x2102 <LCD_inVoidSendCommand+0x174>
    2128:	14 c0       	rjmp	.+40     	; 0x2152 <LCD_inVoidSendCommand+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212a:	6f 81       	ldd	r22, Y+7	; 0x07
    212c:	78 85       	ldd	r23, Y+8	; 0x08
    212e:	89 85       	ldd	r24, Y+9	; 0x09
    2130:	9a 85       	ldd	r25, Y+10	; 0x0a
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9e 83       	std	Y+6, r25	; 0x06
    213c:	8d 83       	std	Y+5, r24	; 0x05
    213e:	8d 81       	ldd	r24, Y+5	; 0x05
    2140:	9e 81       	ldd	r25, Y+6	; 0x06
    2142:	9a 83       	std	Y+2, r25	; 0x02
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	9a 81       	ldd	r25, Y+2	; 0x02
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	f1 f7       	brne	.-4      	; 0x214a <LCD_inVoidSendCommand+0x1bc>
    214e:	9a 83       	std	Y+2, r25	; 0x02
    2150:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	62 e0       	ldi	r22, 0x02	; 2
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_enuSetPinValue>


}
    215c:	2f 96       	adiw	r28, 0x0f	; 15
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <LCD_enuGoto>:

ES LCD_enuGoto(u8 Copy_u8Line,u8 Copy_u8Block)
{
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	00 d0       	rcall	.+0      	; 0x2174 <LCD_enuGoto+0x6>
    2174:	00 d0       	rcall	.+0      	; 0x2176 <LCD_enuGoto+0x8>
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    217a:	8a 83       	std	Y+2, r24	; 0x02
    217c:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_ErrorState = ES_NOK;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Line == 1)
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	81 30       	cpi	r24, 0x01	; 1
    2186:	31 f4       	brne	.+12     	; 0x2194 <LCD_enuGoto+0x26>
	{
		Local_ErrorState = LCD_enuSendCommand(0x80 + Copy_u8Block);
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	80 58       	subi	r24, 0x80	; 128
    218c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <LCD_enuSendCommand>
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	0c c0       	rjmp	.+24     	; 0x21ac <LCD_enuGoto+0x3e>
	}
	else if(Copy_u8Line == 2)
    2194:	8a 81       	ldd	r24, Y+2	; 0x02
    2196:	82 30       	cpi	r24, 0x02	; 2
    2198:	31 f4       	brne	.+12     	; 0x21a6 <LCD_enuGoto+0x38>
	{
		Local_ErrorState = LCD_enuSendCommand(0x80+0x40+Copy_u8Block);
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	80 54       	subi	r24, 0x40	; 64
    219e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <LCD_enuSendCommand>
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	03 c0       	rjmp	.+6      	; 0x21ac <LCD_enuGoto+0x3e>
	}
	else
	{
		return ES_OUT_OF_RANGE;
    21a6:	83 e0       	ldi	r24, 0x03	; 3
    21a8:	8c 83       	std	Y+4, r24	; 0x04
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <LCD_enuGoto+0x42>
	}
	return Local_ErrorState;
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	8c 83       	std	Y+4, r24	; 0x04
    21b0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <LM35_u8GetTemp>:
#include "ADC_int.h"

#include "LM35_priv.h"
#include "LM35_config.h"

ES LM35_u8GetTemp (s8 * Copy_u8TempValue) {
    21c0:	ef 92       	push	r14
    21c2:	ff 92       	push	r15
    21c4:	0f 93       	push	r16
    21c6:	1f 93       	push	r17
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	29 97       	sbiw	r28, 0x09	; 9
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	99 87       	std	Y+9, r25	; 0x09
    21de:	88 87       	std	Y+8, r24	; 0x08

	ES Local_enuErrorState = ES_OK;
    21e0:	1d 82       	std	Y+5, r1	; 0x05

	s16 Local_u16ADCResult, Local_u16AnalogValue;

	s16 Local_u8ADCReference = (s16)ADC_Voltage_Reference * 1000 ;
    21e2:	88 e8       	ldi	r24, 0x88	; 136
    21e4:	93 e1       	ldi	r25, 0x13	; 19
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01

	// ADC Digital Reading
	ADC_enuRead(&Local_u16ADCResult);
    21ea:	ce 01       	movw	r24, r28
    21ec:	06 96       	adiw	r24, 0x06	; 6
    21ee:	0e 94 40 06 	call	0xc80	; 0xc80 <ADC_enuRead>




#if ADC_Resolution == ADC_RESOLUTION_10_BIT
	Local_u16AnalogValue = (s16) ( ((s32)Local_u16ADCResult * (s32)Local_u8ADCReference ) / 1024UL) ;
    21f2:	8e 81       	ldd	r24, Y+6	; 0x06
    21f4:	9f 81       	ldd	r25, Y+7	; 0x07
    21f6:	7c 01       	movw	r14, r24
    21f8:	00 27       	eor	r16, r16
    21fa:	f7 fc       	sbrc	r15, 7
    21fc:	00 95       	com	r16
    21fe:	10 2f       	mov	r17, r16
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	9a 81       	ldd	r25, Y+2	; 0x02
    2204:	9c 01       	movw	r18, r24
    2206:	44 27       	eor	r20, r20
    2208:	37 fd       	sbrc	r19, 7
    220a:	40 95       	com	r20
    220c:	54 2f       	mov	r21, r20
    220e:	c8 01       	movw	r24, r16
    2210:	b7 01       	movw	r22, r14
    2212:	0e 94 9b 11 	call	0x2336	; 0x2336 <__mulsi3>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	07 2e       	mov	r0, r23
    221c:	7a e0       	ldi	r23, 0x0A	; 10
    221e:	b6 95       	lsr	r27
    2220:	a7 95       	ror	r26
    2222:	97 95       	ror	r25
    2224:	87 95       	ror	r24
    2226:	7a 95       	dec	r23
    2228:	d1 f7       	brne	.-12     	; 0x221e <LM35_u8GetTemp+0x5e>
    222a:	70 2d       	mov	r23, r0
    222c:	9c 83       	std	Y+4, r25	; 0x04
    222e:	8b 83       	std	Y+3, r24	; 0x03
#else
	Local_enuErrorState = ES_OUT_OF_RANGE;
#endif


	* Copy_u8TempValue = Local_u16AnalogValue / 10 ;
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	9c 81       	ldd	r25, Y+4	; 0x04
    2234:	2a e0       	ldi	r18, 0x0A	; 10
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	b9 01       	movw	r22, r18
    223a:	0e 94 c6 11 	call	0x238c	; 0x238c <__divmodhi4>
    223e:	cb 01       	movw	r24, r22
    2240:	e8 85       	ldd	r30, Y+8	; 0x08
    2242:	f9 85       	ldd	r31, Y+9	; 0x09
    2244:	80 83       	st	Z, r24

	return Local_enuErrorState;
    2246:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2248:	29 96       	adiw	r28, 0x09	; 9
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	1f 91       	pop	r17
    225a:	0f 91       	pop	r16
    225c:	ff 90       	pop	r15
    225e:	ef 90       	pop	r14
    2260:	08 95       	ret

00002262 <main>:
#include "LCD_int.h"

#include "LM35_int.h"

int main(void)
{
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	0f 92       	push	r0
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
	u8 temperature = 0;
    226c:	19 82       	std	Y+1, r1	; 0x01

	LCD_enuInit();
    226e:	0e 94 0a 0c 	call	0x1814	; 0x1814 <LCD_enuInit>

	DIO_enuSetPortDirection(DIO_u8PORTC, 0xFF);
    2272:	82 e0       	ldi	r24, 0x02	; 2
    2274:	6f ef       	ldi	r22, 0xFF	; 255
    2276:	0e 94 91 07 	call	0xf22	; 0xf22 <DIO_enuSetPortDirection>

	//LM35 Channel
	DIO_enuSetPinDirection(DIO_u8PORTA, DIO_u8PIN3, DIO_u8INPUT);
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	63 e0       	ldi	r22, 0x03	; 3
    227e:	40 e0       	ldi	r20, 0x00	; 0
    2280:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_enuSetPinDirection>
	ADC_enuInit();
    2284:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_enuInit>
	ADC_enuSelectChannel(3);
    2288:	83 e0       	ldi	r24, 0x03	; 3
    228a:	0e 94 91 06 	call	0xd22	; 0xd22 <ADC_enuSelectChannel>
	ADC_enuDisableTriggeringMode();
    228e:	0e 94 07 07 	call	0xe0e	; 0xe0e <ADC_enuDisableTriggeringMode>


	LCD_enuClearDisplay();
    2292:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <LCD_enuClearDisplay>
	LCD_enuDisplayChar('T');
    2296:	84 e5       	ldi	r24, 0x54	; 84
    2298:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <LCD_enuDisplayChar>
	LCD_enuDisplayChar('e');
    229c:	85 e6       	ldi	r24, 0x65	; 101
    229e:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <LCD_enuDisplayChar>
	LCD_enuDisplayChar('m');
    22a2:	8d e6       	ldi	r24, 0x6D	; 109
    22a4:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <LCD_enuDisplayChar>
	LCD_enuDisplayChar('p');
    22a8:	80 e7       	ldi	r24, 0x70	; 112
    22aa:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <LCD_enuDisplayChar>
	LCD_enuDisplayChar('r');
    22ae:	82 e7       	ldi	r24, 0x72	; 114
    22b0:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <LCD_enuDisplayChar>
	LCD_enuDisplayChar('a');
    22b4:	81 e6       	ldi	r24, 0x61	; 97
    22b6:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <LCD_enuDisplayChar>
	LCD_enuDisplayChar('t');
    22ba:	84 e7       	ldi	r24, 0x74	; 116
    22bc:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <LCD_enuDisplayChar>
	LCD_enuDisplayChar('u');
    22c0:	85 e7       	ldi	r24, 0x75	; 117
    22c2:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <LCD_enuDisplayChar>
	LCD_enuDisplayChar('r');
    22c6:	82 e7       	ldi	r24, 0x72	; 114
    22c8:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <LCD_enuDisplayChar>
	LCD_enuDisplayChar('e');
    22cc:	85 e6       	ldi	r24, 0x65	; 101
    22ce:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <LCD_enuDisplayChar>
	LCD_enuDisplayChar(' ');
    22d2:	80 e2       	ldi	r24, 0x20	; 32
    22d4:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <LCD_enuDisplayChar>
	LCD_enuDisplayChar('=');
    22d8:	8d e3       	ldi	r24, 0x3D	; 61
    22da:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <LCD_enuDisplayChar>
	LCD_enuDisplayChar(' ');
    22de:	80 e2       	ldi	r24, 0x20	; 32
    22e0:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <LCD_enuDisplayChar>
	LCD_enuSendCommand(0x0C);
    22e4:	8c e0       	ldi	r24, 0x0C	; 12
    22e6:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <LCD_enuSendCommand>
	while (1)
	{


		ADC_enuStartConversion();
    22ea:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <ADC_enuStartConversion>
		ADC_enuPollingSystem();
    22ee:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <ADC_enuPollingSystem>
		LM35_u8GetTemp(&temperature);
    22f2:	ce 01       	movw	r24, r28
    22f4:	01 96       	adiw	r24, 0x01	; 1
    22f6:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LM35_u8GetTemp>
		//DIO_enuSetPortValue(DIO_u8PORTC , temperature);

		LCD_enuGoto(1,13);
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	6d e0       	ldi	r22, 0x0D	; 13
    22fe:	0e 94 b7 10 	call	0x216e	; 0x216e <LCD_enuGoto>
		if(temperature < 0) {
			LCD_enuDisplayChar('-');
			temperature *= -1;
		}

		LCD_enuDisplayChar('0' + (temperature / 10) % 10);
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	9a e0       	ldi	r25, 0x0A	; 10
    2306:	69 2f       	mov	r22, r25
    2308:	0e 94 ba 11 	call	0x2374	; 0x2374 <__udivmodqi4>
    230c:	9a e0       	ldi	r25, 0x0A	; 10
    230e:	69 2f       	mov	r22, r25
    2310:	0e 94 ba 11 	call	0x2374	; 0x2374 <__udivmodqi4>
    2314:	89 2f       	mov	r24, r25
    2316:	80 5d       	subi	r24, 0xD0	; 208
    2318:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <LCD_enuDisplayChar>
		LCD_enuDisplayChar('0' + temperature % 10);
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	9a e0       	ldi	r25, 0x0A	; 10
    2320:	69 2f       	mov	r22, r25
    2322:	0e 94 ba 11 	call	0x2374	; 0x2374 <__udivmodqi4>
    2326:	89 2f       	mov	r24, r25
    2328:	80 5d       	subi	r24, 0xD0	; 208
    232a:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <LCD_enuDisplayChar>
		LCD_enuDisplayChar('C');
    232e:	83 e4       	ldi	r24, 0x43	; 67
    2330:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <LCD_enuDisplayChar>
    2334:	da cf       	rjmp	.-76     	; 0x22ea <main+0x88>

00002336 <__mulsi3>:
    2336:	62 9f       	mul	r22, r18
    2338:	d0 01       	movw	r26, r0
    233a:	73 9f       	mul	r23, r19
    233c:	f0 01       	movw	r30, r0
    233e:	82 9f       	mul	r24, r18
    2340:	e0 0d       	add	r30, r0
    2342:	f1 1d       	adc	r31, r1
    2344:	64 9f       	mul	r22, r20
    2346:	e0 0d       	add	r30, r0
    2348:	f1 1d       	adc	r31, r1
    234a:	92 9f       	mul	r25, r18
    234c:	f0 0d       	add	r31, r0
    234e:	83 9f       	mul	r24, r19
    2350:	f0 0d       	add	r31, r0
    2352:	74 9f       	mul	r23, r20
    2354:	f0 0d       	add	r31, r0
    2356:	65 9f       	mul	r22, r21
    2358:	f0 0d       	add	r31, r0
    235a:	99 27       	eor	r25, r25
    235c:	72 9f       	mul	r23, r18
    235e:	b0 0d       	add	r27, r0
    2360:	e1 1d       	adc	r30, r1
    2362:	f9 1f       	adc	r31, r25
    2364:	63 9f       	mul	r22, r19
    2366:	b0 0d       	add	r27, r0
    2368:	e1 1d       	adc	r30, r1
    236a:	f9 1f       	adc	r31, r25
    236c:	bd 01       	movw	r22, r26
    236e:	cf 01       	movw	r24, r30
    2370:	11 24       	eor	r1, r1
    2372:	08 95       	ret

00002374 <__udivmodqi4>:
    2374:	99 1b       	sub	r25, r25
    2376:	79 e0       	ldi	r23, 0x09	; 9
    2378:	04 c0       	rjmp	.+8      	; 0x2382 <__udivmodqi4_ep>

0000237a <__udivmodqi4_loop>:
    237a:	99 1f       	adc	r25, r25
    237c:	96 17       	cp	r25, r22
    237e:	08 f0       	brcs	.+2      	; 0x2382 <__udivmodqi4_ep>
    2380:	96 1b       	sub	r25, r22

00002382 <__udivmodqi4_ep>:
    2382:	88 1f       	adc	r24, r24
    2384:	7a 95       	dec	r23
    2386:	c9 f7       	brne	.-14     	; 0x237a <__udivmodqi4_loop>
    2388:	80 95       	com	r24
    238a:	08 95       	ret

0000238c <__divmodhi4>:
    238c:	97 fb       	bst	r25, 7
    238e:	09 2e       	mov	r0, r25
    2390:	07 26       	eor	r0, r23
    2392:	0a d0       	rcall	.+20     	; 0x23a8 <__divmodhi4_neg1>
    2394:	77 fd       	sbrc	r23, 7
    2396:	04 d0       	rcall	.+8      	; 0x23a0 <__divmodhi4_neg2>
    2398:	0c d0       	rcall	.+24     	; 0x23b2 <__udivmodhi4>
    239a:	06 d0       	rcall	.+12     	; 0x23a8 <__divmodhi4_neg1>
    239c:	00 20       	and	r0, r0
    239e:	1a f4       	brpl	.+6      	; 0x23a6 <__divmodhi4_exit>

000023a0 <__divmodhi4_neg2>:
    23a0:	70 95       	com	r23
    23a2:	61 95       	neg	r22
    23a4:	7f 4f       	sbci	r23, 0xFF	; 255

000023a6 <__divmodhi4_exit>:
    23a6:	08 95       	ret

000023a8 <__divmodhi4_neg1>:
    23a8:	f6 f7       	brtc	.-4      	; 0x23a6 <__divmodhi4_exit>
    23aa:	90 95       	com	r25
    23ac:	81 95       	neg	r24
    23ae:	9f 4f       	sbci	r25, 0xFF	; 255
    23b0:	08 95       	ret

000023b2 <__udivmodhi4>:
    23b2:	aa 1b       	sub	r26, r26
    23b4:	bb 1b       	sub	r27, r27
    23b6:	51 e1       	ldi	r21, 0x11	; 17
    23b8:	07 c0       	rjmp	.+14     	; 0x23c8 <__udivmodhi4_ep>

000023ba <__udivmodhi4_loop>:
    23ba:	aa 1f       	adc	r26, r26
    23bc:	bb 1f       	adc	r27, r27
    23be:	a6 17       	cp	r26, r22
    23c0:	b7 07       	cpc	r27, r23
    23c2:	10 f0       	brcs	.+4      	; 0x23c8 <__udivmodhi4_ep>
    23c4:	a6 1b       	sub	r26, r22
    23c6:	b7 0b       	sbc	r27, r23

000023c8 <__udivmodhi4_ep>:
    23c8:	88 1f       	adc	r24, r24
    23ca:	99 1f       	adc	r25, r25
    23cc:	5a 95       	dec	r21
    23ce:	a9 f7       	brne	.-22     	; 0x23ba <__udivmodhi4_loop>
    23d0:	80 95       	com	r24
    23d2:	90 95       	com	r25
    23d4:	bc 01       	movw	r22, r24
    23d6:	cd 01       	movw	r24, r26
    23d8:	08 95       	ret

000023da <__prologue_saves__>:
    23da:	2f 92       	push	r2
    23dc:	3f 92       	push	r3
    23de:	4f 92       	push	r4
    23e0:	5f 92       	push	r5
    23e2:	6f 92       	push	r6
    23e4:	7f 92       	push	r7
    23e6:	8f 92       	push	r8
    23e8:	9f 92       	push	r9
    23ea:	af 92       	push	r10
    23ec:	bf 92       	push	r11
    23ee:	cf 92       	push	r12
    23f0:	df 92       	push	r13
    23f2:	ef 92       	push	r14
    23f4:	ff 92       	push	r15
    23f6:	0f 93       	push	r16
    23f8:	1f 93       	push	r17
    23fa:	cf 93       	push	r28
    23fc:	df 93       	push	r29
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	ca 1b       	sub	r28, r26
    2404:	db 0b       	sbc	r29, r27
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	09 94       	ijmp

00002412 <__epilogue_restores__>:
    2412:	2a 88       	ldd	r2, Y+18	; 0x12
    2414:	39 88       	ldd	r3, Y+17	; 0x11
    2416:	48 88       	ldd	r4, Y+16	; 0x10
    2418:	5f 84       	ldd	r5, Y+15	; 0x0f
    241a:	6e 84       	ldd	r6, Y+14	; 0x0e
    241c:	7d 84       	ldd	r7, Y+13	; 0x0d
    241e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2420:	9b 84       	ldd	r9, Y+11	; 0x0b
    2422:	aa 84       	ldd	r10, Y+10	; 0x0a
    2424:	b9 84       	ldd	r11, Y+9	; 0x09
    2426:	c8 84       	ldd	r12, Y+8	; 0x08
    2428:	df 80       	ldd	r13, Y+7	; 0x07
    242a:	ee 80       	ldd	r14, Y+6	; 0x06
    242c:	fd 80       	ldd	r15, Y+5	; 0x05
    242e:	0c 81       	ldd	r16, Y+4	; 0x04
    2430:	1b 81       	ldd	r17, Y+3	; 0x03
    2432:	aa 81       	ldd	r26, Y+2	; 0x02
    2434:	b9 81       	ldd	r27, Y+1	; 0x01
    2436:	ce 0f       	add	r28, r30
    2438:	d1 1d       	adc	r29, r1
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	ed 01       	movw	r28, r26
    2446:	08 95       	ret

00002448 <_exit>:
    2448:	f8 94       	cli

0000244a <__stop_program>:
    244a:	ff cf       	rjmp	.-2      	; 0x244a <__stop_program>
